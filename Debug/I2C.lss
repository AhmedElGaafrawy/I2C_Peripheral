
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000313e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000313e  000031d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800068  00800068  000031da  2**0
                  ALLOC
  3 .stab         00002b80  00000000  00000000  000031dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013b4  00000000  00000000  00005d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007110  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00007270  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000073ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00009444  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a545  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b4c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b648  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b90a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c198  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a9 36       	cpi	r26, 0x69	; 105
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ee e3       	ldi	r30, 0x3E	; 62
      78:	f1 e3       	ldi	r31, 0x31	; 49
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <main>
      8a:	0c 94 9d 18 	jmp	0x313a	; 0x313a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 66 18 	jmp	0x30cc	; 0x30cc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 82 18 	jmp	0x3104	; 0x3104 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 72 18 	jmp	0x30e4	; 0x30e4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8e 18 	jmp	0x311c	; 0x311c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 72 18 	jmp	0x30e4	; 0x30e4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8e 18 	jmp	0x311c	; 0x311c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 66 18 	jmp	0x30cc	; 0x30cc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 82 18 	jmp	0x3104	; 0x3104 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6e 18 	jmp	0x30dc	; 0x30dc <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 8a 18 	jmp	0x3114	; 0x3114 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 72 18 	jmp	0x30e4	; 0x30e4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 8e 18 	jmp	0x311c	; 0x311c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 72 18 	jmp	0x30e4	; 0x30e4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 8e 18 	jmp	0x311c	; 0x311c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 72 18 	jmp	0x30e4	; 0x30e4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 8e 18 	jmp	0x311c	; 0x311c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 76 18 	jmp	0x30ec	; 0x30ec <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 92 18 	jmp	0x3124	; 0x3124 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <I2C_enuInitMaster>:
#include "I2C_config.h"
#include "I2C_priv.h"


ERROR_STATES I2C_enuInitMaster	(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	0f 92       	push	r0
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATES error_enuState = ES_NOT_OK;
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	89 83       	std	Y+1, r24	; 0x01

#if I2C_PRESCALER == I2C_PRESCALER_1
	SET_I2C_PRESCALER_1;
     cac:	a1 e2       	ldi	r26, 0x21	; 33
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e1 e2       	ldi	r30, 0x21	; 33
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	8c 7f       	andi	r24, 0xFC	; 252
     cb8:	8c 93       	st	X, r24
	SET_TWBR_VALUE;
     cba:	e0 e2       	ldi	r30, 0x20	; 32
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 e2       	ldi	r24, 0x20	; 32
     cc0:	80 83       	st	Z, r24
	SET_I2C_ENABLE;
     cc2:	a6 e5       	ldi	r26, 0x56	; 86
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e6 e5       	ldi	r30, 0x56	; 86
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	84 60       	ori	r24, 0x04	; 4
     cce:	8c 93       	st	X, r24
	error_enuState = ES_OK;
     cd0:	19 82       	std	Y+1, r1	; 0x01

#else
#error"The Selection of I2C_PRESCALER is Wrong"
#endif

	return error_enuState;
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
}
     cd4:	0f 90       	pop	r0
     cd6:	cf 91       	pop	r28
     cd8:	df 91       	pop	r29
     cda:	08 95       	ret

00000cdc <I2C_enuInitSlave>:



ERROR_STATES I2C_enuInitSlave	(void)
{
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	0f 92       	push	r0
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATES error_enuState = ES_NOT_OK;
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	89 83       	std	Y+1, r24	; 0x01

	SET_ECU_ADDRESS;
     cea:	e2 e2       	ldi	r30, 0x22	; 34
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	82 e0       	ldi	r24, 0x02	; 2
     cf0:	80 83       	st	Z, r24
	SET_I2C_ENABLE;
     cf2:	a6 e5       	ldi	r26, 0x56	; 86
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e6 e5       	ldi	r30, 0x56	; 86
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	84 60       	ori	r24, 0x04	; 4
     cfe:	8c 93       	st	X, r24
	error_enuState = ES_OK;
     d00:	19 82       	std	Y+1, r1	; 0x01

	return error_enuState;
     d02:	89 81       	ldd	r24, Y+1	; 0x01
}
     d04:	0f 90       	pop	r0
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <I2C_enuStartCondition>:



ERROR_STATES I2C_enuStartCondition	(void)
{
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	0f 92       	push	r0
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATES error_enuState = ES_NOT_OK;
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	89 83       	std	Y+1, r24	; 0x01

	SET_START_CONDITION;
     d1a:	a6 e5       	ldi	r26, 0x56	; 86
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	e6 e5       	ldi	r30, 0x56	; 86
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	80 62       	ori	r24, 0x20	; 32
     d26:	8c 93       	st	X, r24
	CLEAR_FLAG;
     d28:	a6 e5       	ldi	r26, 0x56	; 86
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e6 e5       	ldi	r30, 0x56	; 86
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	80 68       	ori	r24, 0x80	; 128
     d34:	8c 93       	st	X, r24
	while (WAIT_FLAG);
     d36:	e6 e5       	ldi	r30, 0x56	; 86
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	88 23       	and	r24, r24
     d3e:	dc f7       	brge	.-10     	; 0xd36 <I2C_enuStartCondition+0x2a>
	if (START_CONDITION_TRANSMIT)
     d40:	e1 e2       	ldi	r30, 0x21	; 33
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	88 2f       	mov	r24, r24
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	88 7f       	andi	r24, 0xF8	; 248
     d4c:	90 70       	andi	r25, 0x00	; 0
     d4e:	88 30       	cpi	r24, 0x08	; 8
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <I2C_enuStartCondition+0x4a>
		error_enuState = ES_OK;
     d54:	19 82       	std	Y+1, r1	; 0x01

	return error_enuState;
     d56:	89 81       	ldd	r24, Y+1	; 0x01
}
     d58:	0f 90       	pop	r0
     d5a:	cf 91       	pop	r28
     d5c:	df 91       	pop	r29
     d5e:	08 95       	ret

00000d60 <I2C_enuRepeatStartCondition>:




ERROR_STATES I2C_enuRepeatStartCondition	(void)
{
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	0f 92       	push	r0
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATES error_enuState = ES_NOT_OK;
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	89 83       	std	Y+1, r24	; 0x01

	SET_START_CONDITION;
     d6e:	a6 e5       	ldi	r26, 0x56	; 86
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e6 e5       	ldi	r30, 0x56	; 86
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	80 62       	ori	r24, 0x20	; 32
     d7a:	8c 93       	st	X, r24
	CLEAR_FLAG;
     d7c:	a6 e5       	ldi	r26, 0x56	; 86
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e6 e5       	ldi	r30, 0x56	; 86
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	80 68       	ori	r24, 0x80	; 128
     d88:	8c 93       	st	X, r24
	while (WAIT_FLAG);
     d8a:	e6 e5       	ldi	r30, 0x56	; 86
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	88 23       	and	r24, r24
     d92:	dc f7       	brge	.-10     	; 0xd8a <I2C_enuRepeatStartCondition+0x2a>
	if (REPEAT_START_CONDITION_TRANSMIT)
     d94:	e1 e2       	ldi	r30, 0x21	; 33
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	88 2f       	mov	r24, r24
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	88 7f       	andi	r24, 0xF8	; 248
     da0:	90 70       	andi	r25, 0x00	; 0
     da2:	80 31       	cpi	r24, 0x10	; 16
     da4:	91 05       	cpc	r25, r1
     da6:	09 f4       	brne	.+2      	; 0xdaa <I2C_enuRepeatStartCondition+0x4a>
		error_enuState = ES_OK;
     da8:	19 82       	std	Y+1, r1	; 0x01

	return error_enuState;
     daa:	89 81       	ldd	r24, Y+1	; 0x01
}
     dac:	0f 90       	pop	r0
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	08 95       	ret

00000db4 <I2C_enuStopCondition>:



ERROR_STATES I2C_enuStopCondition	(void)
{
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	0f 92       	push	r0
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATES error_enuState = ES_NOT_OK;
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	89 83       	std	Y+1, r24	; 0x01

	SET_STOP_CONDITION;
     dc2:	a6 e5       	ldi	r26, 0x56	; 86
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e6 e5       	ldi	r30, 0x56	; 86
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	80 61       	ori	r24, 0x10	; 16
     dce:	8c 93       	st	X, r24
	CLEAR_FLAG;
     dd0:	a6 e5       	ldi	r26, 0x56	; 86
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e6 e5       	ldi	r30, 0x56	; 86
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	80 68       	ori	r24, 0x80	; 128
     ddc:	8c 93       	st	X, r24
	error_enuState = ES_OK;
     dde:	19 82       	std	Y+1, r1	; 0x01

	return error_enuState;
     de0:	89 81       	ldd	r24, Y+1	; 0x01
}
     de2:	0f 90       	pop	r0
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	08 95       	ret

00000dea <I2C_enuSendSlaveAddress>:



ERROR_STATES I2C_enuSendSlaveAddress	(u8 Copy_u8SlaveAddress , u8 Copy_u8Action)
{
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	00 d0       	rcall	.+0      	; 0xdf0 <I2C_enuSendSlaveAddress+0x6>
     df0:	0f 92       	push	r0
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
     df6:	8a 83       	std	Y+2, r24	; 0x02
     df8:	6b 83       	std	Y+3, r22	; 0x03
	ERROR_STATES error_enuState = ES_NOT_OK;
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	89 83       	std	Y+1, r24	; 0x01


	if (Copy_u8SlaveAddress <= I2C_MAX_SLAVES) SET_SLAVE_ADDRESS(Copy_u8SlaveAddress);
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	88 23       	and	r24, r24
     e02:	2c f0       	brlt	.+10     	; 0xe0e <I2C_enuSendSlaveAddress+0x24>
     e04:	e3 e2       	ldi	r30, 0x23	; 35
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	8a 81       	ldd	r24, Y+2	; 0x02
     e0a:	88 0f       	add	r24, r24
     e0c:	80 83       	st	Z, r24
	if (Copy_u8Action <= I2C_ONE)              SET_SLAVE_ACTION (Copy_u8Action);
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	82 30       	cpi	r24, 0x02	; 2
     e12:	40 f4       	brcc	.+16     	; 0xe24 <I2C_enuSendSlaveAddress+0x3a>
     e14:	a3 e2       	ldi	r26, 0x23	; 35
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e3 e2       	ldi	r30, 0x23	; 35
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	90 81       	ld	r25, Z
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	89 2b       	or	r24, r25
     e22:	8c 93       	st	X, r24
	CLEAR_START_CONDITION;
     e24:	a6 e5       	ldi	r26, 0x56	; 86
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e6 e5       	ldi	r30, 0x56	; 86
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	8f 7d       	andi	r24, 0xDF	; 223
     e30:	8c 93       	st	X, r24
	CLEAR_FLAG;
     e32:	a6 e5       	ldi	r26, 0x56	; 86
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e6 e5       	ldi	r30, 0x56	; 86
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	80 68       	ori	r24, 0x80	; 128
     e3e:	8c 93       	st	X, r24
	while (WAIT_FLAG);
     e40:	e6 e5       	ldi	r30, 0x56	; 86
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	88 23       	and	r24, r24
     e48:	dc f7       	brge	.-10     	; 0xe40 <I2C_enuSendSlaveAddress+0x56>
	if (SLA_WRITE_TRANSMIT)
     e4a:	e1 e2       	ldi	r30, 0x21	; 33
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	88 2f       	mov	r24, r24
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	88 7f       	andi	r24, 0xF8	; 248
     e56:	90 70       	andi	r25, 0x00	; 0
     e58:	88 31       	cpi	r24, 0x18	; 24
     e5a:	91 05       	cpc	r25, r1
     e5c:	11 f4       	brne	.+4      	; 0xe62 <I2C_enuSendSlaveAddress+0x78>
		error_enuState = ES_OK;
     e5e:	19 82       	std	Y+1, r1	; 0x01
     e60:	0b c0       	rjmp	.+22     	; 0xe78 <I2C_enuSendSlaveAddress+0x8e>

	else if (SLA_READ_TRANSMIT)
     e62:	e1 e2       	ldi	r30, 0x21	; 33
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	88 2f       	mov	r24, r24
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	88 7f       	andi	r24, 0xF8	; 248
     e6e:	90 70       	andi	r25, 0x00	; 0
     e70:	80 34       	cpi	r24, 0x40	; 64
     e72:	91 05       	cpc	r25, r1
     e74:	09 f4       	brne	.+2      	; 0xe78 <I2C_enuSendSlaveAddress+0x8e>
		error_enuState = ES_OK;
     e76:	19 82       	std	Y+1, r1	; 0x01

	return error_enuState;
     e78:	89 81       	ldd	r24, Y+1	; 0x01
}
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	cf 91       	pop	r28
     e82:	df 91       	pop	r29
     e84:	08 95       	ret

00000e86 <I2C_enuSlaveCheckHisAdress>:



ERROR_STATES I2C_enuSlaveCheckHisAdress (void)
{
     e86:	df 93       	push	r29
     e88:	cf 93       	push	r28
     e8a:	0f 92       	push	r0
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATES error_enuState = ES_NOT_OK;
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	89 83       	std	Y+1, r24	; 0x01

	SET_ACKNOWLEDGE;
     e94:	a6 e5       	ldi	r26, 0x56	; 86
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e6 e5       	ldi	r30, 0x56	; 86
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	80 64       	ori	r24, 0x40	; 64
     ea0:	8c 93       	st	X, r24
	CLEAR_FLAG;
     ea2:	a6 e5       	ldi	r26, 0x56	; 86
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e6 e5       	ldi	r30, 0x56	; 86
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	80 68       	ori	r24, 0x80	; 128
     eae:	8c 93       	st	X, r24
	while (WAIT_FLAG);
     eb0:	e6 e5       	ldi	r30, 0x56	; 86
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	88 23       	and	r24, r24
     eb8:	dc f7       	brge	.-10     	; 0xeb0 <I2C_enuSlaveCheckHisAdress+0x2a>
	if (SLAVE_WRITE_RECIEVE_ADDRESS)
     eba:	e1 e2       	ldi	r30, 0x21	; 33
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	88 2f       	mov	r24, r24
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	88 7f       	andi	r24, 0xF8	; 248
     ec6:	90 70       	andi	r25, 0x00	; 0
     ec8:	80 36       	cpi	r24, 0x60	; 96
     eca:	91 05       	cpc	r25, r1
     ecc:	11 f4       	brne	.+4      	; 0xed2 <I2C_enuSlaveCheckHisAdress+0x4c>
		error_enuState = ES_OK;
     ece:	19 82       	std	Y+1, r1	; 0x01
     ed0:	0b c0       	rjmp	.+22     	; 0xee8 <I2C_enuSlaveCheckHisAdress+0x62>
	else if(SLAVE_READ_RECIEVE_ADDRESS)
     ed2:	e1 e2       	ldi	r30, 0x21	; 33
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	88 2f       	mov	r24, r24
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	88 7f       	andi	r24, 0xF8	; 248
     ede:	90 70       	andi	r25, 0x00	; 0
     ee0:	88 3a       	cpi	r24, 0xA8	; 168
     ee2:	91 05       	cpc	r25, r1
     ee4:	09 f4       	brne	.+2      	; 0xee8 <I2C_enuSlaveCheckHisAdress+0x62>
		error_enuState = ES_OK;
     ee6:	19 82       	std	Y+1, r1	; 0x01

	return error_enuState;
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
}
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <I2C_enuMasterSendData>:




ERROR_STATES I2C_enuMasterSendData	(u8 Copy_u8Data)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <I2C_enuMasterSendData+0x6>
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
     efc:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATES error_enuState = ES_NOT_OK;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	89 83       	std	Y+1, r24	; 0x01

	SEND_DATA_REGISTER(Copy_u8Data);
     f02:	e3 e2       	ldi	r30, 0x23	; 35
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	80 83       	st	Z, r24
	CLEAR_FLAG;
     f0a:	a6 e5       	ldi	r26, 0x56	; 86
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e6 e5       	ldi	r30, 0x56	; 86
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	80 68       	ori	r24, 0x80	; 128
     f16:	8c 93       	st	X, r24
	while (WAIT_FLAG);
     f18:	e6 e5       	ldi	r30, 0x56	; 86
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	88 23       	and	r24, r24
     f20:	dc f7       	brge	.-10     	; 0xf18 <I2C_enuMasterSendData+0x26>
	if (MASTER_DATA_TRANSMIT)
     f22:	e1 e2       	ldi	r30, 0x21	; 33
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	88 2f       	mov	r24, r24
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	88 7f       	andi	r24, 0xF8	; 248
     f2e:	90 70       	andi	r25, 0x00	; 0
     f30:	88 32       	cpi	r24, 0x28	; 40
     f32:	91 05       	cpc	r25, r1
     f34:	09 f4       	brne	.+2      	; 0xf38 <I2C_enuMasterSendData+0x46>
		error_enuState = ES_OK;
     f36:	19 82       	std	Y+1, r1	; 0x01

	return error_enuState;
     f38:	89 81       	ldd	r24, Y+1	; 0x01
}
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <I2C_enuSlaveRecieveData>:


ERROR_STATES I2C_enuSlaveRecieveData	(u8 * Copy_Pu8Data)
{
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	00 d0       	rcall	.+0      	; 0xf4a <I2C_enuSlaveRecieveData+0x6>
     f4a:	0f 92       	push	r0
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	9b 83       	std	Y+3, r25	; 0x03
     f52:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATES error_enuState = ES_NOT_OK;
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	89 83       	std	Y+1, r24	; 0x01

	CLEAR_FLAG;
     f58:	a6 e5       	ldi	r26, 0x56	; 86
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e6 e5       	ldi	r30, 0x56	; 86
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	80 68       	ori	r24, 0x80	; 128
     f64:	8c 93       	st	X, r24
	while (WAIT_FLAG);
     f66:	e6 e5       	ldi	r30, 0x56	; 86
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	88 23       	and	r24, r24
     f6e:	dc f7       	brge	.-10     	; 0xf66 <I2C_enuSlaveRecieveData+0x22>
	if (SLAVE_DATA_RECIEVED)
     f70:	e1 e2       	ldi	r30, 0x21	; 33
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	88 2f       	mov	r24, r24
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	88 7f       	andi	r24, 0xF8	; 248
     f7c:	90 70       	andi	r25, 0x00	; 0
     f7e:	80 38       	cpi	r24, 0x80	; 128
     f80:	91 05       	cpc	r25, r1
     f82:	39 f4       	brne	.+14     	; 0xf92 <I2C_enuSlaveRecieveData+0x4e>
	{
		RECIEVE_DATA_REGISTER(* Copy_Pu8Data);
     f84:	e3 e2       	ldi	r30, 0x23	; 35
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	ea 81       	ldd	r30, Y+2	; 0x02
     f8c:	fb 81       	ldd	r31, Y+3	; 0x03
     f8e:	80 83       	st	Z, r24
		error_enuState = ES_OK;
     f90:	19 82       	std	Y+1, r1	; 0x01
	}

	return error_enuState;
     f92:	89 81       	ldd	r24, Y+1	; 0x01
}
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	cf 91       	pop	r28
     f9c:	df 91       	pop	r29
     f9e:	08 95       	ret

00000fa0 <DIO_PINS_enuInit>:
/** Arguments       : void.                                                 **/
/** Functionality   : Setting the initial direction of DIO pins.            **/
/*****************************************************************************/
/*****************************************************************************/
ERROR_STATES DIO_PINS_enuInit			(void)
{
     fa0:	df 93       	push	r29
     fa2:	cf 93       	push	r28
     fa4:	0f 92       	push	r0
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATES error_enuState =ES_NOT_OK;
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	89 83       	std	Y+1, r24	; 0x01

	DDRA= DIO_U8_PORTA_DIRECTION;
     fae:	ea e3       	ldi	r30, 0x3A	; 58
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	85 e5       	ldi	r24, 0x55	; 85
     fb4:	80 83       	st	Z, r24

	DDRB= DIO_U8_PORTB_DIRECTION;
     fb6:	e7 e3       	ldi	r30, 0x37	; 55
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	85 e0       	ldi	r24, 0x05	; 5
     fbc:	80 83       	st	Z, r24

	DDRC= DIO_U8_PORTC_DIRECTION;
     fbe:	e4 e3       	ldi	r30, 0x34	; 52
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	8f ef       	ldi	r24, 0xFF	; 255
     fc4:	80 83       	st	Z, r24

	DDRD= DIO_U8_PORTD_DIRECTION;
     fc6:	e1 e3       	ldi	r30, 0x31	; 49
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 e8       	ldi	r24, 0x80	; 128
     fcc:	80 83       	st	Z, r24

	error_enuState = ES_OK;
     fce:	19 82       	std	Y+1, r1	; 0x01
	return error_enuState;
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
}
     fd2:	0f 90       	pop	r0
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <DIO_PINS_enuSetPinDirection>:
/** Arguments       : Pin number and Direction(Input or Output).            **/
/** Functionality   : Setting the direction of specific pin at run time.    **/
/*****************************************************************************/
/*****************************************************************************/
ERROR_STATES DIO_PINS_enuSetPinDirection(u8 Copy_u8PinID , u8 Copy_u8PinDirection)
{
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	00 d0       	rcall	.+0      	; 0xfe0 <DIO_PINS_enuSetPinDirection+0x6>
     fe0:	0f 92       	push	r0
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	8a 83       	std	Y+2, r24	; 0x02
     fe8:	6b 83       	std	Y+3, r22	; 0x03
	ERROR_STATES error_enuState =ES_OK;
     fea:	19 82       	std	Y+1, r1	; 0x01


	if( Copy_u8PinID < DIO_PIN8 )
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	88 30       	cpi	r24, 0x08	; 8
     ff0:	90 f5       	brcc	.+100    	; 0x1056 <DIO_PINS_enuSetPinDirection+0x7c>
	{
		if 		(Copy_u8PinDirection)		DDRA|= (DIO_ONE<<Copy_u8PinID);
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 23       	and	r24, r24
     ff6:	a1 f0       	breq	.+40     	; 0x1020 <DIO_PINS_enuSetPinDirection+0x46>
     ff8:	aa e3       	ldi	r26, 0x3A	; 58
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	ea e3       	ldi	r30, 0x3A	; 58
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	48 2f       	mov	r20, r24
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 2e       	mov	r0, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <DIO_PINS_enuSetPinDirection+0x3c>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	0a 94       	dec	r0
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <DIO_PINS_enuSetPinDirection+0x38>
    101a:	84 2b       	or	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	ce c0       	rjmp	.+412    	; 0x11bc <DIO_PINS_enuSetPinDirection+0x1e2>
		else if (! Copy_u8PinDirection)		DDRA&=~(DIO_ONE<<Copy_u8PinID);
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	88 23       	and	r24, r24
    1024:	a9 f4       	brne	.+42     	; 0x1050 <DIO_PINS_enuSetPinDirection+0x76>
    1026:	aa e3       	ldi	r26, 0x3A	; 58
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	ea e3       	ldi	r30, 0x3A	; 58
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DIO_PINS_enuSetPinDirection+0x6a>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <DIO_PINS_enuSetPinDirection+0x66>
    1048:	80 95       	com	r24
    104a:	84 23       	and	r24, r20
    104c:	8c 93       	st	X, r24
    104e:	b6 c0       	rjmp	.+364    	; 0x11bc <DIO_PINS_enuSetPinDirection+0x1e2>
		else	error_enuState 		=		ES_OUT_OF_RANGE;
    1050:	82 e0       	ldi	r24, 0x02	; 2
    1052:	89 83       	std	Y+1, r24	; 0x01
    1054:	b3 c0       	rjmp	.+358    	; 0x11bc <DIO_PINS_enuSetPinDirection+0x1e2>
	}

	else if (Copy_u8PinID >= DIO_PIN8 && Copy_u8PinID < DIO_PIN16 )
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	88 30       	cpi	r24, 0x08	; 8
    105a:	c0 f1       	brcs	.+112    	; 0x10cc <DIO_PINS_enuSetPinDirection+0xf2>
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	80 31       	cpi	r24, 0x10	; 16
    1060:	a8 f5       	brcc	.+106    	; 0x10cc <DIO_PINS_enuSetPinDirection+0xf2>
	{
		Copy_u8PinID -= DIO_PIN8;
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	88 50       	subi	r24, 0x08	; 8
    1066:	8a 83       	std	Y+2, r24	; 0x02
		if 		(Copy_u8PinDirection)		DDRB|= (DIO_ONE<<Copy_u8PinID);
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	88 23       	and	r24, r24
    106c:	a1 f0       	breq	.+40     	; 0x1096 <DIO_PINS_enuSetPinDirection+0xbc>
    106e:	a7 e3       	ldi	r26, 0x37	; 55
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e7 e3       	ldi	r30, 0x37	; 55
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	48 2f       	mov	r20, r24
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 2e       	mov	r0, r18
    1086:	02 c0       	rjmp	.+4      	; 0x108c <DIO_PINS_enuSetPinDirection+0xb2>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	0a 94       	dec	r0
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <DIO_PINS_enuSetPinDirection+0xae>
    1090:	84 2b       	or	r24, r20
    1092:	8c 93       	st	X, r24
    1094:	93 c0       	rjmp	.+294    	; 0x11bc <DIO_PINS_enuSetPinDirection+0x1e2>
		else if (! Copy_u8PinDirection)		DDRB&=~(DIO_ONE<<Copy_u8PinID);
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	88 23       	and	r24, r24
    109a:	a9 f4       	brne	.+42     	; 0x10c6 <DIO_PINS_enuSetPinDirection+0xec>
    109c:	a7 e3       	ldi	r26, 0x37	; 55
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	e7 e3       	ldi	r30, 0x37	; 55
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	48 2f       	mov	r20, r24
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 2e       	mov	r0, r18
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <DIO_PINS_enuSetPinDirection+0xe0>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	0a 94       	dec	r0
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <DIO_PINS_enuSetPinDirection+0xdc>
    10be:	80 95       	com	r24
    10c0:	84 23       	and	r24, r20
    10c2:	8c 93       	st	X, r24
    10c4:	7b c0       	rjmp	.+246    	; 0x11bc <DIO_PINS_enuSetPinDirection+0x1e2>
		else	error_enuState 		=		ES_OUT_OF_RANGE;
    10c6:	82 e0       	ldi	r24, 0x02	; 2
    10c8:	89 83       	std	Y+1, r24	; 0x01
    10ca:	78 c0       	rjmp	.+240    	; 0x11bc <DIO_PINS_enuSetPinDirection+0x1e2>
	}

	else if (Copy_u8PinID >= DIO_PIN16 && Copy_u8PinID < DIO_PIN24 )
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	80 31       	cpi	r24, 0x10	; 16
    10d0:	c0 f1       	brcs	.+112    	; 0x1142 <DIO_PINS_enuSetPinDirection+0x168>
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	88 31       	cpi	r24, 0x18	; 24
    10d6:	a8 f5       	brcc	.+106    	; 0x1142 <DIO_PINS_enuSetPinDirection+0x168>
	{
		Copy_u8PinID -= DIO_PIN16;
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	80 51       	subi	r24, 0x10	; 16
    10dc:	8a 83       	std	Y+2, r24	; 0x02
		if 		(Copy_u8PinDirection)		DDRC|= (DIO_ONE<<Copy_u8PinID);
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	88 23       	and	r24, r24
    10e2:	a1 f0       	breq	.+40     	; 0x110c <DIO_PINS_enuSetPinDirection+0x132>
    10e4:	a4 e3       	ldi	r26, 0x34	; 52
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e4 e3       	ldi	r30, 0x34	; 52
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_PINS_enuSetPinDirection+0x128>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_PINS_enuSetPinDirection+0x124>
    1106:	84 2b       	or	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	58 c0       	rjmp	.+176    	; 0x11bc <DIO_PINS_enuSetPinDirection+0x1e2>
		else if (! Copy_u8PinDirection)		DDRC&=~(DIO_ONE<<Copy_u8PinID);
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	88 23       	and	r24, r24
    1110:	a9 f4       	brne	.+42     	; 0x113c <DIO_PINS_enuSetPinDirection+0x162>
    1112:	a4 e3       	ldi	r26, 0x34	; 52
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e4 e3       	ldi	r30, 0x34	; 52
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	48 2f       	mov	r20, r24
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 2e       	mov	r0, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_PINS_enuSetPinDirection+0x156>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	0a 94       	dec	r0
    1132:	e2 f7       	brpl	.-8      	; 0x112c <DIO_PINS_enuSetPinDirection+0x152>
    1134:	80 95       	com	r24
    1136:	84 23       	and	r24, r20
    1138:	8c 93       	st	X, r24
    113a:	40 c0       	rjmp	.+128    	; 0x11bc <DIO_PINS_enuSetPinDirection+0x1e2>
		else	error_enuState 		=		ES_OUT_OF_RANGE;
    113c:	82 e0       	ldi	r24, 0x02	; 2
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	3d c0       	rjmp	.+122    	; 0x11bc <DIO_PINS_enuSetPinDirection+0x1e2>
	}

	else if (Copy_u8PinID >= DIO_PIN24 && Copy_u8PinID < DIO_PIN31 )
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	88 31       	cpi	r24, 0x18	; 24
    1146:	c0 f1       	brcs	.+112    	; 0x11b8 <DIO_PINS_enuSetPinDirection+0x1de>
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	8f 31       	cpi	r24, 0x1F	; 31
    114c:	a8 f5       	brcc	.+106    	; 0x11b8 <DIO_PINS_enuSetPinDirection+0x1de>
	{
		Copy_u8PinID -= DIO_PIN24;
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	88 51       	subi	r24, 0x18	; 24
    1152:	8a 83       	std	Y+2, r24	; 0x02
		if 		(Copy_u8PinDirection)		DDRD|= (DIO_ONE<<Copy_u8PinID);
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	88 23       	and	r24, r24
    1158:	a1 f0       	breq	.+40     	; 0x1182 <DIO_PINS_enuSetPinDirection+0x1a8>
    115a:	a1 e3       	ldi	r26, 0x31	; 49
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e1 e3       	ldi	r30, 0x31	; 49
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	48 2f       	mov	r20, r24
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	02 2e       	mov	r0, r18
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <DIO_PINS_enuSetPinDirection+0x19e>
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	0a 94       	dec	r0
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <DIO_PINS_enuSetPinDirection+0x19a>
    117c:	84 2b       	or	r24, r20
    117e:	8c 93       	st	X, r24
    1180:	1d c0       	rjmp	.+58     	; 0x11bc <DIO_PINS_enuSetPinDirection+0x1e2>
		else if (! Copy_u8PinDirection)		DDRD&=~(DIO_ONE<<Copy_u8PinID);
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	88 23       	and	r24, r24
    1186:	a9 f4       	brne	.+42     	; 0x11b2 <DIO_PINS_enuSetPinDirection+0x1d8>
    1188:	a1 e3       	ldi	r26, 0x31	; 49
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e1 e3       	ldi	r30, 0x31	; 49
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 2e       	mov	r0, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <DIO_PINS_enuSetPinDirection+0x1cc>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	0a 94       	dec	r0
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <DIO_PINS_enuSetPinDirection+0x1c8>
    11aa:	80 95       	com	r24
    11ac:	84 23       	and	r24, r20
    11ae:	8c 93       	st	X, r24
    11b0:	05 c0       	rjmp	.+10     	; 0x11bc <DIO_PINS_enuSetPinDirection+0x1e2>
		else	error_enuState 		=		ES_OUT_OF_RANGE;
    11b2:	82 e0       	ldi	r24, 0x02	; 2
    11b4:	89 83       	std	Y+1, r24	; 0x01
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <DIO_PINS_enuSetPinDirection+0x1e2>
	}

	else
	{
		error_enuState	=	ES_NOT_SELECTED;
    11b8:	83 e0       	ldi	r24, 0x03	; 3
    11ba:	89 83       	std	Y+1, r24	; 0x01
	}

	return error_enuState;
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <DIO_PINS_enuSetPinValue>:
/** Arguments       : Pin number and Value(High or Low).                    **/
/** Functionality   : Setting the value of specific pin at run time.        **/
/*****************************************************************************/
/*****************************************************************************/
ERROR_STATES DIO_PINS_enuSetPinValue	(u8 Copy_u8PinID , u8 Copy_u8PinValue)
{
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <DIO_PINS_enuSetPinValue+0x6>
    11d0:	0f 92       	push	r0
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	8a 83       	std	Y+2, r24	; 0x02
    11d8:	6b 83       	std	Y+3, r22	; 0x03
	ERROR_STATES error_enuState =ES_OK;
    11da:	19 82       	std	Y+1, r1	; 0x01

	if ( Copy_u8PinID < DIO_PIN8)
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	88 30       	cpi	r24, 0x08	; 8
    11e0:	90 f5       	brcc	.+100    	; 0x1246 <DIO_PINS_enuSetPinValue+0x7c>
	{
		if 		(Copy_u8PinValue)		PORTA|= (DIO_ONE<<Copy_u8PinID);
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	88 23       	and	r24, r24
    11e6:	a1 f0       	breq	.+40     	; 0x1210 <DIO_PINS_enuSetPinValue+0x46>
    11e8:	ab e3       	ldi	r26, 0x3B	; 59
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	eb e3       	ldi	r30, 0x3B	; 59
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	48 2f       	mov	r20, r24
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <DIO_PINS_enuSetPinValue+0x3c>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <DIO_PINS_enuSetPinValue+0x38>
    120a:	84 2b       	or	r24, r20
    120c:	8c 93       	st	X, r24
    120e:	ce c0       	rjmp	.+412    	; 0x13ac <DIO_PINS_enuSetPinValue+0x1e2>
		else if (! Copy_u8PinValue)		PORTA&=~(DIO_ONE<<Copy_u8PinID);
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	88 23       	and	r24, r24
    1214:	a9 f4       	brne	.+42     	; 0x1240 <DIO_PINS_enuSetPinValue+0x76>
    1216:	ab e3       	ldi	r26, 0x3B	; 59
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	eb e3       	ldi	r30, 0x3B	; 59
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	48 2f       	mov	r20, r24
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 2e       	mov	r0, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <DIO_PINS_enuSetPinValue+0x6a>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	0a 94       	dec	r0
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <DIO_PINS_enuSetPinValue+0x66>
    1238:	80 95       	com	r24
    123a:	84 23       	and	r24, r20
    123c:	8c 93       	st	X, r24
    123e:	b6 c0       	rjmp	.+364    	; 0x13ac <DIO_PINS_enuSetPinValue+0x1e2>
		else	error_enuState 		=		ES_OUT_OF_RANGE;
    1240:	82 e0       	ldi	r24, 0x02	; 2
    1242:	89 83       	std	Y+1, r24	; 0x01
    1244:	b3 c0       	rjmp	.+358    	; 0x13ac <DIO_PINS_enuSetPinValue+0x1e2>
	}

	else if (Copy_u8PinID >= DIO_PIN8 && Copy_u8PinID < DIO_PIN16 )
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	88 30       	cpi	r24, 0x08	; 8
    124a:	c0 f1       	brcs	.+112    	; 0x12bc <DIO_PINS_enuSetPinValue+0xf2>
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	80 31       	cpi	r24, 0x10	; 16
    1250:	a8 f5       	brcc	.+106    	; 0x12bc <DIO_PINS_enuSetPinValue+0xf2>
	{
		Copy_u8PinID -= DIO_PIN8;
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	88 50       	subi	r24, 0x08	; 8
    1256:	8a 83       	std	Y+2, r24	; 0x02
		if 		(Copy_u8PinValue)		PORTB|= (DIO_ONE<<Copy_u8PinID);
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	88 23       	and	r24, r24
    125c:	a1 f0       	breq	.+40     	; 0x1286 <DIO_PINS_enuSetPinValue+0xbc>
    125e:	a8 e3       	ldi	r26, 0x38	; 56
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e8 e3       	ldi	r30, 0x38	; 56
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 2e       	mov	r0, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <DIO_PINS_enuSetPinValue+0xb2>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <DIO_PINS_enuSetPinValue+0xae>
    1280:	84 2b       	or	r24, r20
    1282:	8c 93       	st	X, r24
    1284:	93 c0       	rjmp	.+294    	; 0x13ac <DIO_PINS_enuSetPinValue+0x1e2>
		else if (! Copy_u8PinValue)		PORTB&=~(DIO_ONE<<Copy_u8PinID);
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	88 23       	and	r24, r24
    128a:	a9 f4       	brne	.+42     	; 0x12b6 <DIO_PINS_enuSetPinValue+0xec>
    128c:	a8 e3       	ldi	r26, 0x38	; 56
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	e8 e3       	ldi	r30, 0x38	; 56
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	48 2f       	mov	r20, r24
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	02 2e       	mov	r0, r18
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <DIO_PINS_enuSetPinValue+0xe0>
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	0a 94       	dec	r0
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <DIO_PINS_enuSetPinValue+0xdc>
    12ae:	80 95       	com	r24
    12b0:	84 23       	and	r24, r20
    12b2:	8c 93       	st	X, r24
    12b4:	7b c0       	rjmp	.+246    	; 0x13ac <DIO_PINS_enuSetPinValue+0x1e2>
		else	error_enuState 		=		ES_OUT_OF_RANGE;
    12b6:	82 e0       	ldi	r24, 0x02	; 2
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	78 c0       	rjmp	.+240    	; 0x13ac <DIO_PINS_enuSetPinValue+0x1e2>
	}

	else if (Copy_u8PinID >= DIO_PIN16 && Copy_u8PinID < DIO_PIN24 )
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	80 31       	cpi	r24, 0x10	; 16
    12c0:	c0 f1       	brcs	.+112    	; 0x1332 <DIO_PINS_enuSetPinValue+0x168>
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	88 31       	cpi	r24, 0x18	; 24
    12c6:	a8 f5       	brcc	.+106    	; 0x1332 <DIO_PINS_enuSetPinValue+0x168>
	{
		Copy_u8PinID -= DIO_PIN16;
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	80 51       	subi	r24, 0x10	; 16
    12cc:	8a 83       	std	Y+2, r24	; 0x02
		if 		(Copy_u8PinValue)		PORTC|= (DIO_ONE<<Copy_u8PinID);
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	88 23       	and	r24, r24
    12d2:	a1 f0       	breq	.+40     	; 0x12fc <DIO_PINS_enuSetPinValue+0x132>
    12d4:	a5 e3       	ldi	r26, 0x35	; 53
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e5 e3       	ldi	r30, 0x35	; 53
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	48 2f       	mov	r20, r24
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	02 2e       	mov	r0, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <DIO_PINS_enuSetPinValue+0x128>
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	0a 94       	dec	r0
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <DIO_PINS_enuSetPinValue+0x124>
    12f6:	84 2b       	or	r24, r20
    12f8:	8c 93       	st	X, r24
    12fa:	58 c0       	rjmp	.+176    	; 0x13ac <DIO_PINS_enuSetPinValue+0x1e2>
		else if (! Copy_u8PinValue)		PORTC&=~(DIO_ONE<<Copy_u8PinID);
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	88 23       	and	r24, r24
    1300:	a9 f4       	brne	.+42     	; 0x132c <DIO_PINS_enuSetPinValue+0x162>
    1302:	a5 e3       	ldi	r26, 0x35	; 53
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e5 e3       	ldi	r30, 0x35	; 53
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	48 2f       	mov	r20, r24
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	02 2e       	mov	r0, r18
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <DIO_PINS_enuSetPinValue+0x156>
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	0a 94       	dec	r0
    1322:	e2 f7       	brpl	.-8      	; 0x131c <DIO_PINS_enuSetPinValue+0x152>
    1324:	80 95       	com	r24
    1326:	84 23       	and	r24, r20
    1328:	8c 93       	st	X, r24
    132a:	40 c0       	rjmp	.+128    	; 0x13ac <DIO_PINS_enuSetPinValue+0x1e2>
		else	error_enuState 		=		ES_OUT_OF_RANGE;
    132c:	82 e0       	ldi	r24, 0x02	; 2
    132e:	89 83       	std	Y+1, r24	; 0x01
    1330:	3d c0       	rjmp	.+122    	; 0x13ac <DIO_PINS_enuSetPinValue+0x1e2>
	}

	else if (Copy_u8PinID >= DIO_PIN24 && Copy_u8PinID < DIO_PIN31 )
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	88 31       	cpi	r24, 0x18	; 24
    1336:	c0 f1       	brcs	.+112    	; 0x13a8 <DIO_PINS_enuSetPinValue+0x1de>
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	8f 31       	cpi	r24, 0x1F	; 31
    133c:	a8 f5       	brcc	.+106    	; 0x13a8 <DIO_PINS_enuSetPinValue+0x1de>
	{
		Copy_u8PinID -= DIO_PIN24;
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	88 51       	subi	r24, 0x18	; 24
    1342:	8a 83       	std	Y+2, r24	; 0x02
		if 		(Copy_u8PinValue)		PORTD|= (DIO_ONE<<Copy_u8PinID);
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	88 23       	and	r24, r24
    1348:	a1 f0       	breq	.+40     	; 0x1372 <DIO_PINS_enuSetPinValue+0x1a8>
    134a:	a2 e3       	ldi	r26, 0x32	; 50
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e2 e3       	ldi	r30, 0x32	; 50
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <DIO_PINS_enuSetPinValue+0x19e>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <DIO_PINS_enuSetPinValue+0x19a>
    136c:	84 2b       	or	r24, r20
    136e:	8c 93       	st	X, r24
    1370:	1d c0       	rjmp	.+58     	; 0x13ac <DIO_PINS_enuSetPinValue+0x1e2>
		else if (! Copy_u8PinValue)		PORTD&=~(DIO_ONE<<Copy_u8PinID);
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	88 23       	and	r24, r24
    1376:	a9 f4       	brne	.+42     	; 0x13a2 <DIO_PINS_enuSetPinValue+0x1d8>
    1378:	a2 e3       	ldi	r26, 0x32	; 50
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e2 e3       	ldi	r30, 0x32	; 50
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	48 2f       	mov	r20, r24
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	02 2e       	mov	r0, r18
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <DIO_PINS_enuSetPinValue+0x1cc>
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	0a 94       	dec	r0
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <DIO_PINS_enuSetPinValue+0x1c8>
    139a:	80 95       	com	r24
    139c:	84 23       	and	r24, r20
    139e:	8c 93       	st	X, r24
    13a0:	05 c0       	rjmp	.+10     	; 0x13ac <DIO_PINS_enuSetPinValue+0x1e2>
		else	error_enuState 		=		ES_OUT_OF_RANGE;
    13a2:	82 e0       	ldi	r24, 0x02	; 2
    13a4:	89 83       	std	Y+1, r24	; 0x01
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <DIO_PINS_enuSetPinValue+0x1e2>
	}

	else
	{
		error_enuState	=	ES_NOT_SELECTED;
    13a8:	83 e0       	ldi	r24, 0x03	; 3
    13aa:	89 83       	std	Y+1, r24	; 0x01
	}

	return error_enuState;
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <DIO_PINS_enuTogglePin>:
/** Arguments       : Pin number.                                           **/
/** Functionality   : Toggling the value of specific pin at run time.       **/
/*****************************************************************************/
/*****************************************************************************/
ERROR_STATES DIO_PINS_enuTogglePin		( u8 Copy_u8PinID )
{
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <DIO_PINS_enuTogglePin+0x6>
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
    13c4:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATES error_enuState =ES_NOT_OK;
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	89 83       	std	Y+1, r24	; 0x01


	if ( Copy_u8PinID < DIO_PIN8 )
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	88 30       	cpi	r24, 0x08	; 8
    13ce:	a8 f4       	brcc	.+42     	; 0x13fa <DIO_PINS_enuTogglePin+0x40>
	{
		PORTA^= (DIO_ONE<<Copy_u8PinID);
    13d0:	ab e3       	ldi	r26, 0x3B	; 59
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	eb e3       	ldi	r30, 0x3B	; 59
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	48 2f       	mov	r20, r24
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	02 2e       	mov	r0, r18
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <DIO_PINS_enuTogglePin+0x34>
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	0a 94       	dec	r0
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <DIO_PINS_enuTogglePin+0x30>
    13f2:	84 27       	eor	r24, r20
    13f4:	8c 93       	st	X, r24
		error_enuState =ES_OK;
    13f6:	19 82       	std	Y+1, r1	; 0x01
    13f8:	5c c0       	rjmp	.+184    	; 0x14b2 <DIO_PINS_enuTogglePin+0xf8>
	}

	else if (Copy_u8PinID >= DIO_PIN8 && Copy_u8PinID < DIO_PIN16 )
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	88 30       	cpi	r24, 0x08	; 8
    13fe:	d8 f0       	brcs	.+54     	; 0x1436 <DIO_PINS_enuTogglePin+0x7c>
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	80 31       	cpi	r24, 0x10	; 16
    1404:	c0 f4       	brcc	.+48     	; 0x1436 <DIO_PINS_enuTogglePin+0x7c>
	{
		Copy_u8PinID -= DIO_PIN8;
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	88 50       	subi	r24, 0x08	; 8
    140a:	8a 83       	std	Y+2, r24	; 0x02
		PORTB^= (DIO_ONE<<Copy_u8PinID);
    140c:	a8 e3       	ldi	r26, 0x38	; 56
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e8 e3       	ldi	r30, 0x38	; 56
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <DIO_PINS_enuTogglePin+0x70>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <DIO_PINS_enuTogglePin+0x6c>
    142e:	84 27       	eor	r24, r20
    1430:	8c 93       	st	X, r24
		error_enuState =ES_OK;
    1432:	19 82       	std	Y+1, r1	; 0x01
    1434:	3e c0       	rjmp	.+124    	; 0x14b2 <DIO_PINS_enuTogglePin+0xf8>
	}

	else if (Copy_u8PinID >= DIO_PIN16 && Copy_u8PinID < DIO_PIN24 )
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	80 31       	cpi	r24, 0x10	; 16
    143a:	d8 f0       	brcs	.+54     	; 0x1472 <DIO_PINS_enuTogglePin+0xb8>
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	88 31       	cpi	r24, 0x18	; 24
    1440:	c0 f4       	brcc	.+48     	; 0x1472 <DIO_PINS_enuTogglePin+0xb8>
	{
		Copy_u8PinID -= DIO_PIN16;
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	80 51       	subi	r24, 0x10	; 16
    1446:	8a 83       	std	Y+2, r24	; 0x02
		PORTC^= (DIO_ONE<<Copy_u8PinID);
    1448:	a5 e3       	ldi	r26, 0x35	; 53
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e5 e3       	ldi	r30, 0x35	; 53
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	48 2f       	mov	r20, r24
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	02 2e       	mov	r0, r18
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <DIO_PINS_enuTogglePin+0xac>
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	0a 94       	dec	r0
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <DIO_PINS_enuTogglePin+0xa8>
    146a:	84 27       	eor	r24, r20
    146c:	8c 93       	st	X, r24
		error_enuState =ES_OK;
    146e:	19 82       	std	Y+1, r1	; 0x01
    1470:	20 c0       	rjmp	.+64     	; 0x14b2 <DIO_PINS_enuTogglePin+0xf8>
	}
	else if (Copy_u8PinID >= DIO_PIN24 && Copy_u8PinID < DIO_PIN31 )
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	88 31       	cpi	r24, 0x18	; 24
    1476:	d8 f0       	brcs	.+54     	; 0x14ae <DIO_PINS_enuTogglePin+0xf4>
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	8f 31       	cpi	r24, 0x1F	; 31
    147c:	c0 f4       	brcc	.+48     	; 0x14ae <DIO_PINS_enuTogglePin+0xf4>
	{
		Copy_u8PinID -= DIO_PIN24;
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	88 51       	subi	r24, 0x18	; 24
    1482:	8a 83       	std	Y+2, r24	; 0x02
		PORTD^= (DIO_ONE<<Copy_u8PinID);
    1484:	a2 e3       	ldi	r26, 0x32	; 50
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e2 e3       	ldi	r30, 0x32	; 50
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	48 2f       	mov	r20, r24
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 2e       	mov	r0, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <DIO_PINS_enuTogglePin+0xe8>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	0a 94       	dec	r0
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <DIO_PINS_enuTogglePin+0xe4>
    14a6:	84 27       	eor	r24, r20
    14a8:	8c 93       	st	X, r24
		error_enuState =ES_OK;
    14aa:	19 82       	std	Y+1, r1	; 0x01
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <DIO_PINS_enuTogglePin+0xf8>
	}

	else
	{
		error_enuState	=	ES_NOT_SELECTED;
    14ae:	83 e0       	ldi	r24, 0x03	; 3
    14b0:	89 83       	std	Y+1, r24	; 0x01
	}

	return error_enuState;
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	08 95       	ret

000014be <DIO_PINS_enuGetPinValue>:
/** Arguments       : Pin number.                                           **/
/** Functionality   : Getting the value of specific pin at run time.        **/
/*****************************************************************************/
/*****************************************************************************/
ERROR_STATES DIO_PINS_enuGetPinValue	(u8 Copy_u8PinID , u8 * Copy_Pu8PinValue)
{
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <DIO_PINS_enuGetPinValue+0x6>
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <DIO_PINS_enuGetPinValue+0x8>
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	8a 83       	std	Y+2, r24	; 0x02
    14cc:	7c 83       	std	Y+4, r23	; 0x04
    14ce:	6b 83       	std	Y+3, r22	; 0x03
	ERROR_STATES error_enuState =ES_NOT_OK;
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	89 83       	std	Y+1, r24	; 0x01

	if ( Copy_u8PinID < DIO_PIN8 )
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	88 30       	cpi	r24, 0x08	; 8
    14d8:	a8 f4       	brcc	.+42     	; 0x1504 <DIO_PINS_enuGetPinValue+0x46>
	{
		*Copy_Pu8PinValue= ((PINA>>Copy_u8PinID) & DIO_ONE );
    14da:	e9 e3       	ldi	r30, 0x39	; 57
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	88 2f       	mov	r24, r24
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	a9 01       	movw	r20, r18
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <DIO_PINS_enuGetPinValue+0x34>
    14ee:	55 95       	asr	r21
    14f0:	47 95       	ror	r20
    14f2:	8a 95       	dec	r24
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <DIO_PINS_enuGetPinValue+0x30>
    14f6:	ca 01       	movw	r24, r20
    14f8:	81 70       	andi	r24, 0x01	; 1
    14fa:	eb 81       	ldd	r30, Y+3	; 0x03
    14fc:	fc 81       	ldd	r31, Y+4	; 0x04
    14fe:	80 83       	st	Z, r24
		error_enuState =ES_OK;
    1500:	19 82       	std	Y+1, r1	; 0x01
    1502:	5c c0       	rjmp	.+184    	; 0x15bc <DIO_PINS_enuGetPinValue+0xfe>
	}

	else if (Copy_u8PinID >= DIO_PIN8 && Copy_u8PinID < DIO_PIN16 )
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	88 30       	cpi	r24, 0x08	; 8
    1508:	d8 f0       	brcs	.+54     	; 0x1540 <DIO_PINS_enuGetPinValue+0x82>
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	80 31       	cpi	r24, 0x10	; 16
    150e:	c0 f4       	brcc	.+48     	; 0x1540 <DIO_PINS_enuGetPinValue+0x82>
	{
		Copy_u8PinID -= DIO_PIN8;
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	88 50       	subi	r24, 0x08	; 8
    1514:	8a 83       	std	Y+2, r24	; 0x02
		*Copy_Pu8PinValue= ((PINB>>Copy_u8PinID) & DIO_ONE );
    1516:	e6 e3       	ldi	r30, 0x36	; 54
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	88 2f       	mov	r24, r24
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	a9 01       	movw	r20, r18
    1528:	02 c0       	rjmp	.+4      	; 0x152e <DIO_PINS_enuGetPinValue+0x70>
    152a:	55 95       	asr	r21
    152c:	47 95       	ror	r20
    152e:	8a 95       	dec	r24
    1530:	e2 f7       	brpl	.-8      	; 0x152a <DIO_PINS_enuGetPinValue+0x6c>
    1532:	ca 01       	movw	r24, r20
    1534:	81 70       	andi	r24, 0x01	; 1
    1536:	eb 81       	ldd	r30, Y+3	; 0x03
    1538:	fc 81       	ldd	r31, Y+4	; 0x04
    153a:	80 83       	st	Z, r24
		error_enuState =ES_OK;
    153c:	19 82       	std	Y+1, r1	; 0x01
    153e:	3e c0       	rjmp	.+124    	; 0x15bc <DIO_PINS_enuGetPinValue+0xfe>
	}

	else if (Copy_u8PinID >= DIO_PIN16 && Copy_u8PinID < DIO_PIN24 )
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	80 31       	cpi	r24, 0x10	; 16
    1544:	d8 f0       	brcs	.+54     	; 0x157c <DIO_PINS_enuGetPinValue+0xbe>
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	88 31       	cpi	r24, 0x18	; 24
    154a:	c0 f4       	brcc	.+48     	; 0x157c <DIO_PINS_enuGetPinValue+0xbe>
	{
		Copy_u8PinID -= DIO_PIN16;
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	80 51       	subi	r24, 0x10	; 16
    1550:	8a 83       	std	Y+2, r24	; 0x02
		*Copy_Pu8PinValue= ((PINC>>Copy_u8PinID) & DIO_ONE );
    1552:	e3 e3       	ldi	r30, 0x33	; 51
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	88 2f       	mov	r24, r24
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	a9 01       	movw	r20, r18
    1564:	02 c0       	rjmp	.+4      	; 0x156a <DIO_PINS_enuGetPinValue+0xac>
    1566:	55 95       	asr	r21
    1568:	47 95       	ror	r20
    156a:	8a 95       	dec	r24
    156c:	e2 f7       	brpl	.-8      	; 0x1566 <DIO_PINS_enuGetPinValue+0xa8>
    156e:	ca 01       	movw	r24, r20
    1570:	81 70       	andi	r24, 0x01	; 1
    1572:	eb 81       	ldd	r30, Y+3	; 0x03
    1574:	fc 81       	ldd	r31, Y+4	; 0x04
    1576:	80 83       	st	Z, r24
		error_enuState =ES_OK;
    1578:	19 82       	std	Y+1, r1	; 0x01
    157a:	20 c0       	rjmp	.+64     	; 0x15bc <DIO_PINS_enuGetPinValue+0xfe>
	}

	else if (Copy_u8PinID >= DIO_PIN24 && Copy_u8PinID < DIO_PIN31 )
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	88 31       	cpi	r24, 0x18	; 24
    1580:	d8 f0       	brcs	.+54     	; 0x15b8 <DIO_PINS_enuGetPinValue+0xfa>
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	8f 31       	cpi	r24, 0x1F	; 31
    1586:	c0 f4       	brcc	.+48     	; 0x15b8 <DIO_PINS_enuGetPinValue+0xfa>
	{
		Copy_u8PinID -= DIO_PIN24;
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	88 51       	subi	r24, 0x18	; 24
    158c:	8a 83       	std	Y+2, r24	; 0x02
		*Copy_Pu8PinValue= ((PIND>>Copy_u8PinID) & DIO_ONE );
    158e:	e0 e3       	ldi	r30, 0x30	; 48
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	88 2f       	mov	r24, r24
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	a9 01       	movw	r20, r18
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <DIO_PINS_enuGetPinValue+0xe8>
    15a2:	55 95       	asr	r21
    15a4:	47 95       	ror	r20
    15a6:	8a 95       	dec	r24
    15a8:	e2 f7       	brpl	.-8      	; 0x15a2 <DIO_PINS_enuGetPinValue+0xe4>
    15aa:	ca 01       	movw	r24, r20
    15ac:	81 70       	andi	r24, 0x01	; 1
    15ae:	eb 81       	ldd	r30, Y+3	; 0x03
    15b0:	fc 81       	ldd	r31, Y+4	; 0x04
    15b2:	80 83       	st	Z, r24
		error_enuState =ES_OK;
    15b4:	19 82       	std	Y+1, r1	; 0x01
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <DIO_PINS_enuGetPinValue+0xfe>
	}

	else
	{
		error_enuState	=	ES_NOT_SELECTED;
    15b8:	83 e0       	ldi	r24, 0x03	; 3
    15ba:	89 83       	std	Y+1, r24	; 0x01
	}

	return error_enuState;
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	08 95       	ret

000015cc <DIO_enuSetPinDirection>:
/** Arguments       : Port and Pin number and Direction(Input or output).   **/
/** Functionality   : Setting the direction of specific pin at run time.    **/
/*****************************************************************************/
/*****************************************************************************/
ERROR_STATES DIO_enuSetPinDirection 	(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8PinDirection)
{
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	00 d0       	rcall	.+0      	; 0x15d2 <DIO_enuSetPinDirection+0x6>
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <DIO_enuSetPinDirection+0x8>
    15d4:	00 d0       	rcall	.+0      	; 0x15d6 <DIO_enuSetPinDirection+0xa>
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
    15da:	8a 83       	std	Y+2, r24	; 0x02
    15dc:	6b 83       	std	Y+3, r22	; 0x03
    15de:	4c 83       	std	Y+4, r20	; 0x04
	ERROR_STATES error_enuState =ES_NOT_OK;
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PinID < DIO_PIN8 && Copy_u8PinDirection <= PIN_OUTPUT)
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	88 30       	cpi	r24, 0x08	; 8
    15e8:	08 f0       	brcs	.+2      	; 0x15ec <DIO_enuSetPinDirection+0x20>
    15ea:	b2 c0       	rjmp	.+356    	; 0x1750 <DIO_enuSetPinDirection+0x184>
    15ec:	8c 81       	ldd	r24, Y+4	; 0x04
    15ee:	82 30       	cpi	r24, 0x02	; 2
    15f0:	08 f0       	brcs	.+2      	; 0x15f4 <DIO_enuSetPinDirection+0x28>
    15f2:	ae c0       	rjmp	.+348    	; 0x1750 <DIO_enuSetPinDirection+0x184>
	{
		error_enuState = ES_OK;
    15f4:	19 82       	std	Y+1, r1	; 0x01
		switch (Copy_u8PortID)
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	3e 83       	std	Y+6, r19	; 0x06
    15fe:	2d 83       	std	Y+5, r18	; 0x05
    1600:	6d 81       	ldd	r22, Y+5	; 0x05
    1602:	7e 81       	ldd	r23, Y+6	; 0x06
    1604:	61 30       	cpi	r22, 0x01	; 1
    1606:	71 05       	cpc	r23, r1
    1608:	d1 f1       	breq	.+116    	; 0x167e <DIO_enuSetPinDirection+0xb2>
    160a:	8d 81       	ldd	r24, Y+5	; 0x05
    160c:	9e 81       	ldd	r25, Y+6	; 0x06
    160e:	82 30       	cpi	r24, 0x02	; 2
    1610:	91 05       	cpc	r25, r1
    1612:	34 f4       	brge	.+12     	; 0x1620 <DIO_enuSetPinDirection+0x54>
    1614:	2d 81       	ldd	r18, Y+5	; 0x05
    1616:	3e 81       	ldd	r19, Y+6	; 0x06
    1618:	21 15       	cp	r18, r1
    161a:	31 05       	cpc	r19, r1
    161c:	71 f0       	breq	.+28     	; 0x163a <DIO_enuSetPinDirection+0x6e>
    161e:	95 c0       	rjmp	.+298    	; 0x174a <DIO_enuSetPinDirection+0x17e>
    1620:	6d 81       	ldd	r22, Y+5	; 0x05
    1622:	7e 81       	ldd	r23, Y+6	; 0x06
    1624:	62 30       	cpi	r22, 0x02	; 2
    1626:	71 05       	cpc	r23, r1
    1628:	09 f4       	brne	.+2      	; 0x162c <DIO_enuSetPinDirection+0x60>
    162a:	4b c0       	rjmp	.+150    	; 0x16c2 <DIO_enuSetPinDirection+0xf6>
    162c:	8d 81       	ldd	r24, Y+5	; 0x05
    162e:	9e 81       	ldd	r25, Y+6	; 0x06
    1630:	83 30       	cpi	r24, 0x03	; 3
    1632:	91 05       	cpc	r25, r1
    1634:	09 f4       	brne	.+2      	; 0x1638 <DIO_enuSetPinDirection+0x6c>
    1636:	67 c0       	rjmp	.+206    	; 0x1706 <DIO_enuSetPinDirection+0x13a>
    1638:	88 c0       	rjmp	.+272    	; 0x174a <DIO_enuSetPinDirection+0x17e>
		{
		case DIO_PORT_A:	ASSIGN_BIT(DDRA , Copy_u8PinID , Copy_u8PinDirection);	break;
    163a:	aa e3       	ldi	r26, 0x3A	; 58
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	ea e3       	ldi	r30, 0x3A	; 58
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	48 2f       	mov	r20, r24
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <DIO_enuSetPinDirection+0x8a>
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	2a 95       	dec	r18
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <DIO_enuSetPinDirection+0x86>
    165a:	80 95       	com	r24
    165c:	48 23       	and	r20, r24
    165e:	8c 81       	ldd	r24, Y+4	; 0x04
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	88 2f       	mov	r24, r24
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	b9 01       	movw	r22, r18
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <DIO_enuSetPinDirection+0xa6>
    166e:	66 0f       	add	r22, r22
    1670:	77 1f       	adc	r23, r23
    1672:	8a 95       	dec	r24
    1674:	e2 f7       	brpl	.-8      	; 0x166e <DIO_enuSetPinDirection+0xa2>
    1676:	cb 01       	movw	r24, r22
    1678:	84 2b       	or	r24, r20
    167a:	8c 93       	st	X, r24
    167c:	6b c0       	rjmp	.+214    	; 0x1754 <DIO_enuSetPinDirection+0x188>
		case DIO_PORT_B:	ASSIGN_BIT(DDRB , Copy_u8PinID , Copy_u8PinDirection);	break;
    167e:	a7 e3       	ldi	r26, 0x37	; 55
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e7 e3       	ldi	r30, 0x37	; 55
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	48 2f       	mov	r20, r24
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	02 c0       	rjmp	.+4      	; 0x169a <DIO_enuSetPinDirection+0xce>
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	2a 95       	dec	r18
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <DIO_enuSetPinDirection+0xca>
    169e:	80 95       	com	r24
    16a0:	48 23       	and	r20, r24
    16a2:	8c 81       	ldd	r24, Y+4	; 0x04
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	88 2f       	mov	r24, r24
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	b9 01       	movw	r22, r18
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <DIO_enuSetPinDirection+0xea>
    16b2:	66 0f       	add	r22, r22
    16b4:	77 1f       	adc	r23, r23
    16b6:	8a 95       	dec	r24
    16b8:	e2 f7       	brpl	.-8      	; 0x16b2 <DIO_enuSetPinDirection+0xe6>
    16ba:	cb 01       	movw	r24, r22
    16bc:	84 2b       	or	r24, r20
    16be:	8c 93       	st	X, r24
    16c0:	49 c0       	rjmp	.+146    	; 0x1754 <DIO_enuSetPinDirection+0x188>
		case DIO_PORT_C:	ASSIGN_BIT(DDRC , Copy_u8PinID , Copy_u8PinDirection);	break;
    16c2:	a4 e3       	ldi	r26, 0x34	; 52
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e4 e3       	ldi	r30, 0x34	; 52
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	48 2f       	mov	r20, r24
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <DIO_enuSetPinDirection+0x112>
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	2a 95       	dec	r18
    16e0:	e2 f7       	brpl	.-8      	; 0x16da <DIO_enuSetPinDirection+0x10e>
    16e2:	80 95       	com	r24
    16e4:	48 23       	and	r20, r24
    16e6:	8c 81       	ldd	r24, Y+4	; 0x04
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	88 2f       	mov	r24, r24
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	b9 01       	movw	r22, r18
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <DIO_enuSetPinDirection+0x12e>
    16f6:	66 0f       	add	r22, r22
    16f8:	77 1f       	adc	r23, r23
    16fa:	8a 95       	dec	r24
    16fc:	e2 f7       	brpl	.-8      	; 0x16f6 <DIO_enuSetPinDirection+0x12a>
    16fe:	cb 01       	movw	r24, r22
    1700:	84 2b       	or	r24, r20
    1702:	8c 93       	st	X, r24
    1704:	27 c0       	rjmp	.+78     	; 0x1754 <DIO_enuSetPinDirection+0x188>
		case DIO_PORT_D:	ASSIGN_BIT(DDRD , Copy_u8PinID , Copy_u8PinDirection);	break;
    1706:	a1 e3       	ldi	r26, 0x31	; 49
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e1 e3       	ldi	r30, 0x31	; 49
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	48 2f       	mov	r20, r24
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <DIO_enuSetPinDirection+0x156>
    171e:	88 0f       	add	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	2a 95       	dec	r18
    1724:	e2 f7       	brpl	.-8      	; 0x171e <DIO_enuSetPinDirection+0x152>
    1726:	80 95       	com	r24
    1728:	48 23       	and	r20, r24
    172a:	8c 81       	ldd	r24, Y+4	; 0x04
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	88 2f       	mov	r24, r24
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	b9 01       	movw	r22, r18
    1738:	02 c0       	rjmp	.+4      	; 0x173e <DIO_enuSetPinDirection+0x172>
    173a:	66 0f       	add	r22, r22
    173c:	77 1f       	adc	r23, r23
    173e:	8a 95       	dec	r24
    1740:	e2 f7       	brpl	.-8      	; 0x173a <DIO_enuSetPinDirection+0x16e>
    1742:	cb 01       	movw	r24, r22
    1744:	84 2b       	or	r24, r20
    1746:	8c 93       	st	X, r24
    1748:	05 c0       	rjmp	.+10     	; 0x1754 <DIO_enuSetPinDirection+0x188>
		default: error_enuState = ES_OUT_OF_RANGE;
    174a:	82 e0       	ldi	r24, 0x02	; 2
    174c:	89 83       	std	Y+1, r24	; 0x01
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <DIO_enuSetPinDirection+0x188>
		}
	}
	else
	{
		error_enuState = ES_NOT_SELECTED;
    1750:	83 e0       	ldi	r24, 0x03	; 3
    1752:	89 83       	std	Y+1, r24	; 0x01
	}

	return error_enuState;
    1754:	89 81       	ldd	r24, Y+1	; 0x01
}
    1756:	26 96       	adiw	r28, 0x06	; 6
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	de bf       	out	0x3e, r29	; 62
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	08 95       	ret

00001768 <DIO_enuSetPinValue>:
/** Arguments       : Port and Pin number and Value(High or Low).           **/
/** Functionality   : Setting the value of specific pin at run time.        **/
/*****************************************************************************/
/*****************************************************************************/
ERROR_STATES DIO_enuSetPinValue			(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8PinValue)
{
    1768:	df 93       	push	r29
    176a:	cf 93       	push	r28
    176c:	00 d0       	rcall	.+0      	; 0x176e <DIO_enuSetPinValue+0x6>
    176e:	00 d0       	rcall	.+0      	; 0x1770 <DIO_enuSetPinValue+0x8>
    1770:	00 d0       	rcall	.+0      	; 0x1772 <DIO_enuSetPinValue+0xa>
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
    1776:	8a 83       	std	Y+2, r24	; 0x02
    1778:	6b 83       	std	Y+3, r22	; 0x03
    177a:	4c 83       	std	Y+4, r20	; 0x04
	ERROR_STATES error_enuState =ES_NOT_OK;
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PinID < DIO_PIN8 && Copy_u8PinValue <= PIN_HIGH)
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	88 30       	cpi	r24, 0x08	; 8
    1784:	08 f0       	brcs	.+2      	; 0x1788 <DIO_enuSetPinValue+0x20>
    1786:	b2 c0       	rjmp	.+356    	; 0x18ec <DIO_enuSetPinValue+0x184>
    1788:	8c 81       	ldd	r24, Y+4	; 0x04
    178a:	82 30       	cpi	r24, 0x02	; 2
    178c:	08 f0       	brcs	.+2      	; 0x1790 <DIO_enuSetPinValue+0x28>
    178e:	ae c0       	rjmp	.+348    	; 0x18ec <DIO_enuSetPinValue+0x184>
	{
		error_enuState = ES_OK;
    1790:	19 82       	std	Y+1, r1	; 0x01
		switch (Copy_u8PortID)
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	28 2f       	mov	r18, r24
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	3e 83       	std	Y+6, r19	; 0x06
    179a:	2d 83       	std	Y+5, r18	; 0x05
    179c:	6d 81       	ldd	r22, Y+5	; 0x05
    179e:	7e 81       	ldd	r23, Y+6	; 0x06
    17a0:	61 30       	cpi	r22, 0x01	; 1
    17a2:	71 05       	cpc	r23, r1
    17a4:	d1 f1       	breq	.+116    	; 0x181a <DIO_enuSetPinValue+0xb2>
    17a6:	8d 81       	ldd	r24, Y+5	; 0x05
    17a8:	9e 81       	ldd	r25, Y+6	; 0x06
    17aa:	82 30       	cpi	r24, 0x02	; 2
    17ac:	91 05       	cpc	r25, r1
    17ae:	34 f4       	brge	.+12     	; 0x17bc <DIO_enuSetPinValue+0x54>
    17b0:	2d 81       	ldd	r18, Y+5	; 0x05
    17b2:	3e 81       	ldd	r19, Y+6	; 0x06
    17b4:	21 15       	cp	r18, r1
    17b6:	31 05       	cpc	r19, r1
    17b8:	71 f0       	breq	.+28     	; 0x17d6 <DIO_enuSetPinValue+0x6e>
    17ba:	95 c0       	rjmp	.+298    	; 0x18e6 <DIO_enuSetPinValue+0x17e>
    17bc:	6d 81       	ldd	r22, Y+5	; 0x05
    17be:	7e 81       	ldd	r23, Y+6	; 0x06
    17c0:	62 30       	cpi	r22, 0x02	; 2
    17c2:	71 05       	cpc	r23, r1
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <DIO_enuSetPinValue+0x60>
    17c6:	4b c0       	rjmp	.+150    	; 0x185e <DIO_enuSetPinValue+0xf6>
    17c8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ca:	9e 81       	ldd	r25, Y+6	; 0x06
    17cc:	83 30       	cpi	r24, 0x03	; 3
    17ce:	91 05       	cpc	r25, r1
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <DIO_enuSetPinValue+0x6c>
    17d2:	67 c0       	rjmp	.+206    	; 0x18a2 <DIO_enuSetPinValue+0x13a>
    17d4:	88 c0       	rjmp	.+272    	; 0x18e6 <DIO_enuSetPinValue+0x17e>
		{
		case DIO_PORT_A:	ASSIGN_BIT(PORTA , Copy_u8PinID , Copy_u8PinValue);	break;
    17d6:	ab e3       	ldi	r26, 0x3B	; 59
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	eb e3       	ldi	r30, 0x3B	; 59
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	48 2f       	mov	r20, r24
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <DIO_enuSetPinValue+0x8a>
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	2a 95       	dec	r18
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <DIO_enuSetPinValue+0x86>
    17f6:	80 95       	com	r24
    17f8:	48 23       	and	r20, r24
    17fa:	8c 81       	ldd	r24, Y+4	; 0x04
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	88 2f       	mov	r24, r24
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	b9 01       	movw	r22, r18
    1808:	02 c0       	rjmp	.+4      	; 0x180e <DIO_enuSetPinValue+0xa6>
    180a:	66 0f       	add	r22, r22
    180c:	77 1f       	adc	r23, r23
    180e:	8a 95       	dec	r24
    1810:	e2 f7       	brpl	.-8      	; 0x180a <DIO_enuSetPinValue+0xa2>
    1812:	cb 01       	movw	r24, r22
    1814:	84 2b       	or	r24, r20
    1816:	8c 93       	st	X, r24
    1818:	6b c0       	rjmp	.+214    	; 0x18f0 <DIO_enuSetPinValue+0x188>
		case DIO_PORT_B:	ASSIGN_BIT(PORTB , Copy_u8PinID , Copy_u8PinValue);	break;
    181a:	a8 e3       	ldi	r26, 0x38	; 56
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	e8 e3       	ldi	r30, 0x38	; 56
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	48 2f       	mov	r20, r24
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <DIO_enuSetPinValue+0xce>
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	2a 95       	dec	r18
    1838:	e2 f7       	brpl	.-8      	; 0x1832 <DIO_enuSetPinValue+0xca>
    183a:	80 95       	com	r24
    183c:	48 23       	and	r20, r24
    183e:	8c 81       	ldd	r24, Y+4	; 0x04
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	8b 81       	ldd	r24, Y+3	; 0x03
    1846:	88 2f       	mov	r24, r24
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	b9 01       	movw	r22, r18
    184c:	02 c0       	rjmp	.+4      	; 0x1852 <DIO_enuSetPinValue+0xea>
    184e:	66 0f       	add	r22, r22
    1850:	77 1f       	adc	r23, r23
    1852:	8a 95       	dec	r24
    1854:	e2 f7       	brpl	.-8      	; 0x184e <DIO_enuSetPinValue+0xe6>
    1856:	cb 01       	movw	r24, r22
    1858:	84 2b       	or	r24, r20
    185a:	8c 93       	st	X, r24
    185c:	49 c0       	rjmp	.+146    	; 0x18f0 <DIO_enuSetPinValue+0x188>
		case DIO_PORT_C:	ASSIGN_BIT(PORTC , Copy_u8PinID , Copy_u8PinValue);	break;
    185e:	a5 e3       	ldi	r26, 0x35	; 53
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	e5 e3       	ldi	r30, 0x35	; 53
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	48 2f       	mov	r20, r24
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	02 c0       	rjmp	.+4      	; 0x187a <DIO_enuSetPinValue+0x112>
    1876:	88 0f       	add	r24, r24
    1878:	99 1f       	adc	r25, r25
    187a:	2a 95       	dec	r18
    187c:	e2 f7       	brpl	.-8      	; 0x1876 <DIO_enuSetPinValue+0x10e>
    187e:	80 95       	com	r24
    1880:	48 23       	and	r20, r24
    1882:	8c 81       	ldd	r24, Y+4	; 0x04
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	8b 81       	ldd	r24, Y+3	; 0x03
    188a:	88 2f       	mov	r24, r24
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	b9 01       	movw	r22, r18
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <DIO_enuSetPinValue+0x12e>
    1892:	66 0f       	add	r22, r22
    1894:	77 1f       	adc	r23, r23
    1896:	8a 95       	dec	r24
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <DIO_enuSetPinValue+0x12a>
    189a:	cb 01       	movw	r24, r22
    189c:	84 2b       	or	r24, r20
    189e:	8c 93       	st	X, r24
    18a0:	27 c0       	rjmp	.+78     	; 0x18f0 <DIO_enuSetPinValue+0x188>
		case DIO_PORT_D:	ASSIGN_BIT(PORTD , Copy_u8PinID , Copy_u8PinValue);	break;
    18a2:	a2 e3       	ldi	r26, 0x32	; 50
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e2 e3       	ldi	r30, 0x32	; 50
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	48 2f       	mov	r20, r24
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <DIO_enuSetPinValue+0x156>
    18ba:	88 0f       	add	r24, r24
    18bc:	99 1f       	adc	r25, r25
    18be:	2a 95       	dec	r18
    18c0:	e2 f7       	brpl	.-8      	; 0x18ba <DIO_enuSetPinValue+0x152>
    18c2:	80 95       	com	r24
    18c4:	48 23       	and	r20, r24
    18c6:	8c 81       	ldd	r24, Y+4	; 0x04
    18c8:	28 2f       	mov	r18, r24
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	88 2f       	mov	r24, r24
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	b9 01       	movw	r22, r18
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <DIO_enuSetPinValue+0x172>
    18d6:	66 0f       	add	r22, r22
    18d8:	77 1f       	adc	r23, r23
    18da:	8a 95       	dec	r24
    18dc:	e2 f7       	brpl	.-8      	; 0x18d6 <DIO_enuSetPinValue+0x16e>
    18de:	cb 01       	movw	r24, r22
    18e0:	84 2b       	or	r24, r20
    18e2:	8c 93       	st	X, r24
    18e4:	05 c0       	rjmp	.+10     	; 0x18f0 <DIO_enuSetPinValue+0x188>
		default: error_enuState = ES_OUT_OF_RANGE;
    18e6:	82 e0       	ldi	r24, 0x02	; 2
    18e8:	89 83       	std	Y+1, r24	; 0x01
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <DIO_enuSetPinValue+0x188>
		}
	}
	else
	{
		error_enuState = ES_NOT_SELECTED;
    18ec:	83 e0       	ldi	r24, 0x03	; 3
    18ee:	89 83       	std	Y+1, r24	; 0x01
	}

	return error_enuState;
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    18f2:	26 96       	adiw	r28, 0x06	; 6
    18f4:	0f b6       	in	r0, 0x3f	; 63
    18f6:	f8 94       	cli
    18f8:	de bf       	out	0x3e, r29	; 62
    18fa:	0f be       	out	0x3f, r0	; 63
    18fc:	cd bf       	out	0x3d, r28	; 61
    18fe:	cf 91       	pop	r28
    1900:	df 91       	pop	r29
    1902:	08 95       	ret

00001904 <DIO_enuTogglePinValue>:
/** Arguments       : Port and Pin number.                                  **/
/** Functionality   : Toggling the value of specific pin at run time.       **/
/*****************************************************************************/
/*****************************************************************************/
ERROR_STATES DIO_enuTogglePinValue		(u8 Copy_u8PortID , u8 Copy_u8PinID )
{
    1904:	df 93       	push	r29
    1906:	cf 93       	push	r28
    1908:	00 d0       	rcall	.+0      	; 0x190a <DIO_enuTogglePinValue+0x6>
    190a:	00 d0       	rcall	.+0      	; 0x190c <DIO_enuTogglePinValue+0x8>
    190c:	0f 92       	push	r0
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
    1912:	8a 83       	std	Y+2, r24	; 0x02
    1914:	6b 83       	std	Y+3, r22	; 0x03
	ERROR_STATES error_enuState =ES_NOT_OK;
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PinID < DIO_PIN8)
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	88 30       	cpi	r24, 0x08	; 8
    191e:	08 f0       	brcs	.+2      	; 0x1922 <DIO_enuTogglePinValue+0x1e>
    1920:	73 c0       	rjmp	.+230    	; 0x1a08 <DIO_enuTogglePinValue+0x104>
	{
		error_enuState = ES_OK;
    1922:	19 82       	std	Y+1, r1	; 0x01
		switch (Copy_u8PortID)
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	3d 83       	std	Y+5, r19	; 0x05
    192c:	2c 83       	std	Y+4, r18	; 0x04
    192e:	8c 81       	ldd	r24, Y+4	; 0x04
    1930:	9d 81       	ldd	r25, Y+5	; 0x05
    1932:	81 30       	cpi	r24, 0x01	; 1
    1934:	91 05       	cpc	r25, r1
    1936:	49 f1       	breq	.+82     	; 0x198a <DIO_enuTogglePinValue+0x86>
    1938:	2c 81       	ldd	r18, Y+4	; 0x04
    193a:	3d 81       	ldd	r19, Y+5	; 0x05
    193c:	22 30       	cpi	r18, 0x02	; 2
    193e:	31 05       	cpc	r19, r1
    1940:	2c f4       	brge	.+10     	; 0x194c <DIO_enuTogglePinValue+0x48>
    1942:	8c 81       	ldd	r24, Y+4	; 0x04
    1944:	9d 81       	ldd	r25, Y+5	; 0x05
    1946:	00 97       	sbiw	r24, 0x00	; 0
    1948:	61 f0       	breq	.+24     	; 0x1962 <DIO_enuTogglePinValue+0x5e>
    194a:	5b c0       	rjmp	.+182    	; 0x1a02 <DIO_enuTogglePinValue+0xfe>
    194c:	2c 81       	ldd	r18, Y+4	; 0x04
    194e:	3d 81       	ldd	r19, Y+5	; 0x05
    1950:	22 30       	cpi	r18, 0x02	; 2
    1952:	31 05       	cpc	r19, r1
    1954:	71 f1       	breq	.+92     	; 0x19b2 <DIO_enuTogglePinValue+0xae>
    1956:	8c 81       	ldd	r24, Y+4	; 0x04
    1958:	9d 81       	ldd	r25, Y+5	; 0x05
    195a:	83 30       	cpi	r24, 0x03	; 3
    195c:	91 05       	cpc	r25, r1
    195e:	e9 f1       	breq	.+122    	; 0x19da <DIO_enuTogglePinValue+0xd6>
    1960:	50 c0       	rjmp	.+160    	; 0x1a02 <DIO_enuTogglePinValue+0xfe>
		{
		case DIO_PORT_A:	TOG_BIT(PORTA , Copy_u8PinID);	break;
    1962:	ab e3       	ldi	r26, 0x3B	; 59
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	eb e3       	ldi	r30, 0x3B	; 59
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	48 2f       	mov	r20, r24
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	02 2e       	mov	r0, r18
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <DIO_enuTogglePinValue+0x7c>
    197c:	88 0f       	add	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	0a 94       	dec	r0
    1982:	e2 f7       	brpl	.-8      	; 0x197c <DIO_enuTogglePinValue+0x78>
    1984:	84 27       	eor	r24, r20
    1986:	8c 93       	st	X, r24
    1988:	41 c0       	rjmp	.+130    	; 0x1a0c <DIO_enuTogglePinValue+0x108>
		case DIO_PORT_B:	TOG_BIT(PORTB , Copy_u8PinID);	break;
    198a:	a8 e3       	ldi	r26, 0x38	; 56
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e8 e3       	ldi	r30, 0x38	; 56
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	48 2f       	mov	r20, r24
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	28 2f       	mov	r18, r24
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	02 2e       	mov	r0, r18
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <DIO_enuTogglePinValue+0xa4>
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	0a 94       	dec	r0
    19aa:	e2 f7       	brpl	.-8      	; 0x19a4 <DIO_enuTogglePinValue+0xa0>
    19ac:	84 27       	eor	r24, r20
    19ae:	8c 93       	st	X, r24
    19b0:	2d c0       	rjmp	.+90     	; 0x1a0c <DIO_enuTogglePinValue+0x108>
		case DIO_PORT_C:	TOG_BIT(PORTC , Copy_u8PinID);	break;
    19b2:	a5 e3       	ldi	r26, 0x35	; 53
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e5 e3       	ldi	r30, 0x35	; 53
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	48 2f       	mov	r20, r24
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	02 2e       	mov	r0, r18
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <DIO_enuTogglePinValue+0xcc>
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	0a 94       	dec	r0
    19d2:	e2 f7       	brpl	.-8      	; 0x19cc <DIO_enuTogglePinValue+0xc8>
    19d4:	84 27       	eor	r24, r20
    19d6:	8c 93       	st	X, r24
    19d8:	19 c0       	rjmp	.+50     	; 0x1a0c <DIO_enuTogglePinValue+0x108>
		case DIO_PORT_D:	TOG_BIT(PORTD , Copy_u8PinID);	break;
    19da:	a2 e3       	ldi	r26, 0x32	; 50
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e2 e3       	ldi	r30, 0x32	; 50
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	48 2f       	mov	r20, r24
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	02 2e       	mov	r0, r18
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <DIO_enuTogglePinValue+0xf4>
    19f4:	88 0f       	add	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	0a 94       	dec	r0
    19fa:	e2 f7       	brpl	.-8      	; 0x19f4 <DIO_enuTogglePinValue+0xf0>
    19fc:	84 27       	eor	r24, r20
    19fe:	8c 93       	st	X, r24
    1a00:	05 c0       	rjmp	.+10     	; 0x1a0c <DIO_enuTogglePinValue+0x108>
		default: error_enuState = ES_OUT_OF_RANGE;
    1a02:	82 e0       	ldi	r24, 0x02	; 2
    1a04:	89 83       	std	Y+1, r24	; 0x01
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <DIO_enuTogglePinValue+0x108>
		}
	}
	else
	{
		error_enuState = ES_NOT_SELECTED;
    1a08:	83 e0       	ldi	r24, 0x03	; 3
    1a0a:	89 83       	std	Y+1, r24	; 0x01
	}

	return error_enuState;
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	cf 91       	pop	r28
    1a1a:	df 91       	pop	r29
    1a1c:	08 95       	ret

00001a1e <DIO_enuGetPinValue>:
/** Arguments       : Port and Pin number.                                  **/
/** Functionality   : Getting the value of specific pin at run time.        **/
/*****************************************************************************/
/*****************************************************************************/
ERROR_STATES DIO_enuGetPinValue			(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 * Copy_Pu8PinValue)
{
    1a1e:	df 93       	push	r29
    1a20:	cf 93       	push	r28
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
    1a26:	27 97       	sbiw	r28, 0x07	; 7
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	f8 94       	cli
    1a2c:	de bf       	out	0x3e, r29	; 62
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	cd bf       	out	0x3d, r28	; 61
    1a32:	8a 83       	std	Y+2, r24	; 0x02
    1a34:	6b 83       	std	Y+3, r22	; 0x03
    1a36:	5d 83       	std	Y+5, r21	; 0x05
    1a38:	4c 83       	std	Y+4, r20	; 0x04
	ERROR_STATES error_enuState =ES_NOT_OK;
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PinID < DIO_PIN8)
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	88 30       	cpi	r24, 0x08	; 8
    1a42:	08 f0       	brcs	.+2      	; 0x1a46 <DIO_enuGetPinValue+0x28>
    1a44:	75 c0       	rjmp	.+234    	; 0x1b30 <DIO_enuGetPinValue+0x112>
	{
		error_enuState = ES_OK;
    1a46:	19 82       	std	Y+1, r1	; 0x01
		switch (Copy_u8PortID)
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	3f 83       	std	Y+7, r19	; 0x07
    1a50:	2e 83       	std	Y+6, r18	; 0x06
    1a52:	4e 81       	ldd	r20, Y+6	; 0x06
    1a54:	5f 81       	ldd	r21, Y+7	; 0x07
    1a56:	41 30       	cpi	r20, 0x01	; 1
    1a58:	51 05       	cpc	r21, r1
    1a5a:	59 f1       	breq	.+86     	; 0x1ab2 <DIO_enuGetPinValue+0x94>
    1a5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a5e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a60:	82 30       	cpi	r24, 0x02	; 2
    1a62:	91 05       	cpc	r25, r1
    1a64:	34 f4       	brge	.+12     	; 0x1a72 <DIO_enuGetPinValue+0x54>
    1a66:	2e 81       	ldd	r18, Y+6	; 0x06
    1a68:	3f 81       	ldd	r19, Y+7	; 0x07
    1a6a:	21 15       	cp	r18, r1
    1a6c:	31 05       	cpc	r19, r1
    1a6e:	69 f0       	breq	.+26     	; 0x1a8a <DIO_enuGetPinValue+0x6c>
    1a70:	5c c0       	rjmp	.+184    	; 0x1b2a <DIO_enuGetPinValue+0x10c>
    1a72:	4e 81       	ldd	r20, Y+6	; 0x06
    1a74:	5f 81       	ldd	r21, Y+7	; 0x07
    1a76:	42 30       	cpi	r20, 0x02	; 2
    1a78:	51 05       	cpc	r21, r1
    1a7a:	79 f1       	breq	.+94     	; 0x1ada <DIO_enuGetPinValue+0xbc>
    1a7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a7e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a80:	83 30       	cpi	r24, 0x03	; 3
    1a82:	91 05       	cpc	r25, r1
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <DIO_enuGetPinValue+0x6a>
    1a86:	3d c0       	rjmp	.+122    	; 0x1b02 <DIO_enuGetPinValue+0xe4>
    1a88:	50 c0       	rjmp	.+160    	; 0x1b2a <DIO_enuGetPinValue+0x10c>
		{
		case DIO_PORT_A:	* Copy_Pu8PinValue = GET_BIT(PINA , Copy_u8PinID);	break;
    1a8a:	e9 e3       	ldi	r30, 0x39	; 57
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	88 2f       	mov	r24, r24
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	a9 01       	movw	r20, r18
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <DIO_enuGetPinValue+0x84>
    1a9e:	55 95       	asr	r21
    1aa0:	47 95       	ror	r20
    1aa2:	8a 95       	dec	r24
    1aa4:	e2 f7       	brpl	.-8      	; 0x1a9e <DIO_enuGetPinValue+0x80>
    1aa6:	ca 01       	movw	r24, r20
    1aa8:	81 70       	andi	r24, 0x01	; 1
    1aaa:	ec 81       	ldd	r30, Y+4	; 0x04
    1aac:	fd 81       	ldd	r31, Y+5	; 0x05
    1aae:	80 83       	st	Z, r24
    1ab0:	41 c0       	rjmp	.+130    	; 0x1b34 <DIO_enuGetPinValue+0x116>
		case DIO_PORT_B:	* Copy_Pu8PinValue = GET_BIT(PINB , Copy_u8PinID);	break;
    1ab2:	e6 e3       	ldi	r30, 0x36	; 54
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	28 2f       	mov	r18, r24
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	88 2f       	mov	r24, r24
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	a9 01       	movw	r20, r18
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <DIO_enuGetPinValue+0xac>
    1ac6:	55 95       	asr	r21
    1ac8:	47 95       	ror	r20
    1aca:	8a 95       	dec	r24
    1acc:	e2 f7       	brpl	.-8      	; 0x1ac6 <DIO_enuGetPinValue+0xa8>
    1ace:	ca 01       	movw	r24, r20
    1ad0:	81 70       	andi	r24, 0x01	; 1
    1ad2:	ec 81       	ldd	r30, Y+4	; 0x04
    1ad4:	fd 81       	ldd	r31, Y+5	; 0x05
    1ad6:	80 83       	st	Z, r24
    1ad8:	2d c0       	rjmp	.+90     	; 0x1b34 <DIO_enuGetPinValue+0x116>
		case DIO_PORT_C:	* Copy_Pu8PinValue = GET_BIT(PINC , Copy_u8PinID);	break;
    1ada:	e3 e3       	ldi	r30, 0x33	; 51
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	28 2f       	mov	r18, r24
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	88 2f       	mov	r24, r24
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	a9 01       	movw	r20, r18
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <DIO_enuGetPinValue+0xd4>
    1aee:	55 95       	asr	r21
    1af0:	47 95       	ror	r20
    1af2:	8a 95       	dec	r24
    1af4:	e2 f7       	brpl	.-8      	; 0x1aee <DIO_enuGetPinValue+0xd0>
    1af6:	ca 01       	movw	r24, r20
    1af8:	81 70       	andi	r24, 0x01	; 1
    1afa:	ec 81       	ldd	r30, Y+4	; 0x04
    1afc:	fd 81       	ldd	r31, Y+5	; 0x05
    1afe:	80 83       	st	Z, r24
    1b00:	19 c0       	rjmp	.+50     	; 0x1b34 <DIO_enuGetPinValue+0x116>
		case DIO_PORT_D:	* Copy_Pu8PinValue = GET_BIT(PIND , Copy_u8PinID);	break;
    1b02:	e0 e3       	ldi	r30, 0x30	; 48
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	88 2f       	mov	r24, r24
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	a9 01       	movw	r20, r18
    1b14:	02 c0       	rjmp	.+4      	; 0x1b1a <DIO_enuGetPinValue+0xfc>
    1b16:	55 95       	asr	r21
    1b18:	47 95       	ror	r20
    1b1a:	8a 95       	dec	r24
    1b1c:	e2 f7       	brpl	.-8      	; 0x1b16 <DIO_enuGetPinValue+0xf8>
    1b1e:	ca 01       	movw	r24, r20
    1b20:	81 70       	andi	r24, 0x01	; 1
    1b22:	ec 81       	ldd	r30, Y+4	; 0x04
    1b24:	fd 81       	ldd	r31, Y+5	; 0x05
    1b26:	80 83       	st	Z, r24
    1b28:	05 c0       	rjmp	.+10     	; 0x1b34 <DIO_enuGetPinValue+0x116>
		default: error_enuState = ES_OUT_OF_RANGE;
    1b2a:	82 e0       	ldi	r24, 0x02	; 2
    1b2c:	89 83       	std	Y+1, r24	; 0x01
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <DIO_enuGetPinValue+0x116>
		}
	}
	else
	{
		error_enuState = ES_NOT_SELECTED;
    1b30:	83 e0       	ldi	r24, 0x03	; 3
    1b32:	89 83       	std	Y+1, r24	; 0x01
	}

	return error_enuState;
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b36:	27 96       	adiw	r28, 0x07	; 7
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <DIO_enuSetPortDirection>:
/** Arguments       : Port number and the value of Direction.               **/
/** Functionality   : Setting the direction of specific port at run time.   **/
/*****************************************************************************/
/*****************************************************************************/
ERROR_STATES DIO_enuSetPortDirection 	(u8 Copy_u8PortID , u8 Copy_u8PortDirection)
{
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	00 d0       	rcall	.+0      	; 0x1b4e <DIO_enuSetPortDirection+0x6>
    1b4e:	00 d0       	rcall	.+0      	; 0x1b50 <DIO_enuSetPortDirection+0x8>
    1b50:	0f 92       	push	r0
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	8a 83       	std	Y+2, r24	; 0x02
    1b58:	6b 83       	std	Y+3, r22	; 0x03
	ERROR_STATES error_enuState =ES_NOT_OK;
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8PortID)
    1b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b60:	28 2f       	mov	r18, r24
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	3d 83       	std	Y+5, r19	; 0x05
    1b66:	2c 83       	std	Y+4, r18	; 0x04
    1b68:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b6c:	81 30       	cpi	r24, 0x01	; 1
    1b6e:	91 05       	cpc	r25, r1
    1b70:	d9 f0       	breq	.+54     	; 0x1ba8 <DIO_enuSetPortDirection+0x60>
    1b72:	2c 81       	ldd	r18, Y+4	; 0x04
    1b74:	3d 81       	ldd	r19, Y+5	; 0x05
    1b76:	22 30       	cpi	r18, 0x02	; 2
    1b78:	31 05       	cpc	r19, r1
    1b7a:	2c f4       	brge	.+10     	; 0x1b86 <DIO_enuSetPortDirection+0x3e>
    1b7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	61 f0       	breq	.+24     	; 0x1b9c <DIO_enuSetPortDirection+0x54>
    1b84:	23 c0       	rjmp	.+70     	; 0x1bcc <DIO_enuSetPortDirection+0x84>
    1b86:	2c 81       	ldd	r18, Y+4	; 0x04
    1b88:	3d 81       	ldd	r19, Y+5	; 0x05
    1b8a:	22 30       	cpi	r18, 0x02	; 2
    1b8c:	31 05       	cpc	r19, r1
    1b8e:	91 f0       	breq	.+36     	; 0x1bb4 <DIO_enuSetPortDirection+0x6c>
    1b90:	8c 81       	ldd	r24, Y+4	; 0x04
    1b92:	9d 81       	ldd	r25, Y+5	; 0x05
    1b94:	83 30       	cpi	r24, 0x03	; 3
    1b96:	91 05       	cpc	r25, r1
    1b98:	99 f0       	breq	.+38     	; 0x1bc0 <DIO_enuSetPortDirection+0x78>
    1b9a:	18 c0       	rjmp	.+48     	; 0x1bcc <DIO_enuSetPortDirection+0x84>
	{
	case DIO_PORT_A:	DDRA =  Copy_u8PortDirection;	error_enuState = ES_OK;	break;
    1b9c:	ea e3       	ldi	r30, 0x3A	; 58
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba2:	80 83       	st	Z, r24
    1ba4:	19 82       	std	Y+1, r1	; 0x01
    1ba6:	14 c0       	rjmp	.+40     	; 0x1bd0 <DIO_enuSetPortDirection+0x88>
	case DIO_PORT_B:	DDRB =  Copy_u8PortDirection;	error_enuState = ES_OK;	break;
    1ba8:	e7 e3       	ldi	r30, 0x37	; 55
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	80 83       	st	Z, r24
    1bb0:	19 82       	std	Y+1, r1	; 0x01
    1bb2:	0e c0       	rjmp	.+28     	; 0x1bd0 <DIO_enuSetPortDirection+0x88>
	case DIO_PORT_C:	DDRC =  Copy_u8PortDirection;	error_enuState = ES_OK;	break;
    1bb4:	e4 e3       	ldi	r30, 0x34	; 52
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	80 83       	st	Z, r24
    1bbc:	19 82       	std	Y+1, r1	; 0x01
    1bbe:	08 c0       	rjmp	.+16     	; 0x1bd0 <DIO_enuSetPortDirection+0x88>
	case DIO_PORT_D:	DDRD =  Copy_u8PortDirection;	error_enuState = ES_OK;	break;
    1bc0:	e1 e3       	ldi	r30, 0x31	; 49
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	80 83       	st	Z, r24
    1bc8:	19 82       	std	Y+1, r1	; 0x01
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <DIO_enuSetPortDirection+0x88>
	default: error_enuState = ES_OUT_OF_RANGE;
    1bcc:	82 e0       	ldi	r24, 0x02	; 2
    1bce:	89 83       	std	Y+1, r24	; 0x01
	}

	return error_enuState;
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	08 95       	ret

00001be2 <DIO_enuSetPortValue>:
/** Arguments       : Port number and the Value.                            **/
/** Functionality   : Setting the value of specific port at run time.       **/
/*****************************************************************************/
/*****************************************************************************/
ERROR_STATES DIO_enuSetPortValue		(u8 Copy_u8PortID , u8 Copy_u8PortValue)
{
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	00 d0       	rcall	.+0      	; 0x1be8 <DIO_enuSetPortValue+0x6>
    1be8:	00 d0       	rcall	.+0      	; 0x1bea <DIO_enuSetPortValue+0x8>
    1bea:	0f 92       	push	r0
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	8a 83       	std	Y+2, r24	; 0x02
    1bf2:	6b 83       	std	Y+3, r22	; 0x03
	ERROR_STATES error_enuState =ES_NOT_OK;
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8PortID)
    1bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfa:	28 2f       	mov	r18, r24
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	3d 83       	std	Y+5, r19	; 0x05
    1c00:	2c 83       	std	Y+4, r18	; 0x04
    1c02:	8c 81       	ldd	r24, Y+4	; 0x04
    1c04:	9d 81       	ldd	r25, Y+5	; 0x05
    1c06:	81 30       	cpi	r24, 0x01	; 1
    1c08:	91 05       	cpc	r25, r1
    1c0a:	d9 f0       	breq	.+54     	; 0x1c42 <DIO_enuSetPortValue+0x60>
    1c0c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c0e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c10:	22 30       	cpi	r18, 0x02	; 2
    1c12:	31 05       	cpc	r19, r1
    1c14:	2c f4       	brge	.+10     	; 0x1c20 <DIO_enuSetPortValue+0x3e>
    1c16:	8c 81       	ldd	r24, Y+4	; 0x04
    1c18:	9d 81       	ldd	r25, Y+5	; 0x05
    1c1a:	00 97       	sbiw	r24, 0x00	; 0
    1c1c:	61 f0       	breq	.+24     	; 0x1c36 <DIO_enuSetPortValue+0x54>
    1c1e:	23 c0       	rjmp	.+70     	; 0x1c66 <DIO_enuSetPortValue+0x84>
    1c20:	2c 81       	ldd	r18, Y+4	; 0x04
    1c22:	3d 81       	ldd	r19, Y+5	; 0x05
    1c24:	22 30       	cpi	r18, 0x02	; 2
    1c26:	31 05       	cpc	r19, r1
    1c28:	91 f0       	breq	.+36     	; 0x1c4e <DIO_enuSetPortValue+0x6c>
    1c2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c2e:	83 30       	cpi	r24, 0x03	; 3
    1c30:	91 05       	cpc	r25, r1
    1c32:	99 f0       	breq	.+38     	; 0x1c5a <DIO_enuSetPortValue+0x78>
    1c34:	18 c0       	rjmp	.+48     	; 0x1c66 <DIO_enuSetPortValue+0x84>
	{
	case DIO_PORT_A:	PORTA = Copy_u8PortValue;	error_enuState = ES_OK;	break;
    1c36:	eb e3       	ldi	r30, 0x3B	; 59
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	80 83       	st	Z, r24
    1c3e:	19 82       	std	Y+1, r1	; 0x01
    1c40:	14 c0       	rjmp	.+40     	; 0x1c6a <DIO_enuSetPortValue+0x88>
	case DIO_PORT_B:	PORTB = Copy_u8PortValue;	error_enuState = ES_OK;	break;
    1c42:	e8 e3       	ldi	r30, 0x38	; 56
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	8b 81       	ldd	r24, Y+3	; 0x03
    1c48:	80 83       	st	Z, r24
    1c4a:	19 82       	std	Y+1, r1	; 0x01
    1c4c:	0e c0       	rjmp	.+28     	; 0x1c6a <DIO_enuSetPortValue+0x88>
	case DIO_PORT_C:	PORTC = Copy_u8PortValue;	error_enuState = ES_OK;	break;
    1c4e:	e5 e3       	ldi	r30, 0x35	; 53
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	8b 81       	ldd	r24, Y+3	; 0x03
    1c54:	80 83       	st	Z, r24
    1c56:	19 82       	std	Y+1, r1	; 0x01
    1c58:	08 c0       	rjmp	.+16     	; 0x1c6a <DIO_enuSetPortValue+0x88>
	case DIO_PORT_D:	PORTD = Copy_u8PortValue;	error_enuState = ES_OK;	break;
    1c5a:	e2 e3       	ldi	r30, 0x32	; 50
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	80 83       	st	Z, r24
    1c62:	19 82       	std	Y+1, r1	; 0x01
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <DIO_enuSetPortValue+0x88>
	default: error_enuState = ES_OUT_OF_RANGE;
    1c66:	82 e0       	ldi	r24, 0x02	; 2
    1c68:	89 83       	std	Y+1, r24	; 0x01
	}

	return error_enuState;
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	cf 91       	pop	r28
    1c78:	df 91       	pop	r29
    1c7a:	08 95       	ret

00001c7c <DIO_enuTogglePortValue>:
/** Arguments       : Port number.                                          **/
/** Functionality   : Toggling the value of specific port at run time.      **/
/*****************************************************************************/
/*****************************************************************************/
ERROR_STATES DIO_enuTogglePortValue		(u8 Copy_u8PortID )
{
    1c7c:	df 93       	push	r29
    1c7e:	cf 93       	push	r28
    1c80:	00 d0       	rcall	.+0      	; 0x1c82 <DIO_enuTogglePortValue+0x6>
    1c82:	00 d0       	rcall	.+0      	; 0x1c84 <DIO_enuTogglePortValue+0x8>
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62
    1c88:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATES error_enuState =ES_NOT_OK;
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8PortID)
    1c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c90:	28 2f       	mov	r18, r24
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	3c 83       	std	Y+4, r19	; 0x04
    1c96:	2b 83       	std	Y+3, r18	; 0x03
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9c:	81 30       	cpi	r24, 0x01	; 1
    1c9e:	91 05       	cpc	r25, r1
    1ca0:	f1 f0       	breq	.+60     	; 0x1cde <DIO_enuTogglePortValue+0x62>
    1ca2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ca6:	22 30       	cpi	r18, 0x02	; 2
    1ca8:	31 05       	cpc	r19, r1
    1caa:	2c f4       	brge	.+10     	; 0x1cb6 <DIO_enuTogglePortValue+0x3a>
    1cac:	8b 81       	ldd	r24, Y+3	; 0x03
    1cae:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb0:	00 97       	sbiw	r24, 0x00	; 0
    1cb2:	61 f0       	breq	.+24     	; 0x1ccc <DIO_enuTogglePortValue+0x50>
    1cb4:	2f c0       	rjmp	.+94     	; 0x1d14 <DIO_enuTogglePortValue+0x98>
    1cb6:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb8:	3c 81       	ldd	r19, Y+4	; 0x04
    1cba:	22 30       	cpi	r18, 0x02	; 2
    1cbc:	31 05       	cpc	r19, r1
    1cbe:	c1 f0       	breq	.+48     	; 0x1cf0 <DIO_enuTogglePortValue+0x74>
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc4:	83 30       	cpi	r24, 0x03	; 3
    1cc6:	91 05       	cpc	r25, r1
    1cc8:	e1 f0       	breq	.+56     	; 0x1d02 <DIO_enuTogglePortValue+0x86>
    1cca:	24 c0       	rjmp	.+72     	; 0x1d14 <DIO_enuTogglePortValue+0x98>
	{
	case DIO_PORT_A:	PORTA = ~ PORTA; 	error_enuState = ES_OK;	break;
    1ccc:	ab e3       	ldi	r26, 0x3B	; 59
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	eb e3       	ldi	r30, 0x3B	; 59
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	80 95       	com	r24
    1cd8:	8c 93       	st	X, r24
    1cda:	19 82       	std	Y+1, r1	; 0x01
    1cdc:	1d c0       	rjmp	.+58     	; 0x1d18 <DIO_enuTogglePortValue+0x9c>
	case DIO_PORT_B:	PORTB = ~ PORTB;	error_enuState = ES_OK;	break;
    1cde:	a8 e3       	ldi	r26, 0x38	; 56
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	e8 e3       	ldi	r30, 0x38	; 56
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	80 95       	com	r24
    1cea:	8c 93       	st	X, r24
    1cec:	19 82       	std	Y+1, r1	; 0x01
    1cee:	14 c0       	rjmp	.+40     	; 0x1d18 <DIO_enuTogglePortValue+0x9c>
	case DIO_PORT_C:	PORTC = ~ PORTC;	error_enuState = ES_OK;	break;
    1cf0:	a5 e3       	ldi	r26, 0x35	; 53
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e5 e3       	ldi	r30, 0x35	; 53
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	80 95       	com	r24
    1cfc:	8c 93       	st	X, r24
    1cfe:	19 82       	std	Y+1, r1	; 0x01
    1d00:	0b c0       	rjmp	.+22     	; 0x1d18 <DIO_enuTogglePortValue+0x9c>
	case DIO_PORT_D:	PORTD = ~ PORTD;	error_enuState = ES_OK;	break;
    1d02:	a2 e3       	ldi	r26, 0x32	; 50
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	e2 e3       	ldi	r30, 0x32	; 50
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	80 95       	com	r24
    1d0e:	8c 93       	st	X, r24
    1d10:	19 82       	std	Y+1, r1	; 0x01
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <DIO_enuTogglePortValue+0x9c>
	default: error_enuState = ES_OUT_OF_RANGE;
    1d14:	82 e0       	ldi	r24, 0x02	; 2
    1d16:	89 83       	std	Y+1, r24	; 0x01
	}

	return error_enuState;
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	08 95       	ret

00001d28 <DIO_enuGetPortValue>:
/** Arguments       : Port number.                                          **/
/** Functionality   : Getting the value of specific port at run time.       **/
/*****************************************************************************/
/*****************************************************************************/
ERROR_STATES DIO_enuGetPortValue		(u8 Copy_u8PortID , u8 * Copy_Pu8PortValue)
{
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	00 d0       	rcall	.+0      	; 0x1d2e <DIO_enuGetPortValue+0x6>
    1d2e:	00 d0       	rcall	.+0      	; 0x1d30 <DIO_enuGetPortValue+0x8>
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <DIO_enuGetPortValue+0xa>
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	8a 83       	std	Y+2, r24	; 0x02
    1d38:	7c 83       	std	Y+4, r23	; 0x04
    1d3a:	6b 83       	std	Y+3, r22	; 0x03
	ERROR_STATES error_enuState =ES_NOT_OK;
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8PortID)
    1d40:	8a 81       	ldd	r24, Y+2	; 0x02
    1d42:	28 2f       	mov	r18, r24
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	3e 83       	std	Y+6, r19	; 0x06
    1d48:	2d 83       	std	Y+5, r18	; 0x05
    1d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4e:	81 30       	cpi	r24, 0x01	; 1
    1d50:	91 05       	cpc	r25, r1
    1d52:	e9 f0       	breq	.+58     	; 0x1d8e <DIO_enuGetPortValue+0x66>
    1d54:	2d 81       	ldd	r18, Y+5	; 0x05
    1d56:	3e 81       	ldd	r19, Y+6	; 0x06
    1d58:	22 30       	cpi	r18, 0x02	; 2
    1d5a:	31 05       	cpc	r19, r1
    1d5c:	2c f4       	brge	.+10     	; 0x1d68 <DIO_enuGetPortValue+0x40>
    1d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d60:	9e 81       	ldd	r25, Y+6	; 0x06
    1d62:	00 97       	sbiw	r24, 0x00	; 0
    1d64:	61 f0       	breq	.+24     	; 0x1d7e <DIO_enuGetPortValue+0x56>
    1d66:	2b c0       	rjmp	.+86     	; 0x1dbe <DIO_enuGetPortValue+0x96>
    1d68:	2d 81       	ldd	r18, Y+5	; 0x05
    1d6a:	3e 81       	ldd	r19, Y+6	; 0x06
    1d6c:	22 30       	cpi	r18, 0x02	; 2
    1d6e:	31 05       	cpc	r19, r1
    1d70:	b1 f0       	breq	.+44     	; 0x1d9e <DIO_enuGetPortValue+0x76>
    1d72:	8d 81       	ldd	r24, Y+5	; 0x05
    1d74:	9e 81       	ldd	r25, Y+6	; 0x06
    1d76:	83 30       	cpi	r24, 0x03	; 3
    1d78:	91 05       	cpc	r25, r1
    1d7a:	c9 f0       	breq	.+50     	; 0x1dae <DIO_enuGetPortValue+0x86>
    1d7c:	20 c0       	rjmp	.+64     	; 0x1dbe <DIO_enuGetPortValue+0x96>
	{
	case DIO_PORT_A:	* Copy_Pu8PortValue = PINA; error_enuState = ES_OK;	break;
    1d7e:	e9 e3       	ldi	r30, 0x39	; 57
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	eb 81       	ldd	r30, Y+3	; 0x03
    1d86:	fc 81       	ldd	r31, Y+4	; 0x04
    1d88:	80 83       	st	Z, r24
    1d8a:	19 82       	std	Y+1, r1	; 0x01
    1d8c:	1a c0       	rjmp	.+52     	; 0x1dc2 <DIO_enuGetPortValue+0x9a>
	case DIO_PORT_B:	* Copy_Pu8PortValue = PINB;	error_enuState = ES_OK;	break;
    1d8e:	e6 e3       	ldi	r30, 0x36	; 54
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	eb 81       	ldd	r30, Y+3	; 0x03
    1d96:	fc 81       	ldd	r31, Y+4	; 0x04
    1d98:	80 83       	st	Z, r24
    1d9a:	19 82       	std	Y+1, r1	; 0x01
    1d9c:	12 c0       	rjmp	.+36     	; 0x1dc2 <DIO_enuGetPortValue+0x9a>
	case DIO_PORT_C:	* Copy_Pu8PortValue = PINC;	error_enuState = ES_OK;	break;
    1d9e:	e3 e3       	ldi	r30, 0x33	; 51
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	eb 81       	ldd	r30, Y+3	; 0x03
    1da6:	fc 81       	ldd	r31, Y+4	; 0x04
    1da8:	80 83       	st	Z, r24
    1daa:	19 82       	std	Y+1, r1	; 0x01
    1dac:	0a c0       	rjmp	.+20     	; 0x1dc2 <DIO_enuGetPortValue+0x9a>
	case DIO_PORT_D:	* Copy_Pu8PortValue = PIND;	error_enuState = ES_OK;	break;
    1dae:	e0 e3       	ldi	r30, 0x30	; 48
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	eb 81       	ldd	r30, Y+3	; 0x03
    1db6:	fc 81       	ldd	r31, Y+4	; 0x04
    1db8:	80 83       	st	Z, r24
    1dba:	19 82       	std	Y+1, r1	; 0x01
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <DIO_enuGetPortValue+0x9a>
	default: error_enuState = ES_OUT_OF_RANGE;
    1dbe:	82 e0       	ldi	r24, 0x02	; 2
    1dc0:	89 83       	std	Y+1, r24	; 0x01
	}

	return error_enuState;
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dc4:	26 96       	adiw	r28, 0x06	; 6
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	f8 94       	cli
    1dca:	de bf       	out	0x3e, r29	; 62
    1dcc:	0f be       	out	0x3f, r0	; 63
    1dce:	cd bf       	out	0x3d, r28	; 61
    1dd0:	cf 91       	pop	r28
    1dd2:	df 91       	pop	r29
    1dd4:	08 95       	ret

00001dd6 <LCD_enuInit>:
/** Arguments       : void.                                                 **/
/** Functionality   : Setting initial Commands & direction of its DIO pins. **/
/*****************************************************************************/
/*****************************************************************************/
ERROR_STATES LCD_enuInit (void)
{
    1dd6:	0f 93       	push	r16
    1dd8:	1f 93       	push	r17
    1dda:	df 93       	push	r29
    1ddc:	cf 93       	push	r28
    1dde:	cd b7       	in	r28, 0x3d	; 61
    1de0:	de b7       	in	r29, 0x3e	; 62
    1de2:	c7 54       	subi	r28, 0x47	; 71
    1de4:	d0 40       	sbci	r29, 0x00	; 0
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	de bf       	out	0x3e, r29	; 62
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	cd bf       	out	0x3d, r28	; 61
	ERROR_STATES error_enuState = ES_NOT_OK;
    1df0:	fe 01       	movw	r30, r28
    1df2:	e9 5b       	subi	r30, 0xB9	; 185
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	80 83       	st	Z, r24

	/****************************************************/
	/*********  Set Control Pins LCD to OUTPUT  *********/
	/****************************************************/
	DIO_enuSetPinDirection(RS_PORT, RS_PIN , DIO_PIN_OUTPUT);
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	60 e0       	ldi	r22, 0x00	; 0
    1dfe:	41 e0       	ldi	r20, 0x01	; 1
    1e00:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN , DIO_PIN_OUTPUT);
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	61 e0       	ldi	r22, 0x01	; 1
    1e08:	41 e0       	ldi	r20, 0x01	; 1
    1e0a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN , DIO_PIN_OUTPUT);
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	62 e0       	ldi	r22, 0x02	; 2
    1e12:	41 e0       	ldi	r20, 0x01	; 1
    1e14:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enuSetPinDirection>

	/****************************************************/
	/*********   Set Data Pins' LCD to OUTPUT   *********/
	/****************************************************/

	DIO_enuSetPinDirection(D7_PORT, D7_PIN , DIO_PIN_OUTPUT);
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	67 e0       	ldi	r22, 0x07	; 7
    1e1c:	41 e0       	ldi	r20, 0x01	; 1
    1e1e:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN , DIO_PIN_OUTPUT);
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	66 e0       	ldi	r22, 0x06	; 6
    1e26:	41 e0       	ldi	r20, 0x01	; 1
    1e28:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN , DIO_PIN_OUTPUT);
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	65 e0       	ldi	r22, 0x05	; 5
    1e30:	41 e0       	ldi	r20, 0x01	; 1
    1e32:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN , DIO_PIN_OUTPUT);
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	64 e0       	ldi	r22, 0x04	; 4
    1e3a:	41 e0       	ldi	r20, 0x01	; 1
    1e3c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enuSetPinDirection>
    1e40:	fe 01       	movw	r30, r28
    1e42:	ed 5b       	subi	r30, 0xBD	; 189
    1e44:	ff 4f       	sbci	r31, 0xFF	; 255
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	ac e0       	ldi	r26, 0x0C	; 12
    1e4c:	b2 e4       	ldi	r27, 0x42	; 66
    1e4e:	80 83       	st	Z, r24
    1e50:	91 83       	std	Z+1, r25	; 0x01
    1e52:	a2 83       	std	Z+2, r26	; 0x02
    1e54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e56:	8e 01       	movw	r16, r28
    1e58:	01 5c       	subi	r16, 0xC1	; 193
    1e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	ed 5b       	subi	r30, 0xBD	; 189
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	60 81       	ld	r22, Z
    1e64:	71 81       	ldd	r23, Z+1	; 0x01
    1e66:	82 81       	ldd	r24, Z+2	; 0x02
    1e68:	93 81       	ldd	r25, Z+3	; 0x03
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	4a ef       	ldi	r20, 0xFA	; 250
    1e70:	54 e4       	ldi	r21, 0x44	; 68
    1e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	f8 01       	movw	r30, r16
    1e7c:	80 83       	st	Z, r24
    1e7e:	91 83       	std	Z+1, r25	; 0x01
    1e80:	a2 83       	std	Z+2, r26	; 0x02
    1e82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e84:	fe 01       	movw	r30, r28
    1e86:	ff 96       	adiw	r30, 0x3f	; 63
    1e88:	60 81       	ld	r22, Z
    1e8a:	71 81       	ldd	r23, Z+1	; 0x01
    1e8c:	82 81       	ldd	r24, Z+2	; 0x02
    1e8e:	93 81       	ldd	r25, Z+3	; 0x03
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	40 e8       	ldi	r20, 0x80	; 128
    1e96:	5f e3       	ldi	r21, 0x3F	; 63
    1e98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e9c:	88 23       	and	r24, r24
    1e9e:	2c f4       	brge	.+10     	; 0x1eaa <LCD_enuInit+0xd4>
		__ticks = 1;
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	9e af       	std	Y+62, r25	; 0x3e
    1ea6:	8d af       	std	Y+61, r24	; 0x3d
    1ea8:	46 c0       	rjmp	.+140    	; 0x1f36 <LCD_enuInit+0x160>
	else if (__tmp > 65535)
    1eaa:	fe 01       	movw	r30, r28
    1eac:	ff 96       	adiw	r30, 0x3f	; 63
    1eae:	60 81       	ld	r22, Z
    1eb0:	71 81       	ldd	r23, Z+1	; 0x01
    1eb2:	82 81       	ldd	r24, Z+2	; 0x02
    1eb4:	93 81       	ldd	r25, Z+3	; 0x03
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	3f ef       	ldi	r19, 0xFF	; 255
    1eba:	4f e7       	ldi	r20, 0x7F	; 127
    1ebc:	57 e4       	ldi	r21, 0x47	; 71
    1ebe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ec2:	18 16       	cp	r1, r24
    1ec4:	64 f5       	brge	.+88     	; 0x1f1e <LCD_enuInit+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	ed 5b       	subi	r30, 0xBD	; 189
    1eca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ecc:	60 81       	ld	r22, Z
    1ece:	71 81       	ldd	r23, Z+1	; 0x01
    1ed0:	82 81       	ldd	r24, Z+2	; 0x02
    1ed2:	93 81       	ldd	r25, Z+3	; 0x03
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e2       	ldi	r20, 0x20	; 32
    1eda:	51 e4       	ldi	r21, 0x41	; 65
    1edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	bc 01       	movw	r22, r24
    1ee6:	cd 01       	movw	r24, r26
    1ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	9e af       	std	Y+62, r25	; 0x3e
    1ef2:	8d af       	std	Y+61, r24	; 0x3d
    1ef4:	0f c0       	rjmp	.+30     	; 0x1f14 <LCD_enuInit+0x13e>
    1ef6:	88 ec       	ldi	r24, 0xC8	; 200
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	9c af       	std	Y+60, r25	; 0x3c
    1efc:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1efe:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f00:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <LCD_enuInit+0x12c>
    1f06:	9c af       	std	Y+60, r25	; 0x3c
    1f08:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f0c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	9e af       	std	Y+62, r25	; 0x3e
    1f12:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f14:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f16:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	69 f7       	brne	.-38     	; 0x1ef6 <LCD_enuInit+0x120>
    1f1c:	16 c0       	rjmp	.+44     	; 0x1f4a <LCD_enuInit+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1e:	fe 01       	movw	r30, r28
    1f20:	ff 96       	adiw	r30, 0x3f	; 63
    1f22:	60 81       	ld	r22, Z
    1f24:	71 81       	ldd	r23, Z+1	; 0x01
    1f26:	82 81       	ldd	r24, Z+2	; 0x02
    1f28:	93 81       	ldd	r25, Z+3	; 0x03
    1f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	9e af       	std	Y+62, r25	; 0x3e
    1f34:	8d af       	std	Y+61, r24	; 0x3d
    1f36:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f38:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f3a:	9a af       	std	Y+58, r25	; 0x3a
    1f3c:	89 af       	std	Y+57, r24	; 0x39
    1f3e:	89 ad       	ldd	r24, Y+57	; 0x39
    1f40:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	f1 f7       	brne	.-4      	; 0x1f42 <LCD_enuInit+0x16c>
    1f46:	9a af       	std	Y+58, r25	; 0x3a
    1f48:	89 af       	std	Y+57, r24	; 0x39
	/****************************************************/

	/*********       Wait LCD to POWER ON       *********/
	_delay_ms(35);

	LCD_enuSendCommand(FOUR_BIT_MODE);
    1f4a:	88 e2       	ldi	r24, 0x28	; 40
    1f4c:	0e 94 90 11 	call	0x2320	; 0x2320 <LCD_enuSendCommand>
	/****************************************************/
	/****************************************************/
	error_enuState = ES_OK;
    1f50:	fe 01       	movw	r30, r28
    1f52:	e9 5b       	subi	r30, 0xB9	; 185
    1f54:	ff 4f       	sbci	r31, 0xFF	; 255
    1f56:	10 82       	st	Z, r1
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	a0 e8       	ldi	r26, 0x80	; 128
    1f5e:	bf e3       	ldi	r27, 0x3F	; 63
    1f60:	8d ab       	std	Y+53, r24	; 0x35
    1f62:	9e ab       	std	Y+54, r25	; 0x36
    1f64:	af ab       	std	Y+55, r26	; 0x37
    1f66:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f68:	6d a9       	ldd	r22, Y+53	; 0x35
    1f6a:	7e a9       	ldd	r23, Y+54	; 0x36
    1f6c:	8f a9       	ldd	r24, Y+55	; 0x37
    1f6e:	98 ad       	ldd	r25, Y+56	; 0x38
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	4a ef       	ldi	r20, 0xFA	; 250
    1f76:	54 e4       	ldi	r21, 0x44	; 68
    1f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	89 ab       	std	Y+49, r24	; 0x31
    1f82:	9a ab       	std	Y+50, r25	; 0x32
    1f84:	ab ab       	std	Y+51, r26	; 0x33
    1f86:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f88:	69 a9       	ldd	r22, Y+49	; 0x31
    1f8a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f8c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f8e:	9c a9       	ldd	r25, Y+52	; 0x34
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e8       	ldi	r20, 0x80	; 128
    1f96:	5f e3       	ldi	r21, 0x3F	; 63
    1f98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f9c:	88 23       	and	r24, r24
    1f9e:	2c f4       	brge	.+10     	; 0x1faa <LCD_enuInit+0x1d4>
		__ticks = 1;
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	98 ab       	std	Y+48, r25	; 0x30
    1fa6:	8f a7       	std	Y+47, r24	; 0x2f
    1fa8:	3f c0       	rjmp	.+126    	; 0x2028 <LCD_enuInit+0x252>
	else if (__tmp > 65535)
    1faa:	69 a9       	ldd	r22, Y+49	; 0x31
    1fac:	7a a9       	ldd	r23, Y+50	; 0x32
    1fae:	8b a9       	ldd	r24, Y+51	; 0x33
    1fb0:	9c a9       	ldd	r25, Y+52	; 0x34
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	3f ef       	ldi	r19, 0xFF	; 255
    1fb6:	4f e7       	ldi	r20, 0x7F	; 127
    1fb8:	57 e4       	ldi	r21, 0x47	; 71
    1fba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fbe:	18 16       	cp	r1, r24
    1fc0:	4c f5       	brge	.+82     	; 0x2014 <LCD_enuInit+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc2:	6d a9       	ldd	r22, Y+53	; 0x35
    1fc4:	7e a9       	ldd	r23, Y+54	; 0x36
    1fc6:	8f a9       	ldd	r24, Y+55	; 0x37
    1fc8:	98 ad       	ldd	r25, Y+56	; 0x38
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	40 e2       	ldi	r20, 0x20	; 32
    1fd0:	51 e4       	ldi	r21, 0x41	; 65
    1fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	bc 01       	movw	r22, r24
    1fdc:	cd 01       	movw	r24, r26
    1fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	98 ab       	std	Y+48, r25	; 0x30
    1fe8:	8f a7       	std	Y+47, r24	; 0x2f
    1fea:	0f c0       	rjmp	.+30     	; 0x200a <LCD_enuInit+0x234>
    1fec:	88 ec       	ldi	r24, 0xC8	; 200
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	9e a7       	std	Y+46, r25	; 0x2e
    1ff2:	8d a7       	std	Y+45, r24	; 0x2d
    1ff4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ff6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	f1 f7       	brne	.-4      	; 0x1ff8 <LCD_enuInit+0x222>
    1ffc:	9e a7       	std	Y+46, r25	; 0x2e
    1ffe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2000:	8f a5       	ldd	r24, Y+47	; 0x2f
    2002:	98 a9       	ldd	r25, Y+48	; 0x30
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	98 ab       	std	Y+48, r25	; 0x30
    2008:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    200a:	8f a5       	ldd	r24, Y+47	; 0x2f
    200c:	98 a9       	ldd	r25, Y+48	; 0x30
    200e:	00 97       	sbiw	r24, 0x00	; 0
    2010:	69 f7       	brne	.-38     	; 0x1fec <LCD_enuInit+0x216>
    2012:	14 c0       	rjmp	.+40     	; 0x203c <LCD_enuInit+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2014:	69 a9       	ldd	r22, Y+49	; 0x31
    2016:	7a a9       	ldd	r23, Y+50	; 0x32
    2018:	8b a9       	ldd	r24, Y+51	; 0x33
    201a:	9c a9       	ldd	r25, Y+52	; 0x34
    201c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	98 ab       	std	Y+48, r25	; 0x30
    2026:	8f a7       	std	Y+47, r24	; 0x2f
    2028:	8f a5       	ldd	r24, Y+47	; 0x2f
    202a:	98 a9       	ldd	r25, Y+48	; 0x30
    202c:	9c a7       	std	Y+44, r25	; 0x2c
    202e:	8b a7       	std	Y+43, r24	; 0x2b
    2030:	8b a5       	ldd	r24, Y+43	; 0x2b
    2032:	9c a5       	ldd	r25, Y+44	; 0x2c
    2034:	01 97       	sbiw	r24, 0x01	; 1
    2036:	f1 f7       	brne	.-4      	; 0x2034 <LCD_enuInit+0x25e>
    2038:	9c a7       	std	Y+44, r25	; 0x2c
    203a:	8b a7       	std	Y+43, r24	; 0x2b
#endif

	/*********     Wait LCD to Scan Command     *********/
	_delay_ms(1);

	LCD_enuSendCommand(DISPLAY_ON_CURSOR_BLINK);
    203c:	8e e0       	ldi	r24, 0x0E	; 14
    203e:	0e 94 90 11 	call	0x2320	; 0x2320 <LCD_enuSendCommand>
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	a0 e8       	ldi	r26, 0x80	; 128
    2048:	bf e3       	ldi	r27, 0x3F	; 63
    204a:	8f a3       	std	Y+39, r24	; 0x27
    204c:	98 a7       	std	Y+40, r25	; 0x28
    204e:	a9 a7       	std	Y+41, r26	; 0x29
    2050:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2052:	6f a1       	ldd	r22, Y+39	; 0x27
    2054:	78 a5       	ldd	r23, Y+40	; 0x28
    2056:	89 a5       	ldd	r24, Y+41	; 0x29
    2058:	9a a5       	ldd	r25, Y+42	; 0x2a
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	4a ef       	ldi	r20, 0xFA	; 250
    2060:	54 e4       	ldi	r21, 0x44	; 68
    2062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	8b a3       	std	Y+35, r24	; 0x23
    206c:	9c a3       	std	Y+36, r25	; 0x24
    206e:	ad a3       	std	Y+37, r26	; 0x25
    2070:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2072:	6b a1       	ldd	r22, Y+35	; 0x23
    2074:	7c a1       	ldd	r23, Y+36	; 0x24
    2076:	8d a1       	ldd	r24, Y+37	; 0x25
    2078:	9e a1       	ldd	r25, Y+38	; 0x26
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	40 e8       	ldi	r20, 0x80	; 128
    2080:	5f e3       	ldi	r21, 0x3F	; 63
    2082:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2086:	88 23       	and	r24, r24
    2088:	2c f4       	brge	.+10     	; 0x2094 <LCD_enuInit+0x2be>
		__ticks = 1;
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	9a a3       	std	Y+34, r25	; 0x22
    2090:	89 a3       	std	Y+33, r24	; 0x21
    2092:	3f c0       	rjmp	.+126    	; 0x2112 <LCD_enuInit+0x33c>
	else if (__tmp > 65535)
    2094:	6b a1       	ldd	r22, Y+35	; 0x23
    2096:	7c a1       	ldd	r23, Y+36	; 0x24
    2098:	8d a1       	ldd	r24, Y+37	; 0x25
    209a:	9e a1       	ldd	r25, Y+38	; 0x26
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	3f ef       	ldi	r19, 0xFF	; 255
    20a0:	4f e7       	ldi	r20, 0x7F	; 127
    20a2:	57 e4       	ldi	r21, 0x47	; 71
    20a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20a8:	18 16       	cp	r1, r24
    20aa:	4c f5       	brge	.+82     	; 0x20fe <LCD_enuInit+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ac:	6f a1       	ldd	r22, Y+39	; 0x27
    20ae:	78 a5       	ldd	r23, Y+40	; 0x28
    20b0:	89 a5       	ldd	r24, Y+41	; 0x29
    20b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e2       	ldi	r20, 0x20	; 32
    20ba:	51 e4       	ldi	r21, 0x41	; 65
    20bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	bc 01       	movw	r22, r24
    20c6:	cd 01       	movw	r24, r26
    20c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	9a a3       	std	Y+34, r25	; 0x22
    20d2:	89 a3       	std	Y+33, r24	; 0x21
    20d4:	0f c0       	rjmp	.+30     	; 0x20f4 <LCD_enuInit+0x31e>
    20d6:	88 ec       	ldi	r24, 0xC8	; 200
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	98 a3       	std	Y+32, r25	; 0x20
    20dc:	8f 8f       	std	Y+31, r24	; 0x1f
    20de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20e0:	98 a1       	ldd	r25, Y+32	; 0x20
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	f1 f7       	brne	.-4      	; 0x20e2 <LCD_enuInit+0x30c>
    20e6:	98 a3       	std	Y+32, r25	; 0x20
    20e8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ea:	89 a1       	ldd	r24, Y+33	; 0x21
    20ec:	9a a1       	ldd	r25, Y+34	; 0x22
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	9a a3       	std	Y+34, r25	; 0x22
    20f2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f4:	89 a1       	ldd	r24, Y+33	; 0x21
    20f6:	9a a1       	ldd	r25, Y+34	; 0x22
    20f8:	00 97       	sbiw	r24, 0x00	; 0
    20fa:	69 f7       	brne	.-38     	; 0x20d6 <LCD_enuInit+0x300>
    20fc:	14 c0       	rjmp	.+40     	; 0x2126 <LCD_enuInit+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fe:	6b a1       	ldd	r22, Y+35	; 0x23
    2100:	7c a1       	ldd	r23, Y+36	; 0x24
    2102:	8d a1       	ldd	r24, Y+37	; 0x25
    2104:	9e a1       	ldd	r25, Y+38	; 0x26
    2106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	9a a3       	std	Y+34, r25	; 0x22
    2110:	89 a3       	std	Y+33, r24	; 0x21
    2112:	89 a1       	ldd	r24, Y+33	; 0x21
    2114:	9a a1       	ldd	r25, Y+34	; 0x22
    2116:	9e 8f       	std	Y+30, r25	; 0x1e
    2118:	8d 8f       	std	Y+29, r24	; 0x1d
    211a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    211c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	f1 f7       	brne	.-4      	; 0x211e <LCD_enuInit+0x348>
    2122:	9e 8f       	std	Y+30, r25	; 0x1e
    2124:	8d 8f       	std	Y+29, r24	; 0x1d

	/*********     Wait LCD to Scan Command     *********/
	_delay_ms(1);

	LCD_enuSendCommand(CLEAR_DISPLAY);
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	0e 94 90 11 	call	0x2320	; 0x2320 <LCD_enuSendCommand>
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	a0 e0       	ldi	r26, 0x00	; 0
    2132:	b0 e4       	ldi	r27, 0x40	; 64
    2134:	89 8f       	std	Y+25, r24	; 0x19
    2136:	9a 8f       	std	Y+26, r25	; 0x1a
    2138:	ab 8f       	std	Y+27, r26	; 0x1b
    213a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213c:	69 8d       	ldd	r22, Y+25	; 0x19
    213e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2140:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2142:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	4a ef       	ldi	r20, 0xFA	; 250
    214a:	54 e4       	ldi	r21, 0x44	; 68
    214c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	8d 8b       	std	Y+21, r24	; 0x15
    2156:	9e 8b       	std	Y+22, r25	; 0x16
    2158:	af 8b       	std	Y+23, r26	; 0x17
    215a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    215c:	6d 89       	ldd	r22, Y+21	; 0x15
    215e:	7e 89       	ldd	r23, Y+22	; 0x16
    2160:	8f 89       	ldd	r24, Y+23	; 0x17
    2162:	98 8d       	ldd	r25, Y+24	; 0x18
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	40 e8       	ldi	r20, 0x80	; 128
    216a:	5f e3       	ldi	r21, 0x3F	; 63
    216c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2170:	88 23       	and	r24, r24
    2172:	2c f4       	brge	.+10     	; 0x217e <LCD_enuInit+0x3a8>
		__ticks = 1;
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	9c 8b       	std	Y+20, r25	; 0x14
    217a:	8b 8b       	std	Y+19, r24	; 0x13
    217c:	3f c0       	rjmp	.+126    	; 0x21fc <LCD_enuInit+0x426>
	else if (__tmp > 65535)
    217e:	6d 89       	ldd	r22, Y+21	; 0x15
    2180:	7e 89       	ldd	r23, Y+22	; 0x16
    2182:	8f 89       	ldd	r24, Y+23	; 0x17
    2184:	98 8d       	ldd	r25, Y+24	; 0x18
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	3f ef       	ldi	r19, 0xFF	; 255
    218a:	4f e7       	ldi	r20, 0x7F	; 127
    218c:	57 e4       	ldi	r21, 0x47	; 71
    218e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2192:	18 16       	cp	r1, r24
    2194:	4c f5       	brge	.+82     	; 0x21e8 <LCD_enuInit+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2196:	69 8d       	ldd	r22, Y+25	; 0x19
    2198:	7a 8d       	ldd	r23, Y+26	; 0x1a
    219a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    219c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	40 e2       	ldi	r20, 0x20	; 32
    21a4:	51 e4       	ldi	r21, 0x41	; 65
    21a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	bc 01       	movw	r22, r24
    21b0:	cd 01       	movw	r24, r26
    21b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	9c 8b       	std	Y+20, r25	; 0x14
    21bc:	8b 8b       	std	Y+19, r24	; 0x13
    21be:	0f c0       	rjmp	.+30     	; 0x21de <LCD_enuInit+0x408>
    21c0:	88 ec       	ldi	r24, 0xC8	; 200
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	9a 8b       	std	Y+18, r25	; 0x12
    21c6:	89 8b       	std	Y+17, r24	; 0x11
    21c8:	89 89       	ldd	r24, Y+17	; 0x11
    21ca:	9a 89       	ldd	r25, Y+18	; 0x12
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	f1 f7       	brne	.-4      	; 0x21cc <LCD_enuInit+0x3f6>
    21d0:	9a 8b       	std	Y+18, r25	; 0x12
    21d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d4:	8b 89       	ldd	r24, Y+19	; 0x13
    21d6:	9c 89       	ldd	r25, Y+20	; 0x14
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	9c 8b       	std	Y+20, r25	; 0x14
    21dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21de:	8b 89       	ldd	r24, Y+19	; 0x13
    21e0:	9c 89       	ldd	r25, Y+20	; 0x14
    21e2:	00 97       	sbiw	r24, 0x00	; 0
    21e4:	69 f7       	brne	.-38     	; 0x21c0 <LCD_enuInit+0x3ea>
    21e6:	14 c0       	rjmp	.+40     	; 0x2210 <LCD_enuInit+0x43a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e8:	6d 89       	ldd	r22, Y+21	; 0x15
    21ea:	7e 89       	ldd	r23, Y+22	; 0x16
    21ec:	8f 89       	ldd	r24, Y+23	; 0x17
    21ee:	98 8d       	ldd	r25, Y+24	; 0x18
    21f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	9c 8b       	std	Y+20, r25	; 0x14
    21fa:	8b 8b       	std	Y+19, r24	; 0x13
    21fc:	8b 89       	ldd	r24, Y+19	; 0x13
    21fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2200:	98 8b       	std	Y+16, r25	; 0x10
    2202:	8f 87       	std	Y+15, r24	; 0x0f
    2204:	8f 85       	ldd	r24, Y+15	; 0x0f
    2206:	98 89       	ldd	r25, Y+16	; 0x10
    2208:	01 97       	sbiw	r24, 0x01	; 1
    220a:	f1 f7       	brne	.-4      	; 0x2208 <LCD_enuInit+0x432>
    220c:	98 8b       	std	Y+16, r25	; 0x10
    220e:	8f 87       	std	Y+15, r24	; 0x0f
	//LCD_enuSendCommand(SHIFT_ENTRIE_DISPLAY_TO_LEFT);

	/*********     Wait LCD to Scan Command     *********/
	//_delay_ms(1);

	LCD_enuSendCommand(INCREMENT_CURSOR_TO_RIGHT);
    2210:	86 e0       	ldi	r24, 0x06	; 6
    2212:	0e 94 90 11 	call	0x2320	; 0x2320 <LCD_enuSendCommand>
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	a0 e8       	ldi	r26, 0x80	; 128
    221c:	bf e3       	ldi	r27, 0x3F	; 63
    221e:	8b 87       	std	Y+11, r24	; 0x0b
    2220:	9c 87       	std	Y+12, r25	; 0x0c
    2222:	ad 87       	std	Y+13, r26	; 0x0d
    2224:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2226:	6b 85       	ldd	r22, Y+11	; 0x0b
    2228:	7c 85       	ldd	r23, Y+12	; 0x0c
    222a:	8d 85       	ldd	r24, Y+13	; 0x0d
    222c:	9e 85       	ldd	r25, Y+14	; 0x0e
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	4a ef       	ldi	r20, 0xFA	; 250
    2234:	54 e4       	ldi	r21, 0x44	; 68
    2236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	8f 83       	std	Y+7, r24	; 0x07
    2240:	98 87       	std	Y+8, r25	; 0x08
    2242:	a9 87       	std	Y+9, r26	; 0x09
    2244:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2246:	6f 81       	ldd	r22, Y+7	; 0x07
    2248:	78 85       	ldd	r23, Y+8	; 0x08
    224a:	89 85       	ldd	r24, Y+9	; 0x09
    224c:	9a 85       	ldd	r25, Y+10	; 0x0a
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e8       	ldi	r20, 0x80	; 128
    2254:	5f e3       	ldi	r21, 0x3F	; 63
    2256:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    225a:	88 23       	and	r24, r24
    225c:	2c f4       	brge	.+10     	; 0x2268 <LCD_enuInit+0x492>
		__ticks = 1;
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	9e 83       	std	Y+6, r25	; 0x06
    2264:	8d 83       	std	Y+5, r24	; 0x05
    2266:	3f c0       	rjmp	.+126    	; 0x22e6 <LCD_enuInit+0x510>
	else if (__tmp > 65535)
    2268:	6f 81       	ldd	r22, Y+7	; 0x07
    226a:	78 85       	ldd	r23, Y+8	; 0x08
    226c:	89 85       	ldd	r24, Y+9	; 0x09
    226e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	3f ef       	ldi	r19, 0xFF	; 255
    2274:	4f e7       	ldi	r20, 0x7F	; 127
    2276:	57 e4       	ldi	r21, 0x47	; 71
    2278:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    227c:	18 16       	cp	r1, r24
    227e:	4c f5       	brge	.+82     	; 0x22d2 <LCD_enuInit+0x4fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2280:	6b 85       	ldd	r22, Y+11	; 0x0b
    2282:	7c 85       	ldd	r23, Y+12	; 0x0c
    2284:	8d 85       	ldd	r24, Y+13	; 0x0d
    2286:	9e 85       	ldd	r25, Y+14	; 0x0e
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e2       	ldi	r20, 0x20	; 32
    228e:	51 e4       	ldi	r21, 0x41	; 65
    2290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	bc 01       	movw	r22, r24
    229a:	cd 01       	movw	r24, r26
    229c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	9e 83       	std	Y+6, r25	; 0x06
    22a6:	8d 83       	std	Y+5, r24	; 0x05
    22a8:	0f c0       	rjmp	.+30     	; 0x22c8 <LCD_enuInit+0x4f2>
    22aa:	88 ec       	ldi	r24, 0xC8	; 200
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	9c 83       	std	Y+4, r25	; 0x04
    22b0:	8b 83       	std	Y+3, r24	; 0x03
    22b2:	8b 81       	ldd	r24, Y+3	; 0x03
    22b4:	9c 81       	ldd	r25, Y+4	; 0x04
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	f1 f7       	brne	.-4      	; 0x22b6 <LCD_enuInit+0x4e0>
    22ba:	9c 83       	std	Y+4, r25	; 0x04
    22bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22be:	8d 81       	ldd	r24, Y+5	; 0x05
    22c0:	9e 81       	ldd	r25, Y+6	; 0x06
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	9e 83       	std	Y+6, r25	; 0x06
    22c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ca:	9e 81       	ldd	r25, Y+6	; 0x06
    22cc:	00 97       	sbiw	r24, 0x00	; 0
    22ce:	69 f7       	brne	.-38     	; 0x22aa <LCD_enuInit+0x4d4>
    22d0:	14 c0       	rjmp	.+40     	; 0x22fa <LCD_enuInit+0x524>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d2:	6f 81       	ldd	r22, Y+7	; 0x07
    22d4:	78 85       	ldd	r23, Y+8	; 0x08
    22d6:	89 85       	ldd	r24, Y+9	; 0x09
    22d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	9e 83       	std	Y+6, r25	; 0x06
    22e4:	8d 83       	std	Y+5, r24	; 0x05
    22e6:	8d 81       	ldd	r24, Y+5	; 0x05
    22e8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ea:	9a 83       	std	Y+2, r25	; 0x02
    22ec:	89 83       	std	Y+1, r24	; 0x01
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	9a 81       	ldd	r25, Y+2	; 0x02
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	f1 f7       	brne	.-4      	; 0x22f2 <LCD_enuInit+0x51c>
    22f6:	9a 83       	std	Y+2, r25	; 0x02
    22f8:	89 83       	std	Y+1, r24	; 0x01

	/*********     Wait LCD to Scan Command     *********/
	_delay_ms(1);

	LCD_enuSendCommand(FORCE_CURSOR_START_FIRST_LINE);
    22fa:	80 e8       	ldi	r24, 0x80	; 128
    22fc:	0e 94 90 11 	call	0x2320	; 0x2320 <LCD_enuSendCommand>

	/****************************************************/
	/****************************************************/
	return error_enuState;
    2300:	fe 01       	movw	r30, r28
    2302:	e9 5b       	subi	r30, 0xB9	; 185
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	80 81       	ld	r24, Z
}
    2308:	c9 5b       	subi	r28, 0xB9	; 185
    230a:	df 4f       	sbci	r29, 0xFF	; 255
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	f8 94       	cli
    2310:	de bf       	out	0x3e, r29	; 62
    2312:	0f be       	out	0x3f, r0	; 63
    2314:	cd bf       	out	0x3d, r28	; 61
    2316:	cf 91       	pop	r28
    2318:	df 91       	pop	r29
    231a:	1f 91       	pop	r17
    231c:	0f 91       	pop	r16
    231e:	08 95       	ret

00002320 <LCD_enuSendCommand>:
/** Arguments       : Command Value.                                        **/
/** Functionality   : Writing Commands to LCD within Run time.              **/
/*****************************************************************************/
/*****************************************************************************/
ERROR_STATES LCD_enuSendCommand (u8 Copy_u8Command)
{
    2320:	df 93       	push	r29
    2322:	cf 93       	push	r28
    2324:	00 d0       	rcall	.+0      	; 0x2326 <LCD_enuSendCommand+0x6>
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
    232a:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATES error_enuState = ES_NOT_OK;
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	89 83       	std	Y+1, r24	; 0x01
	/****************************************************/
	/*********     Write Command (RS_PIN=0)     *********/
	/****************************************************/

	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_PIN_LOW);
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	60 e0       	ldi	r22, 0x00	; 0
    2334:	40 e0       	ldi	r20, 0x00	; 0
    2336:	0e 94 b4 0b 	call	0x1768	; 0x1768 <DIO_enuSetPinValue>

	/****************************************************/
	/*********       Send Command  To LCD       *********/
	/****************************************************/

	LCD_enuLatch (Copy_u8Command);
    233a:	8a 81       	ldd	r24, Y+2	; 0x02
    233c:	0e 94 f6 12 	call	0x25ec	; 0x25ec <LCD_enuLatch>

	/****************************************************/
	/****************************************************/
	error_enuState = ES_OK;
    2340:	19 82       	std	Y+1, r1	; 0x01
	return error_enuState;
    2342:	89 81       	ldd	r24, Y+1	; 0x01
}
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	08 95       	ret

0000234e <LCD_enuSendChar>:
/** Arguments       : Character Value.                                      **/
/** Functionality   : Writing Characters to LCD within Run time.            **/
/*****************************************************************************/
/*****************************************************************************/
ERROR_STATES LCD_enuSendChar (u8 Copy_u8Char)
{
    234e:	df 93       	push	r29
    2350:	cf 93       	push	r28
    2352:	00 d0       	rcall	.+0      	; 0x2354 <LCD_enuSendChar+0x6>
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATES error_enuState = ES_NOT_OK;
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	89 83       	std	Y+1, r24	; 0x01
	/****************************************************/
	/*********      Write Data (RS_PIN= 1)      *********/
	/****************************************************/

	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_PIN_HIGH);
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	60 e0       	ldi	r22, 0x00	; 0
    2362:	41 e0       	ldi	r20, 0x01	; 1
    2364:	0e 94 b4 0b 	call	0x1768	; 0x1768 <DIO_enuSetPinValue>

	/****************************************************/
	/*********      Send Character  To LCD      *********/
	/****************************************************/

	LCD_enuLatch (Copy_u8Char);
    2368:	8a 81       	ldd	r24, Y+2	; 0x02
    236a:	0e 94 f6 12 	call	0x25ec	; 0x25ec <LCD_enuLatch>

	/****************************************************/
	/****************************************************/
	error_enuState = ES_OK;
    236e:	19 82       	std	Y+1, r1	; 0x01
	return error_enuState;
    2370:	89 81       	ldd	r24, Y+1	; 0x01
}
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
    2376:	cf 91       	pop	r28
    2378:	df 91       	pop	r29
    237a:	08 95       	ret

0000237c <LCD_enuSendString>:
/** Arguments       : Pointer to String.                                    **/
/** Functionality   : Writing Strings to LCD within Run time.               **/
/*****************************************************************************/
/*****************************************************************************/
ERROR_STATES LCD_enuSendString (char * Copy_Pu8String)
{
    237c:	df 93       	push	r29
    237e:	cf 93       	push	r28
    2380:	00 d0       	rcall	.+0      	; 0x2382 <LCD_enuSendString+0x6>
    2382:	0f 92       	push	r0
    2384:	cd b7       	in	r28, 0x3d	; 61
    2386:	de b7       	in	r29, 0x3e	; 62
    2388:	9b 83       	std	Y+3, r25	; 0x03
    238a:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATES error_enuState = ES_NOT_OK;
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	89 83       	std	Y+1, r24	; 0x01
    2390:	12 c0       	rjmp	.+36     	; 0x23b6 <LCD_enuSendString+0x3a>
	while(*Copy_Pu8String)
	{
		LCD_enuSendChar(*Copy_Pu8String);
    2392:	ea 81       	ldd	r30, Y+2	; 0x02
    2394:	fb 81       	ldd	r31, Y+3	; 0x03
    2396:	80 81       	ld	r24, Z
    2398:	0e 94 a7 11 	call	0x234e	; 0x234e <LCD_enuSendChar>
		if (!(*(Copy_Pu8String+1))) error_enuState =ES_OK;
    239c:	8a 81       	ldd	r24, Y+2	; 0x02
    239e:	9b 81       	ldd	r25, Y+3	; 0x03
    23a0:	fc 01       	movw	r30, r24
    23a2:	31 96       	adiw	r30, 0x01	; 1
    23a4:	80 81       	ld	r24, Z
    23a6:	88 23       	and	r24, r24
    23a8:	09 f4       	brne	.+2      	; 0x23ac <LCD_enuSendString+0x30>
    23aa:	19 82       	std	Y+1, r1	; 0x01
		Copy_Pu8String++;
    23ac:	8a 81       	ldd	r24, Y+2	; 0x02
    23ae:	9b 81       	ldd	r25, Y+3	; 0x03
    23b0:	01 96       	adiw	r24, 0x01	; 1
    23b2:	9b 83       	std	Y+3, r25	; 0x03
    23b4:	8a 83       	std	Y+2, r24	; 0x02
/*****************************************************************************/
/*****************************************************************************/
ERROR_STATES LCD_enuSendString (char * Copy_Pu8String)
{
	ERROR_STATES error_enuState = ES_NOT_OK;
	while(*Copy_Pu8String)
    23b6:	ea 81       	ldd	r30, Y+2	; 0x02
    23b8:	fb 81       	ldd	r31, Y+3	; 0x03
    23ba:	80 81       	ld	r24, Z
    23bc:	88 23       	and	r24, r24
    23be:	49 f7       	brne	.-46     	; 0x2392 <LCD_enuSendString+0x16>
	{
		LCD_enuSendChar(*Copy_Pu8String);
		if (!(*(Copy_Pu8String+1))) error_enuState =ES_OK;
		Copy_Pu8String++;
	}
	return error_enuState;
    23c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
    23c6:	0f 90       	pop	r0
    23c8:	cf 91       	pop	r28
    23ca:	df 91       	pop	r29
    23cc:	08 95       	ret

000023ce <LCD_enuGoToPosition>:
/** Arguments       : Row and Column Number.                                **/
/** Functionality   : Forcing Cursor to start from Special Position.        **/
/*****************************************************************************/
/*****************************************************************************/
ERROR_STATES LCD_enuGoToPosition (u8 Copy_u8Row , u8 Copy_u8Col)
{
    23ce:	df 93       	push	r29
    23d0:	cf 93       	push	r28
    23d2:	00 d0       	rcall	.+0      	; 0x23d4 <LCD_enuGoToPosition+0x6>
    23d4:	00 d0       	rcall	.+0      	; 0x23d6 <LCD_enuGoToPosition+0x8>
    23d6:	0f 92       	push	r0
    23d8:	cd b7       	in	r28, 0x3d	; 61
    23da:	de b7       	in	r29, 0x3e	; 62
    23dc:	8c 83       	std	Y+4, r24	; 0x04
    23de:	6d 83       	std	Y+5, r22	; 0x05
	ERROR_STATES error_enuState = ES_NOT_OK;
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	89 83       	std	Y+1, r24	; 0x01

	u8 Local_u8RowLocation [] = {FORCE_CURSOR_START_FIRST_LINE , FORCE_CURSOR_START_SECOND_LINE};
    23e4:	80 e8       	ldi	r24, 0x80	; 128
    23e6:	8a 83       	std	Y+2, r24	; 0x02
    23e8:	80 ec       	ldi	r24, 0xC0	; 192
    23ea:	8b 83       	std	Y+3, r24	; 0x03
	LCD_enuSendCommand(Local_u8RowLocation [Copy_u8Row-LCD_ONE]+(Copy_u8Col-LCD_ONE));
    23ec:	8c 81       	ldd	r24, Y+4	; 0x04
    23ee:	88 2f       	mov	r24, r24
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	9c 01       	movw	r18, r24
    23f4:	21 50       	subi	r18, 0x01	; 1
    23f6:	30 40       	sbci	r19, 0x00	; 0
    23f8:	ce 01       	movw	r24, r28
    23fa:	02 96       	adiw	r24, 0x02	; 2
    23fc:	fc 01       	movw	r30, r24
    23fe:	e2 0f       	add	r30, r18
    2400:	f3 1f       	adc	r31, r19
    2402:	90 81       	ld	r25, Z
    2404:	8d 81       	ldd	r24, Y+5	; 0x05
    2406:	89 0f       	add	r24, r25
    2408:	81 50       	subi	r24, 0x01	; 1
    240a:	0e 94 90 11 	call	0x2320	; 0x2320 <LCD_enuSendCommand>
	error_enuState = ES_OK;
    240e:	19 82       	std	Y+1, r1	; 0x01

	return error_enuState;
    2410:	89 81       	ldd	r24, Y+1	; 0x01
}
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	0f 90       	pop	r0
    2418:	0f 90       	pop	r0
    241a:	0f 90       	pop	r0
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	08 95       	ret

00002422 <LCD_enuSendExtraChar>:
/** Arguments       : Row, Column Number and Ptr to Drawing Pattern.        **/
/** Functionality   : Writing Special Patterns to LCD within Run time.      **/
/*****************************************************************************/
/*****************************************************************************/
ERROR_STATES LCD_enuSendExtraChar (u8 Copy_u8RowPosition , u8 Copy_u8ColPosition , u8 *Copy_u8PExtraChar )
{
    2422:	df 93       	push	r29
    2424:	cf 93       	push	r28
    2426:	00 d0       	rcall	.+0      	; 0x2428 <LCD_enuSendExtraChar+0x6>
    2428:	00 d0       	rcall	.+0      	; 0x242a <LCD_enuSendExtraChar+0x8>
    242a:	00 d0       	rcall	.+0      	; 0x242c <LCD_enuSendExtraChar+0xa>
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
    2430:	8b 83       	std	Y+3, r24	; 0x03
    2432:	6c 83       	std	Y+4, r22	; 0x04
    2434:	5e 83       	std	Y+6, r21	; 0x06
    2436:	4d 83       	std	Y+5, r20	; 0x05
	ERROR_STATES error_enuState = ES_NOT_OK;
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8Iteration;

	LCD_enuSendCommand(GO_TO_CGRAM);
    243c:	80 e4       	ldi	r24, 0x40	; 64
    243e:	0e 94 90 11 	call	0x2320	; 0x2320 <LCD_enuSendCommand>
	for (Local_u8Iteration= LCD_ZERO; Local_u8Iteration <LCD_MAX_CGRAM ;Local_u8Iteration++)
    2442:	19 82       	std	Y+1, r1	; 0x01
    2444:	0e c0       	rjmp	.+28     	; 0x2462 <LCD_enuSendExtraChar+0x40>
	{
		LCD_enuSendChar(Copy_u8PExtraChar[Local_u8Iteration]);
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	28 2f       	mov	r18, r24
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	8d 81       	ldd	r24, Y+5	; 0x05
    244e:	9e 81       	ldd	r25, Y+6	; 0x06
    2450:	fc 01       	movw	r30, r24
    2452:	e2 0f       	add	r30, r18
    2454:	f3 1f       	adc	r31, r19
    2456:	80 81       	ld	r24, Z
    2458:	0e 94 a7 11 	call	0x234e	; 0x234e <LCD_enuSendChar>
	ERROR_STATES error_enuState = ES_NOT_OK;

	u8 Local_u8Iteration;

	LCD_enuSendCommand(GO_TO_CGRAM);
	for (Local_u8Iteration= LCD_ZERO; Local_u8Iteration <LCD_MAX_CGRAM ;Local_u8Iteration++)
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	8f 5f       	subi	r24, 0xFF	; 255
    2460:	89 83       	std	Y+1, r24	; 0x01
    2462:	89 81       	ldd	r24, Y+1	; 0x01
    2464:	80 34       	cpi	r24, 0x40	; 64
    2466:	78 f3       	brcs	.-34     	; 0x2446 <LCD_enuSendExtraChar+0x24>
	{
		LCD_enuSendChar(Copy_u8PExtraChar[Local_u8Iteration]);
	}

	LCD_enuSendCommand(FORCE_CURSOR_START_FIRST_LINE);
    2468:	80 e8       	ldi	r24, 0x80	; 128
    246a:	0e 94 90 11 	call	0x2320	; 0x2320 <LCD_enuSendCommand>
	LCD_enuGoToPosition(Copy_u8RowPosition, Copy_u8ColPosition);
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	6c 81       	ldd	r22, Y+4	; 0x04
    2472:	0e 94 e7 11 	call	0x23ce	; 0x23ce <LCD_enuGoToPosition>

	for (Local_u8Iteration= LCD_ZERO; Local_u8Iteration <=LCD_SEVEN ;Local_u8Iteration++)
    2476:	19 82       	std	Y+1, r1	; 0x01
    2478:	06 c0       	rjmp	.+12     	; 0x2486 <LCD_enuSendExtraChar+0x64>
	{
		LCD_enuSendChar(Local_u8Iteration);
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	0e 94 a7 11 	call	0x234e	; 0x234e <LCD_enuSendChar>
	}

	LCD_enuSendCommand(FORCE_CURSOR_START_FIRST_LINE);
	LCD_enuGoToPosition(Copy_u8RowPosition, Copy_u8ColPosition);

	for (Local_u8Iteration= LCD_ZERO; Local_u8Iteration <=LCD_SEVEN ;Local_u8Iteration++)
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	8f 5f       	subi	r24, 0xFF	; 255
    2484:	89 83       	std	Y+1, r24	; 0x01
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	88 30       	cpi	r24, 0x08	; 8
    248a:	b8 f3       	brcs	.-18     	; 0x247a <LCD_enuSendExtraChar+0x58>
	{
		LCD_enuSendChar(Local_u8Iteration);
	}
	error_enuState = ES_OK;
    248c:	1a 82       	std	Y+2, r1	; 0x02

	return error_enuState;
    248e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2490:	26 96       	adiw	r28, 0x06	; 6
    2492:	0f b6       	in	r0, 0x3f	; 63
    2494:	f8 94       	cli
    2496:	de bf       	out	0x3e, r29	; 62
    2498:	0f be       	out	0x3f, r0	; 63
    249a:	cd bf       	out	0x3d, r28	; 61
    249c:	cf 91       	pop	r28
    249e:	df 91       	pop	r29
    24a0:	08 95       	ret

000024a2 <LCD_enuSendSpecialNumber>:
/** Arguments       : Row, Column Number and Ptr to Drawing Pattern.        **/
/** Functionality   : Writing Special Patterns to LCD within Run time.      **/
/*****************************************************************************/
/*****************************************************************************/
ERROR_STATES LCD_enuSendSpecialNumber(u32 Copy_u32Number)
{
    24a2:	df 93       	push	r29
    24a4:	cf 93       	push	r28
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
    24aa:	2f 97       	sbiw	r28, 0x0f	; 15
    24ac:	0f b6       	in	r0, 0x3f	; 63
    24ae:	f8 94       	cli
    24b0:	de bf       	out	0x3e, r29	; 62
    24b2:	0f be       	out	0x3f, r0	; 63
    24b4:	cd bf       	out	0x3d, r28	; 61
    24b6:	6c 87       	std	Y+12, r22	; 0x0c
    24b8:	7d 87       	std	Y+13, r23	; 0x0d
    24ba:	8e 87       	std	Y+14, r24	; 0x0e
    24bc:	9f 87       	std	Y+15, r25	; 0x0f
	ERROR_STATES error_enuState = ES_NOT_OK;
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	8b 87       	std	Y+11, r24	; 0x0b

	u8 Local_u8Iteration , Local_u8NumOfDigits=LCD_ZERO;
    24c2:	19 86       	std	Y+9, r1	; 0x09
	u32 Local_u32Reminder , Local_u8PowerTen ;
	Local_u32Reminder=Copy_u32Number;
    24c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    24c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    24c8:	ae 85       	ldd	r26, Y+14	; 0x0e
    24ca:	bf 85       	ldd	r27, Y+15	; 0x0f
    24cc:	8d 83       	std	Y+5, r24	; 0x05
    24ce:	9e 83       	std	Y+6, r25	; 0x06
    24d0:	af 83       	std	Y+7, r26	; 0x07
    24d2:	b8 87       	std	Y+8, r27	; 0x08

	for (Local_u8Iteration = LCD_ONE ;  ; Local_u8Iteration++)
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	8a 87       	std	Y+10, r24	; 0x0a
	{
		Copy_u32Number=Local_u32Reminder;
    24d8:	8d 81       	ldd	r24, Y+5	; 0x05
    24da:	9e 81       	ldd	r25, Y+6	; 0x06
    24dc:	af 81       	ldd	r26, Y+7	; 0x07
    24de:	b8 85       	ldd	r27, Y+8	; 0x08
    24e0:	8c 87       	std	Y+12, r24	; 0x0c
    24e2:	9d 87       	std	Y+13, r25	; 0x0d
    24e4:	ae 87       	std	Y+14, r26	; 0x0e
    24e6:	bf 87       	std	Y+15, r27	; 0x0f
		Local_u8PowerTen=POWER_u32PowerNumbers( LCD_TEN , Local_u8Iteration);
    24e8:	6a e0       	ldi	r22, 0x0A	; 10
    24ea:	70 e0       	ldi	r23, 0x00	; 0
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	4a 85       	ldd	r20, Y+10	; 0x0a
    24f2:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <POWER_u32PowerNumbers>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	89 83       	std	Y+1, r24	; 0x01
    24fc:	9a 83       	std	Y+2, r25	; 0x02
    24fe:	ab 83       	std	Y+3, r26	; 0x03
    2500:	bc 83       	std	Y+4, r27	; 0x04
		Copy_u32Number /= Local_u8PowerTen;
    2502:	8c 85       	ldd	r24, Y+12	; 0x0c
    2504:	9d 85       	ldd	r25, Y+13	; 0x0d
    2506:	ae 85       	ldd	r26, Y+14	; 0x0e
    2508:	bf 85       	ldd	r27, Y+15	; 0x0f
    250a:	29 81       	ldd	r18, Y+1	; 0x01
    250c:	3a 81       	ldd	r19, Y+2	; 0x02
    250e:	4b 81       	ldd	r20, Y+3	; 0x03
    2510:	5c 81       	ldd	r21, Y+4	; 0x04
    2512:	bc 01       	movw	r22, r24
    2514:	cd 01       	movw	r24, r26
    2516:	0e 94 44 18 	call	0x3088	; 0x3088 <__udivmodsi4>
    251a:	da 01       	movw	r26, r20
    251c:	c9 01       	movw	r24, r18
    251e:	8c 87       	std	Y+12, r24	; 0x0c
    2520:	9d 87       	std	Y+13, r25	; 0x0d
    2522:	ae 87       	std	Y+14, r26	; 0x0e
    2524:	bf 87       	std	Y+15, r27	; 0x0f

		if (! (Copy_u32Number))
    2526:	8c 85       	ldd	r24, Y+12	; 0x0c
    2528:	9d 85       	ldd	r25, Y+13	; 0x0d
    252a:	ae 85       	ldd	r26, Y+14	; 0x0e
    252c:	bf 85       	ldd	r27, Y+15	; 0x0f
    252e:	00 97       	sbiw	r24, 0x00	; 0
    2530:	a1 05       	cpc	r26, r1
    2532:	b1 05       	cpc	r27, r1
    2534:	29 f4       	brne	.+10     	; 0x2540 <LCD_enuSendSpecialNumber+0x9e>
		{
			Local_u8NumOfDigits=Local_u8Iteration;
    2536:	8a 85       	ldd	r24, Y+10	; 0x0a
    2538:	89 87       	std	Y+9, r24	; 0x09
			break;
		}
	}

	for (Local_u8Iteration = Local_u8NumOfDigits ; Local_u8Iteration > LCD_ZERO ;Local_u8Iteration--)
    253a:	89 85       	ldd	r24, Y+9	; 0x09
    253c:	8a 87       	std	Y+10, r24	; 0x0a
    253e:	47 c0       	rjmp	.+142    	; 0x25ce <LCD_enuSendSpecialNumber+0x12c>

	u8 Local_u8Iteration , Local_u8NumOfDigits=LCD_ZERO;
	u32 Local_u32Reminder , Local_u8PowerTen ;
	Local_u32Reminder=Copy_u32Number;

	for (Local_u8Iteration = LCD_ONE ;  ; Local_u8Iteration++)
    2540:	8a 85       	ldd	r24, Y+10	; 0x0a
    2542:	8f 5f       	subi	r24, 0xFF	; 255
    2544:	8a 87       	std	Y+10, r24	; 0x0a
    2546:	c8 cf       	rjmp	.-112    	; 0x24d8 <LCD_enuSendSpecialNumber+0x36>
		}
	}

	for (Local_u8Iteration = Local_u8NumOfDigits ; Local_u8Iteration > LCD_ZERO ;Local_u8Iteration--)
	{
		Copy_u32Number=Local_u32Reminder;
    2548:	8d 81       	ldd	r24, Y+5	; 0x05
    254a:	9e 81       	ldd	r25, Y+6	; 0x06
    254c:	af 81       	ldd	r26, Y+7	; 0x07
    254e:	b8 85       	ldd	r27, Y+8	; 0x08
    2550:	8c 87       	std	Y+12, r24	; 0x0c
    2552:	9d 87       	std	Y+13, r25	; 0x0d
    2554:	ae 87       	std	Y+14, r26	; 0x0e
    2556:	bf 87       	std	Y+15, r27	; 0x0f
		Local_u8PowerTen=POWER_u32PowerNumbers( LCD_TEN , Local_u8Iteration - LCD_ONE);
    2558:	8a 85       	ldd	r24, Y+10	; 0x0a
    255a:	28 2f       	mov	r18, r24
    255c:	21 50       	subi	r18, 0x01	; 1
    255e:	6a e0       	ldi	r22, 0x0A	; 10
    2560:	70 e0       	ldi	r23, 0x00	; 0
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	42 2f       	mov	r20, r18
    2568:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <POWER_u32PowerNumbers>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	89 83       	std	Y+1, r24	; 0x01
    2572:	9a 83       	std	Y+2, r25	; 0x02
    2574:	ab 83       	std	Y+3, r26	; 0x03
    2576:	bc 83       	std	Y+4, r27	; 0x04

		Local_u32Reminder  %= Local_u8PowerTen;
    2578:	8d 81       	ldd	r24, Y+5	; 0x05
    257a:	9e 81       	ldd	r25, Y+6	; 0x06
    257c:	af 81       	ldd	r26, Y+7	; 0x07
    257e:	b8 85       	ldd	r27, Y+8	; 0x08
    2580:	29 81       	ldd	r18, Y+1	; 0x01
    2582:	3a 81       	ldd	r19, Y+2	; 0x02
    2584:	4b 81       	ldd	r20, Y+3	; 0x03
    2586:	5c 81       	ldd	r21, Y+4	; 0x04
    2588:	bc 01       	movw	r22, r24
    258a:	cd 01       	movw	r24, r26
    258c:	0e 94 44 18 	call	0x3088	; 0x3088 <__udivmodsi4>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	8d 83       	std	Y+5, r24	; 0x05
    2596:	9e 83       	std	Y+6, r25	; 0x06
    2598:	af 83       	std	Y+7, r26	; 0x07
    259a:	b8 87       	std	Y+8, r27	; 0x08

		Copy_u32Number /= (Local_u8PowerTen);
    259c:	8c 85       	ldd	r24, Y+12	; 0x0c
    259e:	9d 85       	ldd	r25, Y+13	; 0x0d
    25a0:	ae 85       	ldd	r26, Y+14	; 0x0e
    25a2:	bf 85       	ldd	r27, Y+15	; 0x0f
    25a4:	29 81       	ldd	r18, Y+1	; 0x01
    25a6:	3a 81       	ldd	r19, Y+2	; 0x02
    25a8:	4b 81       	ldd	r20, Y+3	; 0x03
    25aa:	5c 81       	ldd	r21, Y+4	; 0x04
    25ac:	bc 01       	movw	r22, r24
    25ae:	cd 01       	movw	r24, r26
    25b0:	0e 94 44 18 	call	0x3088	; 0x3088 <__udivmodsi4>
    25b4:	da 01       	movw	r26, r20
    25b6:	c9 01       	movw	r24, r18
    25b8:	8c 87       	std	Y+12, r24	; 0x0c
    25ba:	9d 87       	std	Y+13, r25	; 0x0d
    25bc:	ae 87       	std	Y+14, r26	; 0x0e
    25be:	bf 87       	std	Y+15, r27	; 0x0f

		LCD_enuSendChar (Copy_u32Number+'0');
    25c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    25c2:	80 5d       	subi	r24, 0xD0	; 208
    25c4:	0e 94 a7 11 	call	0x234e	; 0x234e <LCD_enuSendChar>
			Local_u8NumOfDigits=Local_u8Iteration;
			break;
		}
	}

	for (Local_u8Iteration = Local_u8NumOfDigits ; Local_u8Iteration > LCD_ZERO ;Local_u8Iteration--)
    25c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    25ca:	81 50       	subi	r24, 0x01	; 1
    25cc:	8a 87       	std	Y+10, r24	; 0x0a
    25ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    25d0:	88 23       	and	r24, r24
    25d2:	09 f0       	breq	.+2      	; 0x25d6 <LCD_enuSendSpecialNumber+0x134>
    25d4:	b9 cf       	rjmp	.-142    	; 0x2548 <LCD_enuSendSpecialNumber+0xa6>

		Copy_u32Number /= (Local_u8PowerTen);

		LCD_enuSendChar (Copy_u32Number+'0');
	}
	error_enuState = ES_OK;
    25d6:	1b 86       	std	Y+11, r1	; 0x0b

	return error_enuState;
    25d8:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    25da:	2f 96       	adiw	r28, 0x0f	; 15
    25dc:	0f b6       	in	r0, 0x3f	; 63
    25de:	f8 94       	cli
    25e0:	de bf       	out	0x3e, r29	; 62
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	cd bf       	out	0x3d, r28	; 61
    25e6:	cf 91       	pop	r28
    25e8:	df 91       	pop	r29
    25ea:	08 95       	ret

000025ec <LCD_enuLatch>:
/** Arguments       : Sending Data.                                         **/
/** Functionality   : Writing Datas to LCD and Latching.                    **/
/*****************************************************************************/
/*****************************************************************************/
ERROR_STATES LCD_enuLatch (u8 Copy_u8Data)
{
    25ec:	0f 93       	push	r16
    25ee:	1f 93       	push	r17
    25f0:	df 93       	push	r29
    25f2:	cf 93       	push	r28
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	c6 56       	subi	r28, 0x66	; 102
    25fa:	d0 40       	sbci	r29, 0x00	; 0
    25fc:	0f b6       	in	r0, 0x3f	; 63
    25fe:	f8 94       	cli
    2600:	de bf       	out	0x3e, r29	; 62
    2602:	0f be       	out	0x3f, r0	; 63
    2604:	cd bf       	out	0x3d, r28	; 61
    2606:	fe 01       	movw	r30, r28
    2608:	ea 59       	subi	r30, 0x9A	; 154
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	80 83       	st	Z, r24
	ERROR_STATES error_enuState = ES_NOT_OK;
    260e:	fe 01       	movw	r30, r28
    2610:	eb 59       	subi	r30, 0x9B	; 155
    2612:	ff 4f       	sbci	r31, 0xFF	; 255
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	80 83       	st	Z, r24
	/****************************************************/
	/*********     Write On LCD (RW_PIN= 0)     *********/
	/****************************************************/

	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_PIN_LOW);
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	61 e0       	ldi	r22, 0x01	; 1
    261c:	40 e0       	ldi	r20, 0x00	; 0
    261e:	0e 94 b4 0b 	call	0x1768	; 0x1768 <DIO_enuSetPinValue>

	/****************************************************/
	/*********        Write Data  On LCD        *********/
	/****************************************************/

	if (Copy_u8Data == FOUR_BIT_MODE)
    2622:	fe 01       	movw	r30, r28
    2624:	ea 59       	subi	r30, 0x9A	; 154
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	80 81       	ld	r24, Z
    262a:	88 32       	cpi	r24, 0x28	; 40
    262c:	09 f0       	breq	.+2      	; 0x2630 <LCD_enuLatch+0x44>
    262e:	1a c2       	rjmp	.+1076   	; 0x2a64 <LCD_enuLatch+0x478>
	{
		DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data >> LCD_SEVEN) & LCD_ONE));
    2630:	fe 01       	movw	r30, r28
    2632:	ea 59       	subi	r30, 0x9A	; 154
    2634:	ff 4f       	sbci	r31, 0xFF	; 255
    2636:	80 81       	ld	r24, Z
    2638:	98 2f       	mov	r25, r24
    263a:	99 1f       	adc	r25, r25
    263c:	99 27       	eor	r25, r25
    263e:	99 1f       	adc	r25, r25
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	67 e0       	ldi	r22, 0x07	; 7
    2644:	49 2f       	mov	r20, r25
    2646:	0e 94 b4 0b 	call	0x1768	; 0x1768 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data >> LCD_SEX)   & LCD_ONE));
    264a:	fe 01       	movw	r30, r28
    264c:	ea 59       	subi	r30, 0x9A	; 154
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	80 81       	ld	r24, Z
    2652:	82 95       	swap	r24
    2654:	86 95       	lsr	r24
    2656:	86 95       	lsr	r24
    2658:	83 70       	andi	r24, 0x03	; 3
    265a:	98 2f       	mov	r25, r24
    265c:	91 70       	andi	r25, 0x01	; 1
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	66 e0       	ldi	r22, 0x06	; 6
    2662:	49 2f       	mov	r20, r25
    2664:	0e 94 b4 0b 	call	0x1768	; 0x1768 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data >> LCD_FIVE)  & LCD_ONE));
    2668:	fe 01       	movw	r30, r28
    266a:	ea 59       	subi	r30, 0x9A	; 154
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	80 81       	ld	r24, Z
    2670:	82 95       	swap	r24
    2672:	86 95       	lsr	r24
    2674:	87 70       	andi	r24, 0x07	; 7
    2676:	98 2f       	mov	r25, r24
    2678:	91 70       	andi	r25, 0x01	; 1
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	65 e0       	ldi	r22, 0x05	; 5
    267e:	49 2f       	mov	r20, r25
    2680:	0e 94 b4 0b 	call	0x1768	; 0x1768 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data >> LCD_FOUR)  & LCD_ONE));
    2684:	fe 01       	movw	r30, r28
    2686:	ea 59       	subi	r30, 0x9A	; 154
    2688:	ff 4f       	sbci	r31, 0xFF	; 255
    268a:	80 81       	ld	r24, Z
    268c:	82 95       	swap	r24
    268e:	8f 70       	andi	r24, 0x0F	; 15
    2690:	98 2f       	mov	r25, r24
    2692:	91 70       	andi	r25, 0x01	; 1
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	64 e0       	ldi	r22, 0x04	; 4
    2698:	49 2f       	mov	r20, r25
    269a:	0e 94 b4 0b 	call	0x1768	; 0x1768 <DIO_enuSetPinValue>

		/****************************************************/
		/*********         Latch on  EN_PIN         *********/
		/****************************************************/

		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_PIN_HIGH);
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	62 e0       	ldi	r22, 0x02	; 2
    26a2:	41 e0       	ldi	r20, 0x01	; 1
    26a4:	0e 94 b4 0b 	call	0x1768	; 0x1768 <DIO_enuSetPinValue>
    26a8:	fe 01       	movw	r30, r28
    26aa:	ef 59       	subi	r30, 0x9F	; 159
    26ac:	ff 4f       	sbci	r31, 0xFF	; 255
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	a0 e8       	ldi	r26, 0x80	; 128
    26b4:	bf e3       	ldi	r27, 0x3F	; 63
    26b6:	80 83       	st	Z, r24
    26b8:	91 83       	std	Z+1, r25	; 0x01
    26ba:	a2 83       	std	Z+2, r26	; 0x02
    26bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26be:	8e 01       	movw	r16, r28
    26c0:	03 5a       	subi	r16, 0xA3	; 163
    26c2:	1f 4f       	sbci	r17, 0xFF	; 255
    26c4:	fe 01       	movw	r30, r28
    26c6:	ef 59       	subi	r30, 0x9F	; 159
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	60 81       	ld	r22, Z
    26cc:	71 81       	ldd	r23, Z+1	; 0x01
    26ce:	82 81       	ldd	r24, Z+2	; 0x02
    26d0:	93 81       	ldd	r25, Z+3	; 0x03
    26d2:	2b ea       	ldi	r18, 0xAB	; 171
    26d4:	3a ea       	ldi	r19, 0xAA	; 170
    26d6:	4a e2       	ldi	r20, 0x2A	; 42
    26d8:	50 e4       	ldi	r21, 0x40	; 64
    26da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	f8 01       	movw	r30, r16
    26e4:	80 83       	st	Z, r24
    26e6:	91 83       	std	Z+1, r25	; 0x01
    26e8:	a2 83       	std	Z+2, r26	; 0x02
    26ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26ec:	fe 01       	movw	r30, r28
    26ee:	e3 5a       	subi	r30, 0xA3	; 163
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	60 81       	ld	r22, Z
    26f4:	71 81       	ldd	r23, Z+1	; 0x01
    26f6:	82 81       	ldd	r24, Z+2	; 0x02
    26f8:	93 81       	ldd	r25, Z+3	; 0x03
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	40 e8       	ldi	r20, 0x80	; 128
    2700:	5f e3       	ldi	r21, 0x3F	; 63
    2702:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2706:	88 23       	and	r24, r24
    2708:	34 f4       	brge	.+12     	; 0x2716 <LCD_enuLatch+0x12a>
		__ticks = 1;
    270a:	fe 01       	movw	r30, r28
    270c:	e4 5a       	subi	r30, 0xA4	; 164
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	80 83       	st	Z, r24
    2714:	e0 c0       	rjmp	.+448    	; 0x28d6 <LCD_enuLatch+0x2ea>
	else if (__tmp > 255)
    2716:	fe 01       	movw	r30, r28
    2718:	e3 5a       	subi	r30, 0xA3	; 163
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	60 81       	ld	r22, Z
    271e:	71 81       	ldd	r23, Z+1	; 0x01
    2720:	82 81       	ldd	r24, Z+2	; 0x02
    2722:	93 81       	ldd	r25, Z+3	; 0x03
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	4f e7       	ldi	r20, 0x7F	; 127
    272a:	53 e4       	ldi	r21, 0x43	; 67
    272c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2730:	18 16       	cp	r1, r24
    2732:	0c f0       	brlt	.+2      	; 0x2736 <LCD_enuLatch+0x14a>
    2734:	c0 c0       	rjmp	.+384    	; 0x28b6 <LCD_enuLatch+0x2ca>
	{
		_delay_ms(__us / 1000.0);
    2736:	fe 01       	movw	r30, r28
    2738:	ef 59       	subi	r30, 0x9F	; 159
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	60 81       	ld	r22, Z
    273e:	71 81       	ldd	r23, Z+1	; 0x01
    2740:	82 81       	ldd	r24, Z+2	; 0x02
    2742:	93 81       	ldd	r25, Z+3	; 0x03
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	4a e7       	ldi	r20, 0x7A	; 122
    274a:	54 e4       	ldi	r21, 0x44	; 68
    274c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	fe 01       	movw	r30, r28
    2756:	e8 5a       	subi	r30, 0xA8	; 168
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	80 83       	st	Z, r24
    275c:	91 83       	std	Z+1, r25	; 0x01
    275e:	a2 83       	std	Z+2, r26	; 0x02
    2760:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2762:	8e 01       	movw	r16, r28
    2764:	0c 5a       	subi	r16, 0xAC	; 172
    2766:	1f 4f       	sbci	r17, 0xFF	; 255
    2768:	fe 01       	movw	r30, r28
    276a:	e8 5a       	subi	r30, 0xA8	; 168
    276c:	ff 4f       	sbci	r31, 0xFF	; 255
    276e:	60 81       	ld	r22, Z
    2770:	71 81       	ldd	r23, Z+1	; 0x01
    2772:	82 81       	ldd	r24, Z+2	; 0x02
    2774:	93 81       	ldd	r25, Z+3	; 0x03
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	4a ef       	ldi	r20, 0xFA	; 250
    277c:	54 e4       	ldi	r21, 0x44	; 68
    277e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	f8 01       	movw	r30, r16
    2788:	80 83       	st	Z, r24
    278a:	91 83       	std	Z+1, r25	; 0x01
    278c:	a2 83       	std	Z+2, r26	; 0x02
    278e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2790:	fe 01       	movw	r30, r28
    2792:	ec 5a       	subi	r30, 0xAC	; 172
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	60 81       	ld	r22, Z
    2798:	71 81       	ldd	r23, Z+1	; 0x01
    279a:	82 81       	ldd	r24, Z+2	; 0x02
    279c:	93 81       	ldd	r25, Z+3	; 0x03
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	40 e8       	ldi	r20, 0x80	; 128
    27a4:	5f e3       	ldi	r21, 0x3F	; 63
    27a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27aa:	88 23       	and	r24, r24
    27ac:	44 f4       	brge	.+16     	; 0x27be <LCD_enuLatch+0x1d2>
		__ticks = 1;
    27ae:	fe 01       	movw	r30, r28
    27b0:	ee 5a       	subi	r30, 0xAE	; 174
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	91 83       	std	Z+1, r25	; 0x01
    27ba:	80 83       	st	Z, r24
    27bc:	64 c0       	rjmp	.+200    	; 0x2886 <LCD_enuLatch+0x29a>
	else if (__tmp > 65535)
    27be:	fe 01       	movw	r30, r28
    27c0:	ec 5a       	subi	r30, 0xAC	; 172
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	60 81       	ld	r22, Z
    27c6:	71 81       	ldd	r23, Z+1	; 0x01
    27c8:	82 81       	ldd	r24, Z+2	; 0x02
    27ca:	93 81       	ldd	r25, Z+3	; 0x03
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	3f ef       	ldi	r19, 0xFF	; 255
    27d0:	4f e7       	ldi	r20, 0x7F	; 127
    27d2:	57 e4       	ldi	r21, 0x47	; 71
    27d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27d8:	18 16       	cp	r1, r24
    27da:	0c f0       	brlt	.+2      	; 0x27de <LCD_enuLatch+0x1f2>
    27dc:	43 c0       	rjmp	.+134    	; 0x2864 <LCD_enuLatch+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27de:	fe 01       	movw	r30, r28
    27e0:	e8 5a       	subi	r30, 0xA8	; 168
    27e2:	ff 4f       	sbci	r31, 0xFF	; 255
    27e4:	60 81       	ld	r22, Z
    27e6:	71 81       	ldd	r23, Z+1	; 0x01
    27e8:	82 81       	ldd	r24, Z+2	; 0x02
    27ea:	93 81       	ldd	r25, Z+3	; 0x03
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	40 e2       	ldi	r20, 0x20	; 32
    27f2:	51 e4       	ldi	r21, 0x41	; 65
    27f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f8:	dc 01       	movw	r26, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	8e 01       	movw	r16, r28
    27fe:	0e 5a       	subi	r16, 0xAE	; 174
    2800:	1f 4f       	sbci	r17, 0xFF	; 255
    2802:	bc 01       	movw	r22, r24
    2804:	cd 01       	movw	r24, r26
    2806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	f8 01       	movw	r30, r16
    2810:	91 83       	std	Z+1, r25	; 0x01
    2812:	80 83       	st	Z, r24
    2814:	1f c0       	rjmp	.+62     	; 0x2854 <LCD_enuLatch+0x268>
    2816:	fe 01       	movw	r30, r28
    2818:	e0 5b       	subi	r30, 0xB0	; 176
    281a:	ff 4f       	sbci	r31, 0xFF	; 255
    281c:	88 ec       	ldi	r24, 0xC8	; 200
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	91 83       	std	Z+1, r25	; 0x01
    2822:	80 83       	st	Z, r24
    2824:	fe 01       	movw	r30, r28
    2826:	e0 5b       	subi	r30, 0xB0	; 176
    2828:	ff 4f       	sbci	r31, 0xFF	; 255
    282a:	80 81       	ld	r24, Z
    282c:	91 81       	ldd	r25, Z+1	; 0x01
    282e:	01 97       	sbiw	r24, 0x01	; 1
    2830:	f1 f7       	brne	.-4      	; 0x282e <LCD_enuLatch+0x242>
    2832:	fe 01       	movw	r30, r28
    2834:	e0 5b       	subi	r30, 0xB0	; 176
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	91 83       	std	Z+1, r25	; 0x01
    283a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    283c:	de 01       	movw	r26, r28
    283e:	ae 5a       	subi	r26, 0xAE	; 174
    2840:	bf 4f       	sbci	r27, 0xFF	; 255
    2842:	fe 01       	movw	r30, r28
    2844:	ee 5a       	subi	r30, 0xAE	; 174
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	80 81       	ld	r24, Z
    284a:	91 81       	ldd	r25, Z+1	; 0x01
    284c:	01 97       	sbiw	r24, 0x01	; 1
    284e:	11 96       	adiw	r26, 0x01	; 1
    2850:	9c 93       	st	X, r25
    2852:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2854:	fe 01       	movw	r30, r28
    2856:	ee 5a       	subi	r30, 0xAE	; 174
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	80 81       	ld	r24, Z
    285c:	91 81       	ldd	r25, Z+1	; 0x01
    285e:	00 97       	sbiw	r24, 0x00	; 0
    2860:	d1 f6       	brne	.-76     	; 0x2816 <LCD_enuLatch+0x22a>
    2862:	4b c0       	rjmp	.+150    	; 0x28fa <LCD_enuLatch+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2864:	8e 01       	movw	r16, r28
    2866:	0e 5a       	subi	r16, 0xAE	; 174
    2868:	1f 4f       	sbci	r17, 0xFF	; 255
    286a:	fe 01       	movw	r30, r28
    286c:	ec 5a       	subi	r30, 0xAC	; 172
    286e:	ff 4f       	sbci	r31, 0xFF	; 255
    2870:	60 81       	ld	r22, Z
    2872:	71 81       	ldd	r23, Z+1	; 0x01
    2874:	82 81       	ldd	r24, Z+2	; 0x02
    2876:	93 81       	ldd	r25, Z+3	; 0x03
    2878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	f8 01       	movw	r30, r16
    2882:	91 83       	std	Z+1, r25	; 0x01
    2884:	80 83       	st	Z, r24
    2886:	de 01       	movw	r26, r28
    2888:	a2 5b       	subi	r26, 0xB2	; 178
    288a:	bf 4f       	sbci	r27, 0xFF	; 255
    288c:	fe 01       	movw	r30, r28
    288e:	ee 5a       	subi	r30, 0xAE	; 174
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	80 81       	ld	r24, Z
    2894:	91 81       	ldd	r25, Z+1	; 0x01
    2896:	11 96       	adiw	r26, 0x01	; 1
    2898:	9c 93       	st	X, r25
    289a:	8e 93       	st	-X, r24
    289c:	fe 01       	movw	r30, r28
    289e:	e2 5b       	subi	r30, 0xB2	; 178
    28a0:	ff 4f       	sbci	r31, 0xFF	; 255
    28a2:	80 81       	ld	r24, Z
    28a4:	91 81       	ldd	r25, Z+1	; 0x01
    28a6:	01 97       	sbiw	r24, 0x01	; 1
    28a8:	f1 f7       	brne	.-4      	; 0x28a6 <LCD_enuLatch+0x2ba>
    28aa:	fe 01       	movw	r30, r28
    28ac:	e2 5b       	subi	r30, 0xB2	; 178
    28ae:	ff 4f       	sbci	r31, 0xFF	; 255
    28b0:	91 83       	std	Z+1, r25	; 0x01
    28b2:	80 83       	st	Z, r24
    28b4:	22 c0       	rjmp	.+68     	; 0x28fa <LCD_enuLatch+0x30e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28b6:	8e 01       	movw	r16, r28
    28b8:	04 5a       	subi	r16, 0xA4	; 164
    28ba:	1f 4f       	sbci	r17, 0xFF	; 255
    28bc:	fe 01       	movw	r30, r28
    28be:	e3 5a       	subi	r30, 0xA3	; 163
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	60 81       	ld	r22, Z
    28c4:	71 81       	ldd	r23, Z+1	; 0x01
    28c6:	82 81       	ldd	r24, Z+2	; 0x02
    28c8:	93 81       	ldd	r25, Z+3	; 0x03
    28ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	f8 01       	movw	r30, r16
    28d4:	80 83       	st	Z, r24
    28d6:	de 01       	movw	r26, r28
    28d8:	a3 5b       	subi	r26, 0xB3	; 179
    28da:	bf 4f       	sbci	r27, 0xFF	; 255
    28dc:	fe 01       	movw	r30, r28
    28de:	e4 5a       	subi	r30, 0xA4	; 164
    28e0:	ff 4f       	sbci	r31, 0xFF	; 255
    28e2:	80 81       	ld	r24, Z
    28e4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28e6:	fe 01       	movw	r30, r28
    28e8:	e3 5b       	subi	r30, 0xB3	; 179
    28ea:	ff 4f       	sbci	r31, 0xFF	; 255
    28ec:	80 81       	ld	r24, Z
    28ee:	8a 95       	dec	r24
    28f0:	f1 f7       	brne	.-4      	; 0x28ee <LCD_enuLatch+0x302>
    28f2:	fe 01       	movw	r30, r28
    28f4:	e3 5b       	subi	r30, 0xB3	; 179
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	80 83       	st	Z, r24
		_delay_us(1);
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_PIN_LOW);
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	62 e0       	ldi	r22, 0x02	; 2
    28fe:	40 e0       	ldi	r20, 0x00	; 0
    2900:	0e 94 b4 0b 	call	0x1768	; 0x1768 <DIO_enuSetPinValue>
    2904:	fe 01       	movw	r30, r28
    2906:	e7 5b       	subi	r30, 0xB7	; 183
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	80 e0       	ldi	r24, 0x00	; 0
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	a8 e4       	ldi	r26, 0x48	; 72
    2910:	b2 e4       	ldi	r27, 0x42	; 66
    2912:	80 83       	st	Z, r24
    2914:	91 83       	std	Z+1, r25	; 0x01
    2916:	a2 83       	std	Z+2, r26	; 0x02
    2918:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    291a:	8e 01       	movw	r16, r28
    291c:	0b 5b       	subi	r16, 0xBB	; 187
    291e:	1f 4f       	sbci	r17, 0xFF	; 255
    2920:	fe 01       	movw	r30, r28
    2922:	e7 5b       	subi	r30, 0xB7	; 183
    2924:	ff 4f       	sbci	r31, 0xFF	; 255
    2926:	60 81       	ld	r22, Z
    2928:	71 81       	ldd	r23, Z+1	; 0x01
    292a:	82 81       	ldd	r24, Z+2	; 0x02
    292c:	93 81       	ldd	r25, Z+3	; 0x03
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	4a ef       	ldi	r20, 0xFA	; 250
    2934:	54 e4       	ldi	r21, 0x44	; 68
    2936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	f8 01       	movw	r30, r16
    2940:	80 83       	st	Z, r24
    2942:	91 83       	std	Z+1, r25	; 0x01
    2944:	a2 83       	std	Z+2, r26	; 0x02
    2946:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2948:	fe 01       	movw	r30, r28
    294a:	eb 5b       	subi	r30, 0xBB	; 187
    294c:	ff 4f       	sbci	r31, 0xFF	; 255
    294e:	60 81       	ld	r22, Z
    2950:	71 81       	ldd	r23, Z+1	; 0x01
    2952:	82 81       	ldd	r24, Z+2	; 0x02
    2954:	93 81       	ldd	r25, Z+3	; 0x03
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	40 e8       	ldi	r20, 0x80	; 128
    295c:	5f e3       	ldi	r21, 0x3F	; 63
    295e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2962:	88 23       	and	r24, r24
    2964:	44 f4       	brge	.+16     	; 0x2976 <LCD_enuLatch+0x38a>
		__ticks = 1;
    2966:	fe 01       	movw	r30, r28
    2968:	ed 5b       	subi	r30, 0xBD	; 189
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	91 83       	std	Z+1, r25	; 0x01
    2972:	80 83       	st	Z, r24
    2974:	64 c0       	rjmp	.+200    	; 0x2a3e <LCD_enuLatch+0x452>
	else if (__tmp > 65535)
    2976:	fe 01       	movw	r30, r28
    2978:	eb 5b       	subi	r30, 0xBB	; 187
    297a:	ff 4f       	sbci	r31, 0xFF	; 255
    297c:	60 81       	ld	r22, Z
    297e:	71 81       	ldd	r23, Z+1	; 0x01
    2980:	82 81       	ldd	r24, Z+2	; 0x02
    2982:	93 81       	ldd	r25, Z+3	; 0x03
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	3f ef       	ldi	r19, 0xFF	; 255
    2988:	4f e7       	ldi	r20, 0x7F	; 127
    298a:	57 e4       	ldi	r21, 0x47	; 71
    298c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2990:	18 16       	cp	r1, r24
    2992:	0c f0       	brlt	.+2      	; 0x2996 <LCD_enuLatch+0x3aa>
    2994:	43 c0       	rjmp	.+134    	; 0x2a1c <LCD_enuLatch+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2996:	fe 01       	movw	r30, r28
    2998:	e7 5b       	subi	r30, 0xB7	; 183
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	60 81       	ld	r22, Z
    299e:	71 81       	ldd	r23, Z+1	; 0x01
    29a0:	82 81       	ldd	r24, Z+2	; 0x02
    29a2:	93 81       	ldd	r25, Z+3	; 0x03
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	40 e2       	ldi	r20, 0x20	; 32
    29aa:	51 e4       	ldi	r21, 0x41	; 65
    29ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	8e 01       	movw	r16, r28
    29b6:	0d 5b       	subi	r16, 0xBD	; 189
    29b8:	1f 4f       	sbci	r17, 0xFF	; 255
    29ba:	bc 01       	movw	r22, r24
    29bc:	cd 01       	movw	r24, r26
    29be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	f8 01       	movw	r30, r16
    29c8:	91 83       	std	Z+1, r25	; 0x01
    29ca:	80 83       	st	Z, r24
    29cc:	1f c0       	rjmp	.+62     	; 0x2a0c <LCD_enuLatch+0x420>
    29ce:	fe 01       	movw	r30, r28
    29d0:	ef 5b       	subi	r30, 0xBF	; 191
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	88 ec       	ldi	r24, 0xC8	; 200
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	91 83       	std	Z+1, r25	; 0x01
    29da:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29dc:	fe 01       	movw	r30, r28
    29de:	ef 5b       	subi	r30, 0xBF	; 191
    29e0:	ff 4f       	sbci	r31, 0xFF	; 255
    29e2:	80 81       	ld	r24, Z
    29e4:	91 81       	ldd	r25, Z+1	; 0x01
    29e6:	01 97       	sbiw	r24, 0x01	; 1
    29e8:	f1 f7       	brne	.-4      	; 0x29e6 <LCD_enuLatch+0x3fa>
    29ea:	fe 01       	movw	r30, r28
    29ec:	ef 5b       	subi	r30, 0xBF	; 191
    29ee:	ff 4f       	sbci	r31, 0xFF	; 255
    29f0:	91 83       	std	Z+1, r25	; 0x01
    29f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f4:	de 01       	movw	r26, r28
    29f6:	ad 5b       	subi	r26, 0xBD	; 189
    29f8:	bf 4f       	sbci	r27, 0xFF	; 255
    29fa:	fe 01       	movw	r30, r28
    29fc:	ed 5b       	subi	r30, 0xBD	; 189
    29fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2a00:	80 81       	ld	r24, Z
    2a02:	91 81       	ldd	r25, Z+1	; 0x01
    2a04:	01 97       	sbiw	r24, 0x01	; 1
    2a06:	11 96       	adiw	r26, 0x01	; 1
    2a08:	9c 93       	st	X, r25
    2a0a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	ed 5b       	subi	r30, 0xBD	; 189
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	80 81       	ld	r24, Z
    2a14:	91 81       	ldd	r25, Z+1	; 0x01
    2a16:	00 97       	sbiw	r24, 0x00	; 0
    2a18:	d1 f6       	brne	.-76     	; 0x29ce <LCD_enuLatch+0x3e2>
    2a1a:	24 c0       	rjmp	.+72     	; 0x2a64 <LCD_enuLatch+0x478>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a1c:	8e 01       	movw	r16, r28
    2a1e:	0d 5b       	subi	r16, 0xBD	; 189
    2a20:	1f 4f       	sbci	r17, 0xFF	; 255
    2a22:	fe 01       	movw	r30, r28
    2a24:	eb 5b       	subi	r30, 0xBB	; 187
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	60 81       	ld	r22, Z
    2a2a:	71 81       	ldd	r23, Z+1	; 0x01
    2a2c:	82 81       	ldd	r24, Z+2	; 0x02
    2a2e:	93 81       	ldd	r25, Z+3	; 0x03
    2a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	f8 01       	movw	r30, r16
    2a3a:	91 83       	std	Z+1, r25	; 0x01
    2a3c:	80 83       	st	Z, r24
    2a3e:	fe 01       	movw	r30, r28
    2a40:	ed 5b       	subi	r30, 0xBD	; 189
    2a42:	ff 4f       	sbci	r31, 0xFF	; 255
    2a44:	80 81       	ld	r24, Z
    2a46:	91 81       	ldd	r25, Z+1	; 0x01
    2a48:	fe 01       	movw	r30, r28
    2a4a:	ff 96       	adiw	r30, 0x3f	; 63
    2a4c:	91 83       	std	Z+1, r25	; 0x01
    2a4e:	80 83       	st	Z, r24
    2a50:	fe 01       	movw	r30, r28
    2a52:	ff 96       	adiw	r30, 0x3f	; 63
    2a54:	80 81       	ld	r24, Z
    2a56:	91 81       	ldd	r25, Z+1	; 0x01
    2a58:	01 97       	sbiw	r24, 0x01	; 1
    2a5a:	f1 f7       	brne	.-4      	; 0x2a58 <LCD_enuLatch+0x46c>
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	ff 96       	adiw	r30, 0x3f	; 63
    2a60:	91 83       	std	Z+1, r25	; 0x01
    2a62:	80 83       	st	Z, r24
		_delay_ms(50);
		/****************************************************/
		/****************************************************/
	}

	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data >> LCD_SEVEN) & LCD_ONE));
    2a64:	fe 01       	movw	r30, r28
    2a66:	ea 59       	subi	r30, 0x9A	; 154
    2a68:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6a:	80 81       	ld	r24, Z
    2a6c:	98 2f       	mov	r25, r24
    2a6e:	99 1f       	adc	r25, r25
    2a70:	99 27       	eor	r25, r25
    2a72:	99 1f       	adc	r25, r25
    2a74:	80 e0       	ldi	r24, 0x00	; 0
    2a76:	67 e0       	ldi	r22, 0x07	; 7
    2a78:	49 2f       	mov	r20, r25
    2a7a:	0e 94 b4 0b 	call	0x1768	; 0x1768 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data >> LCD_SEX)   & LCD_ONE));
    2a7e:	fe 01       	movw	r30, r28
    2a80:	ea 59       	subi	r30, 0x9A	; 154
    2a82:	ff 4f       	sbci	r31, 0xFF	; 255
    2a84:	80 81       	ld	r24, Z
    2a86:	82 95       	swap	r24
    2a88:	86 95       	lsr	r24
    2a8a:	86 95       	lsr	r24
    2a8c:	83 70       	andi	r24, 0x03	; 3
    2a8e:	98 2f       	mov	r25, r24
    2a90:	91 70       	andi	r25, 0x01	; 1
    2a92:	80 e0       	ldi	r24, 0x00	; 0
    2a94:	66 e0       	ldi	r22, 0x06	; 6
    2a96:	49 2f       	mov	r20, r25
    2a98:	0e 94 b4 0b 	call	0x1768	; 0x1768 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data >> LCD_FIVE)  & LCD_ONE));
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	ea 59       	subi	r30, 0x9A	; 154
    2aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa2:	80 81       	ld	r24, Z
    2aa4:	82 95       	swap	r24
    2aa6:	86 95       	lsr	r24
    2aa8:	87 70       	andi	r24, 0x07	; 7
    2aaa:	98 2f       	mov	r25, r24
    2aac:	91 70       	andi	r25, 0x01	; 1
    2aae:	80 e0       	ldi	r24, 0x00	; 0
    2ab0:	65 e0       	ldi	r22, 0x05	; 5
    2ab2:	49 2f       	mov	r20, r25
    2ab4:	0e 94 b4 0b 	call	0x1768	; 0x1768 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data >> LCD_FOUR)  & LCD_ONE));
    2ab8:	fe 01       	movw	r30, r28
    2aba:	ea 59       	subi	r30, 0x9A	; 154
    2abc:	ff 4f       	sbci	r31, 0xFF	; 255
    2abe:	80 81       	ld	r24, Z
    2ac0:	82 95       	swap	r24
    2ac2:	8f 70       	andi	r24, 0x0F	; 15
    2ac4:	98 2f       	mov	r25, r24
    2ac6:	91 70       	andi	r25, 0x01	; 1
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	64 e0       	ldi	r22, 0x04	; 4
    2acc:	49 2f       	mov	r20, r25
    2ace:	0e 94 b4 0b 	call	0x1768	; 0x1768 <DIO_enuSetPinValue>

	/****************************************************/
	/*********         Latch on  EN_PIN         *********/
	/****************************************************/

	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_PIN_HIGH);
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	62 e0       	ldi	r22, 0x02	; 2
    2ad6:	41 e0       	ldi	r20, 0x01	; 1
    2ad8:	0e 94 b4 0b 	call	0x1768	; 0x1768 <DIO_enuSetPinValue>
    2adc:	80 e0       	ldi	r24, 0x00	; 0
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	a0 e8       	ldi	r26, 0x80	; 128
    2ae2:	bf e3       	ldi	r27, 0x3F	; 63
    2ae4:	8b af       	std	Y+59, r24	; 0x3b
    2ae6:	9c af       	std	Y+60, r25	; 0x3c
    2ae8:	ad af       	std	Y+61, r26	; 0x3d
    2aea:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2aec:	6b ad       	ldd	r22, Y+59	; 0x3b
    2aee:	7c ad       	ldd	r23, Y+60	; 0x3c
    2af0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2af2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2af4:	2b ea       	ldi	r18, 0xAB	; 171
    2af6:	3a ea       	ldi	r19, 0xAA	; 170
    2af8:	4a e2       	ldi	r20, 0x2A	; 42
    2afa:	50 e4       	ldi	r21, 0x40	; 64
    2afc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	8f ab       	std	Y+55, r24	; 0x37
    2b06:	98 af       	std	Y+56, r25	; 0x38
    2b08:	a9 af       	std	Y+57, r26	; 0x39
    2b0a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2b0c:	6f a9       	ldd	r22, Y+55	; 0x37
    2b0e:	78 ad       	ldd	r23, Y+56	; 0x38
    2b10:	89 ad       	ldd	r24, Y+57	; 0x39
    2b12:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	40 e8       	ldi	r20, 0x80	; 128
    2b1a:	5f e3       	ldi	r21, 0x3F	; 63
    2b1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b20:	88 23       	and	r24, r24
    2b22:	1c f4       	brge	.+6      	; 0x2b2a <LCD_enuLatch+0x53e>
		__ticks = 1;
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	8e ab       	std	Y+54, r24	; 0x36
    2b28:	91 c0       	rjmp	.+290    	; 0x2c4c <LCD_enuLatch+0x660>
	else if (__tmp > 255)
    2b2a:	6f a9       	ldd	r22, Y+55	; 0x37
    2b2c:	78 ad       	ldd	r23, Y+56	; 0x38
    2b2e:	89 ad       	ldd	r24, Y+57	; 0x39
    2b30:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b32:	20 e0       	ldi	r18, 0x00	; 0
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	4f e7       	ldi	r20, 0x7F	; 127
    2b38:	53 e4       	ldi	r21, 0x43	; 67
    2b3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b3e:	18 16       	cp	r1, r24
    2b40:	0c f0       	brlt	.+2      	; 0x2b44 <LCD_enuLatch+0x558>
    2b42:	7b c0       	rjmp	.+246    	; 0x2c3a <LCD_enuLatch+0x64e>
	{
		_delay_ms(__us / 1000.0);
    2b44:	6b ad       	ldd	r22, Y+59	; 0x3b
    2b46:	7c ad       	ldd	r23, Y+60	; 0x3c
    2b48:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b4a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	4a e7       	ldi	r20, 0x7A	; 122
    2b52:	54 e4       	ldi	r21, 0x44	; 68
    2b54:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	8a ab       	std	Y+50, r24	; 0x32
    2b5e:	9b ab       	std	Y+51, r25	; 0x33
    2b60:	ac ab       	std	Y+52, r26	; 0x34
    2b62:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b64:	6a a9       	ldd	r22, Y+50	; 0x32
    2b66:	7b a9       	ldd	r23, Y+51	; 0x33
    2b68:	8c a9       	ldd	r24, Y+52	; 0x34
    2b6a:	9d a9       	ldd	r25, Y+53	; 0x35
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	4a ef       	ldi	r20, 0xFA	; 250
    2b72:	54 e4       	ldi	r21, 0x44	; 68
    2b74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	8e a7       	std	Y+46, r24	; 0x2e
    2b7e:	9f a7       	std	Y+47, r25	; 0x2f
    2b80:	a8 ab       	std	Y+48, r26	; 0x30
    2b82:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2b84:	6e a5       	ldd	r22, Y+46	; 0x2e
    2b86:	7f a5       	ldd	r23, Y+47	; 0x2f
    2b88:	88 a9       	ldd	r24, Y+48	; 0x30
    2b8a:	99 a9       	ldd	r25, Y+49	; 0x31
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	40 e8       	ldi	r20, 0x80	; 128
    2b92:	5f e3       	ldi	r21, 0x3F	; 63
    2b94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b98:	88 23       	and	r24, r24
    2b9a:	2c f4       	brge	.+10     	; 0x2ba6 <LCD_enuLatch+0x5ba>
		__ticks = 1;
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	9d a7       	std	Y+45, r25	; 0x2d
    2ba2:	8c a7       	std	Y+44, r24	; 0x2c
    2ba4:	3f c0       	rjmp	.+126    	; 0x2c24 <LCD_enuLatch+0x638>
	else if (__tmp > 65535)
    2ba6:	6e a5       	ldd	r22, Y+46	; 0x2e
    2ba8:	7f a5       	ldd	r23, Y+47	; 0x2f
    2baa:	88 a9       	ldd	r24, Y+48	; 0x30
    2bac:	99 a9       	ldd	r25, Y+49	; 0x31
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	3f ef       	ldi	r19, 0xFF	; 255
    2bb2:	4f e7       	ldi	r20, 0x7F	; 127
    2bb4:	57 e4       	ldi	r21, 0x47	; 71
    2bb6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bba:	18 16       	cp	r1, r24
    2bbc:	4c f5       	brge	.+82     	; 0x2c10 <LCD_enuLatch+0x624>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bbe:	6a a9       	ldd	r22, Y+50	; 0x32
    2bc0:	7b a9       	ldd	r23, Y+51	; 0x33
    2bc2:	8c a9       	ldd	r24, Y+52	; 0x34
    2bc4:	9d a9       	ldd	r25, Y+53	; 0x35
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	40 e2       	ldi	r20, 0x20	; 32
    2bcc:	51 e4       	ldi	r21, 0x41	; 65
    2bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	bc 01       	movw	r22, r24
    2bd8:	cd 01       	movw	r24, r26
    2bda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	9d a7       	std	Y+45, r25	; 0x2d
    2be4:	8c a7       	std	Y+44, r24	; 0x2c
    2be6:	0f c0       	rjmp	.+30     	; 0x2c06 <LCD_enuLatch+0x61a>
    2be8:	88 ec       	ldi	r24, 0xC8	; 200
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	9b a7       	std	Y+43, r25	; 0x2b
    2bee:	8a a7       	std	Y+42, r24	; 0x2a
    2bf0:	8a a5       	ldd	r24, Y+42	; 0x2a
    2bf2:	9b a5       	ldd	r25, Y+43	; 0x2b
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	f1 f7       	brne	.-4      	; 0x2bf4 <LCD_enuLatch+0x608>
    2bf8:	9b a7       	std	Y+43, r25	; 0x2b
    2bfa:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bfc:	8c a5       	ldd	r24, Y+44	; 0x2c
    2bfe:	9d a5       	ldd	r25, Y+45	; 0x2d
    2c00:	01 97       	sbiw	r24, 0x01	; 1
    2c02:	9d a7       	std	Y+45, r25	; 0x2d
    2c04:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c06:	8c a5       	ldd	r24, Y+44	; 0x2c
    2c08:	9d a5       	ldd	r25, Y+45	; 0x2d
    2c0a:	00 97       	sbiw	r24, 0x00	; 0
    2c0c:	69 f7       	brne	.-38     	; 0x2be8 <LCD_enuLatch+0x5fc>
    2c0e:	24 c0       	rjmp	.+72     	; 0x2c58 <LCD_enuLatch+0x66c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c10:	6e a5       	ldd	r22, Y+46	; 0x2e
    2c12:	7f a5       	ldd	r23, Y+47	; 0x2f
    2c14:	88 a9       	ldd	r24, Y+48	; 0x30
    2c16:	99 a9       	ldd	r25, Y+49	; 0x31
    2c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	9d a7       	std	Y+45, r25	; 0x2d
    2c22:	8c a7       	std	Y+44, r24	; 0x2c
    2c24:	8c a5       	ldd	r24, Y+44	; 0x2c
    2c26:	9d a5       	ldd	r25, Y+45	; 0x2d
    2c28:	99 a7       	std	Y+41, r25	; 0x29
    2c2a:	88 a7       	std	Y+40, r24	; 0x28
    2c2c:	88 a5       	ldd	r24, Y+40	; 0x28
    2c2e:	99 a5       	ldd	r25, Y+41	; 0x29
    2c30:	01 97       	sbiw	r24, 0x01	; 1
    2c32:	f1 f7       	brne	.-4      	; 0x2c30 <LCD_enuLatch+0x644>
    2c34:	99 a7       	std	Y+41, r25	; 0x29
    2c36:	88 a7       	std	Y+40, r24	; 0x28
    2c38:	0f c0       	rjmp	.+30     	; 0x2c58 <LCD_enuLatch+0x66c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c3a:	6f a9       	ldd	r22, Y+55	; 0x37
    2c3c:	78 ad       	ldd	r23, Y+56	; 0x38
    2c3e:	89 ad       	ldd	r24, Y+57	; 0x39
    2c40:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c46:	dc 01       	movw	r26, r24
    2c48:	cb 01       	movw	r24, r22
    2c4a:	8e ab       	std	Y+54, r24	; 0x36
    2c4c:	8e a9       	ldd	r24, Y+54	; 0x36
    2c4e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c50:	8f a1       	ldd	r24, Y+39	; 0x27
    2c52:	8a 95       	dec	r24
    2c54:	f1 f7       	brne	.-4      	; 0x2c52 <LCD_enuLatch+0x666>
    2c56:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(1);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_PIN_LOW);
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	62 e0       	ldi	r22, 0x02	; 2
    2c5c:	40 e0       	ldi	r20, 0x00	; 0
    2c5e:	0e 94 b4 0b 	call	0x1768	; 0x1768 <DIO_enuSetPinValue>
    2c62:	80 e0       	ldi	r24, 0x00	; 0
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	a8 e4       	ldi	r26, 0x48	; 72
    2c68:	b2 e4       	ldi	r27, 0x42	; 66
    2c6a:	8b a3       	std	Y+35, r24	; 0x23
    2c6c:	9c a3       	std	Y+36, r25	; 0x24
    2c6e:	ad a3       	std	Y+37, r26	; 0x25
    2c70:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c72:	6b a1       	ldd	r22, Y+35	; 0x23
    2c74:	7c a1       	ldd	r23, Y+36	; 0x24
    2c76:	8d a1       	ldd	r24, Y+37	; 0x25
    2c78:	9e a1       	ldd	r25, Y+38	; 0x26
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	4a ef       	ldi	r20, 0xFA	; 250
    2c80:	54 e4       	ldi	r21, 0x44	; 68
    2c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	8f 8f       	std	Y+31, r24	; 0x1f
    2c8c:	98 a3       	std	Y+32, r25	; 0x20
    2c8e:	a9 a3       	std	Y+33, r26	; 0x21
    2c90:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2c92:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2c94:	78 a1       	ldd	r23, Y+32	; 0x20
    2c96:	89 a1       	ldd	r24, Y+33	; 0x21
    2c98:	9a a1       	ldd	r25, Y+34	; 0x22
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	40 e8       	ldi	r20, 0x80	; 128
    2ca0:	5f e3       	ldi	r21, 0x3F	; 63
    2ca2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ca6:	88 23       	and	r24, r24
    2ca8:	2c f4       	brge	.+10     	; 0x2cb4 <LCD_enuLatch+0x6c8>
		__ticks = 1;
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	9e 8f       	std	Y+30, r25	; 0x1e
    2cb0:	8d 8f       	std	Y+29, r24	; 0x1d
    2cb2:	3f c0       	rjmp	.+126    	; 0x2d32 <LCD_enuLatch+0x746>
	else if (__tmp > 65535)
    2cb4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2cb6:	78 a1       	ldd	r23, Y+32	; 0x20
    2cb8:	89 a1       	ldd	r24, Y+33	; 0x21
    2cba:	9a a1       	ldd	r25, Y+34	; 0x22
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	3f ef       	ldi	r19, 0xFF	; 255
    2cc0:	4f e7       	ldi	r20, 0x7F	; 127
    2cc2:	57 e4       	ldi	r21, 0x47	; 71
    2cc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cc8:	18 16       	cp	r1, r24
    2cca:	4c f5       	brge	.+82     	; 0x2d1e <LCD_enuLatch+0x732>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ccc:	6b a1       	ldd	r22, Y+35	; 0x23
    2cce:	7c a1       	ldd	r23, Y+36	; 0x24
    2cd0:	8d a1       	ldd	r24, Y+37	; 0x25
    2cd2:	9e a1       	ldd	r25, Y+38	; 0x26
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	40 e2       	ldi	r20, 0x20	; 32
    2cda:	51 e4       	ldi	r21, 0x41	; 65
    2cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	bc 01       	movw	r22, r24
    2ce6:	cd 01       	movw	r24, r26
    2ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	9e 8f       	std	Y+30, r25	; 0x1e
    2cf2:	8d 8f       	std	Y+29, r24	; 0x1d
    2cf4:	0f c0       	rjmp	.+30     	; 0x2d14 <LCD_enuLatch+0x728>
    2cf6:	88 ec       	ldi	r24, 0xC8	; 200
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	9c 8f       	std	Y+28, r25	; 0x1c
    2cfc:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2cfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d02:	01 97       	sbiw	r24, 0x01	; 1
    2d04:	f1 f7       	brne	.-4      	; 0x2d02 <LCD_enuLatch+0x716>
    2d06:	9c 8f       	std	Y+28, r25	; 0x1c
    2d08:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d0c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d0e:	01 97       	sbiw	r24, 0x01	; 1
    2d10:	9e 8f       	std	Y+30, r25	; 0x1e
    2d12:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d16:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d18:	00 97       	sbiw	r24, 0x00	; 0
    2d1a:	69 f7       	brne	.-38     	; 0x2cf6 <LCD_enuLatch+0x70a>
    2d1c:	14 c0       	rjmp	.+40     	; 0x2d46 <LCD_enuLatch+0x75a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d1e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2d20:	78 a1       	ldd	r23, Y+32	; 0x20
    2d22:	89 a1       	ldd	r24, Y+33	; 0x21
    2d24:	9a a1       	ldd	r25, Y+34	; 0x22
    2d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	9e 8f       	std	Y+30, r25	; 0x1e
    2d30:	8d 8f       	std	Y+29, r24	; 0x1d
    2d32:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d34:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d36:	9a 8f       	std	Y+26, r25	; 0x1a
    2d38:	89 8f       	std	Y+25, r24	; 0x19
    2d3a:	89 8d       	ldd	r24, Y+25	; 0x19
    2d3c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	f1 f7       	brne	.-4      	; 0x2d3e <LCD_enuLatch+0x752>
    2d42:	9a 8f       	std	Y+26, r25	; 0x1a
    2d44:	89 8f       	std	Y+25, r24	; 0x19
	/****************************************************/
	_delay_ms(50);
	/****************************************************/
	/****************************************************/

	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data >> LCD_THREE) & LCD_ONE));
    2d46:	fe 01       	movw	r30, r28
    2d48:	ea 59       	subi	r30, 0x9A	; 154
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	80 81       	ld	r24, Z
    2d4e:	86 95       	lsr	r24
    2d50:	86 95       	lsr	r24
    2d52:	86 95       	lsr	r24
    2d54:	98 2f       	mov	r25, r24
    2d56:	91 70       	andi	r25, 0x01	; 1
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	67 e0       	ldi	r22, 0x07	; 7
    2d5c:	49 2f       	mov	r20, r25
    2d5e:	0e 94 b4 0b 	call	0x1768	; 0x1768 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data >> LCD_TWO)   & LCD_ONE));
    2d62:	fe 01       	movw	r30, r28
    2d64:	ea 59       	subi	r30, 0x9A	; 154
    2d66:	ff 4f       	sbci	r31, 0xFF	; 255
    2d68:	80 81       	ld	r24, Z
    2d6a:	86 95       	lsr	r24
    2d6c:	86 95       	lsr	r24
    2d6e:	98 2f       	mov	r25, r24
    2d70:	91 70       	andi	r25, 0x01	; 1
    2d72:	80 e0       	ldi	r24, 0x00	; 0
    2d74:	66 e0       	ldi	r22, 0x06	; 6
    2d76:	49 2f       	mov	r20, r25
    2d78:	0e 94 b4 0b 	call	0x1768	; 0x1768 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data >> LCD_ONE)   & LCD_ONE));
    2d7c:	fe 01       	movw	r30, r28
    2d7e:	ea 59       	subi	r30, 0x9A	; 154
    2d80:	ff 4f       	sbci	r31, 0xFF	; 255
    2d82:	80 81       	ld	r24, Z
    2d84:	86 95       	lsr	r24
    2d86:	98 2f       	mov	r25, r24
    2d88:	91 70       	andi	r25, 0x01	; 1
    2d8a:	80 e0       	ldi	r24, 0x00	; 0
    2d8c:	65 e0       	ldi	r22, 0x05	; 5
    2d8e:	49 2f       	mov	r20, r25
    2d90:	0e 94 b4 0b 	call	0x1768	; 0x1768 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data >> LCD_ZERO)  & LCD_ONE));
    2d94:	fe 01       	movw	r30, r28
    2d96:	ea 59       	subi	r30, 0x9A	; 154
    2d98:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9a:	80 81       	ld	r24, Z
    2d9c:	98 2f       	mov	r25, r24
    2d9e:	91 70       	andi	r25, 0x01	; 1
    2da0:	80 e0       	ldi	r24, 0x00	; 0
    2da2:	64 e0       	ldi	r22, 0x04	; 4
    2da4:	49 2f       	mov	r20, r25
    2da6:	0e 94 b4 0b 	call	0x1768	; 0x1768 <DIO_enuSetPinValue>

	/****************************************************/
	/*********         Latch on  EN_PIN         *********/
	/****************************************************/

	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_PIN_HIGH);
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	62 e0       	ldi	r22, 0x02	; 2
    2dae:	41 e0       	ldi	r20, 0x01	; 1
    2db0:	0e 94 b4 0b 	call	0x1768	; 0x1768 <DIO_enuSetPinValue>
    2db4:	80 e0       	ldi	r24, 0x00	; 0
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	a0 e8       	ldi	r26, 0x80	; 128
    2dba:	bf e3       	ldi	r27, 0x3F	; 63
    2dbc:	8d 8b       	std	Y+21, r24	; 0x15
    2dbe:	9e 8b       	std	Y+22, r25	; 0x16
    2dc0:	af 8b       	std	Y+23, r26	; 0x17
    2dc2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2dc4:	6d 89       	ldd	r22, Y+21	; 0x15
    2dc6:	7e 89       	ldd	r23, Y+22	; 0x16
    2dc8:	8f 89       	ldd	r24, Y+23	; 0x17
    2dca:	98 8d       	ldd	r25, Y+24	; 0x18
    2dcc:	2b ea       	ldi	r18, 0xAB	; 171
    2dce:	3a ea       	ldi	r19, 0xAA	; 170
    2dd0:	4a e2       	ldi	r20, 0x2A	; 42
    2dd2:	50 e4       	ldi	r21, 0x40	; 64
    2dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd8:	dc 01       	movw	r26, r24
    2dda:	cb 01       	movw	r24, r22
    2ddc:	89 8b       	std	Y+17, r24	; 0x11
    2dde:	9a 8b       	std	Y+18, r25	; 0x12
    2de0:	ab 8b       	std	Y+19, r26	; 0x13
    2de2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2de4:	69 89       	ldd	r22, Y+17	; 0x11
    2de6:	7a 89       	ldd	r23, Y+18	; 0x12
    2de8:	8b 89       	ldd	r24, Y+19	; 0x13
    2dea:	9c 89       	ldd	r25, Y+20	; 0x14
    2dec:	20 e0       	ldi	r18, 0x00	; 0
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	40 e8       	ldi	r20, 0x80	; 128
    2df2:	5f e3       	ldi	r21, 0x3F	; 63
    2df4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2df8:	88 23       	and	r24, r24
    2dfa:	1c f4       	brge	.+6      	; 0x2e02 <LCD_enuLatch+0x816>
		__ticks = 1;
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	88 8b       	std	Y+16, r24	; 0x10
    2e00:	91 c0       	rjmp	.+290    	; 0x2f24 <LCD_enuLatch+0x938>
	else if (__tmp > 255)
    2e02:	69 89       	ldd	r22, Y+17	; 0x11
    2e04:	7a 89       	ldd	r23, Y+18	; 0x12
    2e06:	8b 89       	ldd	r24, Y+19	; 0x13
    2e08:	9c 89       	ldd	r25, Y+20	; 0x14
    2e0a:	20 e0       	ldi	r18, 0x00	; 0
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	4f e7       	ldi	r20, 0x7F	; 127
    2e10:	53 e4       	ldi	r21, 0x43	; 67
    2e12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e16:	18 16       	cp	r1, r24
    2e18:	0c f0       	brlt	.+2      	; 0x2e1c <LCD_enuLatch+0x830>
    2e1a:	7b c0       	rjmp	.+246    	; 0x2f12 <LCD_enuLatch+0x926>
	{
		_delay_ms(__us / 1000.0);
    2e1c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e1e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e20:	8f 89       	ldd	r24, Y+23	; 0x17
    2e22:	98 8d       	ldd	r25, Y+24	; 0x18
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	4a e7       	ldi	r20, 0x7A	; 122
    2e2a:	54 e4       	ldi	r21, 0x44	; 68
    2e2c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	8c 87       	std	Y+12, r24	; 0x0c
    2e36:	9d 87       	std	Y+13, r25	; 0x0d
    2e38:	ae 87       	std	Y+14, r26	; 0x0e
    2e3a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e3c:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e3e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e40:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e42:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	4a ef       	ldi	r20, 0xFA	; 250
    2e4a:	54 e4       	ldi	r21, 0x44	; 68
    2e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	88 87       	std	Y+8, r24	; 0x08
    2e56:	99 87       	std	Y+9, r25	; 0x09
    2e58:	aa 87       	std	Y+10, r26	; 0x0a
    2e5a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2e5c:	68 85       	ldd	r22, Y+8	; 0x08
    2e5e:	79 85       	ldd	r23, Y+9	; 0x09
    2e60:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e62:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e64:	20 e0       	ldi	r18, 0x00	; 0
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	40 e8       	ldi	r20, 0x80	; 128
    2e6a:	5f e3       	ldi	r21, 0x3F	; 63
    2e6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e70:	88 23       	and	r24, r24
    2e72:	2c f4       	brge	.+10     	; 0x2e7e <LCD_enuLatch+0x892>
		__ticks = 1;
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	9f 83       	std	Y+7, r25	; 0x07
    2e7a:	8e 83       	std	Y+6, r24	; 0x06
    2e7c:	3f c0       	rjmp	.+126    	; 0x2efc <LCD_enuLatch+0x910>
	else if (__tmp > 65535)
    2e7e:	68 85       	ldd	r22, Y+8	; 0x08
    2e80:	79 85       	ldd	r23, Y+9	; 0x09
    2e82:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e84:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	3f ef       	ldi	r19, 0xFF	; 255
    2e8a:	4f e7       	ldi	r20, 0x7F	; 127
    2e8c:	57 e4       	ldi	r21, 0x47	; 71
    2e8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e92:	18 16       	cp	r1, r24
    2e94:	4c f5       	brge	.+82     	; 0x2ee8 <LCD_enuLatch+0x8fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e96:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e98:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e9a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e9c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	40 e2       	ldi	r20, 0x20	; 32
    2ea4:	51 e4       	ldi	r21, 0x41	; 65
    2ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eaa:	dc 01       	movw	r26, r24
    2eac:	cb 01       	movw	r24, r22
    2eae:	bc 01       	movw	r22, r24
    2eb0:	cd 01       	movw	r24, r26
    2eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	9f 83       	std	Y+7, r25	; 0x07
    2ebc:	8e 83       	std	Y+6, r24	; 0x06
    2ebe:	0f c0       	rjmp	.+30     	; 0x2ede <LCD_enuLatch+0x8f2>
    2ec0:	88 ec       	ldi	r24, 0xC8	; 200
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	9d 83       	std	Y+5, r25	; 0x05
    2ec6:	8c 83       	std	Y+4, r24	; 0x04
    2ec8:	8c 81       	ldd	r24, Y+4	; 0x04
    2eca:	9d 81       	ldd	r25, Y+5	; 0x05
    2ecc:	01 97       	sbiw	r24, 0x01	; 1
    2ece:	f1 f7       	brne	.-4      	; 0x2ecc <LCD_enuLatch+0x8e0>
    2ed0:	9d 83       	std	Y+5, r25	; 0x05
    2ed2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ed6:	9f 81       	ldd	r25, Y+7	; 0x07
    2ed8:	01 97       	sbiw	r24, 0x01	; 1
    2eda:	9f 83       	std	Y+7, r25	; 0x07
    2edc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ede:	8e 81       	ldd	r24, Y+6	; 0x06
    2ee0:	9f 81       	ldd	r25, Y+7	; 0x07
    2ee2:	00 97       	sbiw	r24, 0x00	; 0
    2ee4:	69 f7       	brne	.-38     	; 0x2ec0 <LCD_enuLatch+0x8d4>
    2ee6:	24 c0       	rjmp	.+72     	; 0x2f30 <LCD_enuLatch+0x944>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee8:	68 85       	ldd	r22, Y+8	; 0x08
    2eea:	79 85       	ldd	r23, Y+9	; 0x09
    2eec:	8a 85       	ldd	r24, Y+10	; 0x0a
    2eee:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	9f 83       	std	Y+7, r25	; 0x07
    2efa:	8e 83       	std	Y+6, r24	; 0x06
    2efc:	8e 81       	ldd	r24, Y+6	; 0x06
    2efe:	9f 81       	ldd	r25, Y+7	; 0x07
    2f00:	9b 83       	std	Y+3, r25	; 0x03
    2f02:	8a 83       	std	Y+2, r24	; 0x02
    2f04:	8a 81       	ldd	r24, Y+2	; 0x02
    2f06:	9b 81       	ldd	r25, Y+3	; 0x03
    2f08:	01 97       	sbiw	r24, 0x01	; 1
    2f0a:	f1 f7       	brne	.-4      	; 0x2f08 <LCD_enuLatch+0x91c>
    2f0c:	9b 83       	std	Y+3, r25	; 0x03
    2f0e:	8a 83       	std	Y+2, r24	; 0x02
    2f10:	0f c0       	rjmp	.+30     	; 0x2f30 <LCD_enuLatch+0x944>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f12:	69 89       	ldd	r22, Y+17	; 0x11
    2f14:	7a 89       	ldd	r23, Y+18	; 0x12
    2f16:	8b 89       	ldd	r24, Y+19	; 0x13
    2f18:	9c 89       	ldd	r25, Y+20	; 0x14
    2f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f1e:	dc 01       	movw	r26, r24
    2f20:	cb 01       	movw	r24, r22
    2f22:	88 8b       	std	Y+16, r24	; 0x10
    2f24:	88 89       	ldd	r24, Y+16	; 0x10
    2f26:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f28:	89 81       	ldd	r24, Y+1	; 0x01
    2f2a:	8a 95       	dec	r24
    2f2c:	f1 f7       	brne	.-4      	; 0x2f2a <LCD_enuLatch+0x93e>
    2f2e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_PIN_LOW);
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	62 e0       	ldi	r22, 0x02	; 2
    2f34:	40 e0       	ldi	r20, 0x00	; 0
    2f36:	0e 94 b4 0b 	call	0x1768	; 0x1768 <DIO_enuSetPinValue>
	/****************************************************/
	//_delay_ms(50);
	/****************************************************/
	/****************************************************/

	error_enuState = ES_OK;
    2f3a:	fe 01       	movw	r30, r28
    2f3c:	eb 59       	subi	r30, 0x9B	; 155
    2f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f40:	10 82       	st	Z, r1
	return error_enuState;
    2f42:	fe 01       	movw	r30, r28
    2f44:	eb 59       	subi	r30, 0x9B	; 155
    2f46:	ff 4f       	sbci	r31, 0xFF	; 255
    2f48:	80 81       	ld	r24, Z
}
    2f4a:	ca 59       	subi	r28, 0x9A	; 154
    2f4c:	df 4f       	sbci	r29, 0xFF	; 255
    2f4e:	0f b6       	in	r0, 0x3f	; 63
    2f50:	f8 94       	cli
    2f52:	de bf       	out	0x3e, r29	; 62
    2f54:	0f be       	out	0x3f, r0	; 63
    2f56:	cd bf       	out	0x3d, r28	; 61
    2f58:	cf 91       	pop	r28
    2f5a:	df 91       	pop	r29
    2f5c:	1f 91       	pop	r17
    2f5e:	0f 91       	pop	r16
    2f60:	08 95       	ret

00002f62 <POWER_u32PowerNumbers>:
/** Arguments       : Base Number and Power Number.                         **/
/** Functionality   : Getting the Power of any Integer Number.              **/
/*****************************************************************************/
/*****************************************************************************/
u32 POWER_u32PowerNumbers(u32 Copy_u32Number , u8 Copy_u8Power)
{
    2f62:	df 93       	push	r29
    2f64:	cf 93       	push	r28
    2f66:	cd b7       	in	r28, 0x3d	; 61
    2f68:	de b7       	in	r29, 0x3e	; 62
    2f6a:	2a 97       	sbiw	r28, 0x0a	; 10
    2f6c:	0f b6       	in	r0, 0x3f	; 63
    2f6e:	f8 94       	cli
    2f70:	de bf       	out	0x3e, r29	; 62
    2f72:	0f be       	out	0x3f, r0	; 63
    2f74:	cd bf       	out	0x3d, r28	; 61
    2f76:	6e 83       	std	Y+6, r22	; 0x06
    2f78:	7f 83       	std	Y+7, r23	; 0x07
    2f7a:	88 87       	std	Y+8, r24	; 0x08
    2f7c:	99 87       	std	Y+9, r25	; 0x09
    2f7e:	4a 87       	std	Y+10, r20	; 0x0a
	u32 Local_u16Result = LCD_ONE ;
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	a0 e0       	ldi	r26, 0x00	; 0
    2f86:	b0 e0       	ldi	r27, 0x00	; 0
    2f88:	8a 83       	std	Y+2, r24	; 0x02
    2f8a:	9b 83       	std	Y+3, r25	; 0x03
    2f8c:	ac 83       	std	Y+4, r26	; 0x04
    2f8e:	bd 83       	std	Y+5, r27	; 0x05
	u8 Local_u8Iteration ;

	for (Local_u8Iteration = LCD_ONE ; Local_u8Iteration <= Copy_u8Power ; Local_u8Iteration++)
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	89 83       	std	Y+1, r24	; 0x01
    2f94:	15 c0       	rjmp	.+42     	; 0x2fc0 <POWER_u32PowerNumbers+0x5e>
	{
		Local_u16Result *=Copy_u32Number ;
    2f96:	8a 81       	ldd	r24, Y+2	; 0x02
    2f98:	9b 81       	ldd	r25, Y+3	; 0x03
    2f9a:	ac 81       	ldd	r26, Y+4	; 0x04
    2f9c:	bd 81       	ldd	r27, Y+5	; 0x05
    2f9e:	2e 81       	ldd	r18, Y+6	; 0x06
    2fa0:	3f 81       	ldd	r19, Y+7	; 0x07
    2fa2:	48 85       	ldd	r20, Y+8	; 0x08
    2fa4:	59 85       	ldd	r21, Y+9	; 0x09
    2fa6:	bc 01       	movw	r22, r24
    2fa8:	cd 01       	movw	r24, r26
    2faa:	0e 94 25 18 	call	0x304a	; 0x304a <__mulsi3>
    2fae:	dc 01       	movw	r26, r24
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	8a 83       	std	Y+2, r24	; 0x02
    2fb4:	9b 83       	std	Y+3, r25	; 0x03
    2fb6:	ac 83       	std	Y+4, r26	; 0x04
    2fb8:	bd 83       	std	Y+5, r27	; 0x05
u32 POWER_u32PowerNumbers(u32 Copy_u32Number , u8 Copy_u8Power)
{
	u32 Local_u16Result = LCD_ONE ;
	u8 Local_u8Iteration ;

	for (Local_u8Iteration = LCD_ONE ; Local_u8Iteration <= Copy_u8Power ; Local_u8Iteration++)
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	8f 5f       	subi	r24, 0xFF	; 255
    2fbe:	89 83       	std	Y+1, r24	; 0x01
    2fc0:	99 81       	ldd	r25, Y+1	; 0x01
    2fc2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fc4:	89 17       	cp	r24, r25
    2fc6:	38 f7       	brcc	.-50     	; 0x2f96 <POWER_u32PowerNumbers+0x34>
	{
		Local_u16Result *=Copy_u32Number ;
	}

	return Local_u16Result ;
    2fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fca:	9b 81       	ldd	r25, Y+3	; 0x03
    2fcc:	ac 81       	ldd	r26, Y+4	; 0x04
    2fce:	bd 81       	ldd	r27, Y+5	; 0x05
}
    2fd0:	bc 01       	movw	r22, r24
    2fd2:	cd 01       	movw	r24, r26
    2fd4:	2a 96       	adiw	r28, 0x0a	; 10
    2fd6:	0f b6       	in	r0, 0x3f	; 63
    2fd8:	f8 94       	cli
    2fda:	de bf       	out	0x3e, r29	; 62
    2fdc:	0f be       	out	0x3f, r0	; 63
    2fde:	cd bf       	out	0x3d, r28	; 61
    2fe0:	cf 91       	pop	r28
    2fe2:	df 91       	pop	r29
    2fe4:	08 95       	ret

00002fe6 <main>:
}

#elif Code == Slave

int main ()
{
    2fe6:	df 93       	push	r29
    2fe8:	cf 93       	push	r28
    2fea:	00 d0       	rcall	.+0      	; 0x2fec <main+0x6>
    2fec:	cd b7       	in	r28, 0x3d	; 61
    2fee:	de b7       	in	r29, 0x3e	; 62
	I2C_enuInitSlave();
    2ff0:	0e 94 6e 06 	call	0xcdc	; 0xcdc <I2C_enuInitSlave>
	DDRA=0xff;
    2ff4:	ea e3       	ldi	r30, 0x3A	; 58
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	8f ef       	ldi	r24, 0xFF	; 255
    2ffa:	80 83       	st	Z, r24
	DDRB=0xff;
    2ffc:	e7 e3       	ldi	r30, 0x37	; 55
    2ffe:	f0 e0       	ldi	r31, 0x00	; 0
    3000:	8f ef       	ldi	r24, 0xFF	; 255
    3002:	80 83       	st	Z, r24
	u8 y;
	ERROR_STATES state;

	state = I2C_enuSlaveCheckHisAdress();
    3004:	0e 94 43 07 	call	0xe86	; 0xe86 <I2C_enuSlaveCheckHisAdress>
    3008:	89 83       	std	Y+1, r24	; 0x01
	if (state == ES_OK)
    300a:	89 81       	ldd	r24, Y+1	; 0x01
    300c:	88 23       	and	r24, r24
    300e:	91 f4       	brne	.+36     	; 0x3034 <main+0x4e>
	{
		state = I2C_enuSlaveRecieveData(&y);
    3010:	ce 01       	movw	r24, r28
    3012:	02 96       	adiw	r24, 0x02	; 2
    3014:	0e 94 a2 07 	call	0xf44	; 0xf44 <I2C_enuSlaveRecieveData>
    3018:	89 83       	std	Y+1, r24	; 0x01
		if (state == ES_OK)
    301a:	89 81       	ldd	r24, Y+1	; 0x01
    301c:	88 23       	and	r24, r24
    301e:	29 f4       	brne	.+10     	; 0x302a <main+0x44>
		{
			PORTA=y;
    3020:	eb e3       	ldi	r30, 0x3B	; 59
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	8a 81       	ldd	r24, Y+2	; 0x02
    3026:	80 83       	st	Z, r24
    3028:	09 c0       	rjmp	.+18     	; 0x303c <main+0x56>
		}
		else
			PORTB=8;
    302a:	e8 e3       	ldi	r30, 0x38	; 56
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	88 e0       	ldi	r24, 0x08	; 8
    3030:	80 83       	st	Z, r24
    3032:	04 c0       	rjmp	.+8      	; 0x303c <main+0x56>
	}
	else
		PORTB=16;
    3034:	e8 e3       	ldi	r30, 0x38	; 56
    3036:	f0 e0       	ldi	r31, 0x00	; 0
    3038:	80 e1       	ldi	r24, 0x10	; 16
    303a:	80 83       	st	Z, r24
	return 0;
    303c:	80 e0       	ldi	r24, 0x00	; 0
    303e:	90 e0       	ldi	r25, 0x00	; 0
}
    3040:	0f 90       	pop	r0
    3042:	0f 90       	pop	r0
    3044:	cf 91       	pop	r28
    3046:	df 91       	pop	r29
    3048:	08 95       	ret

0000304a <__mulsi3>:
    304a:	62 9f       	mul	r22, r18
    304c:	d0 01       	movw	r26, r0
    304e:	73 9f       	mul	r23, r19
    3050:	f0 01       	movw	r30, r0
    3052:	82 9f       	mul	r24, r18
    3054:	e0 0d       	add	r30, r0
    3056:	f1 1d       	adc	r31, r1
    3058:	64 9f       	mul	r22, r20
    305a:	e0 0d       	add	r30, r0
    305c:	f1 1d       	adc	r31, r1
    305e:	92 9f       	mul	r25, r18
    3060:	f0 0d       	add	r31, r0
    3062:	83 9f       	mul	r24, r19
    3064:	f0 0d       	add	r31, r0
    3066:	74 9f       	mul	r23, r20
    3068:	f0 0d       	add	r31, r0
    306a:	65 9f       	mul	r22, r21
    306c:	f0 0d       	add	r31, r0
    306e:	99 27       	eor	r25, r25
    3070:	72 9f       	mul	r23, r18
    3072:	b0 0d       	add	r27, r0
    3074:	e1 1d       	adc	r30, r1
    3076:	f9 1f       	adc	r31, r25
    3078:	63 9f       	mul	r22, r19
    307a:	b0 0d       	add	r27, r0
    307c:	e1 1d       	adc	r30, r1
    307e:	f9 1f       	adc	r31, r25
    3080:	bd 01       	movw	r22, r26
    3082:	cf 01       	movw	r24, r30
    3084:	11 24       	eor	r1, r1
    3086:	08 95       	ret

00003088 <__udivmodsi4>:
    3088:	a1 e2       	ldi	r26, 0x21	; 33
    308a:	1a 2e       	mov	r1, r26
    308c:	aa 1b       	sub	r26, r26
    308e:	bb 1b       	sub	r27, r27
    3090:	fd 01       	movw	r30, r26
    3092:	0d c0       	rjmp	.+26     	; 0x30ae <__udivmodsi4_ep>

00003094 <__udivmodsi4_loop>:
    3094:	aa 1f       	adc	r26, r26
    3096:	bb 1f       	adc	r27, r27
    3098:	ee 1f       	adc	r30, r30
    309a:	ff 1f       	adc	r31, r31
    309c:	a2 17       	cp	r26, r18
    309e:	b3 07       	cpc	r27, r19
    30a0:	e4 07       	cpc	r30, r20
    30a2:	f5 07       	cpc	r31, r21
    30a4:	20 f0       	brcs	.+8      	; 0x30ae <__udivmodsi4_ep>
    30a6:	a2 1b       	sub	r26, r18
    30a8:	b3 0b       	sbc	r27, r19
    30aa:	e4 0b       	sbc	r30, r20
    30ac:	f5 0b       	sbc	r31, r21

000030ae <__udivmodsi4_ep>:
    30ae:	66 1f       	adc	r22, r22
    30b0:	77 1f       	adc	r23, r23
    30b2:	88 1f       	adc	r24, r24
    30b4:	99 1f       	adc	r25, r25
    30b6:	1a 94       	dec	r1
    30b8:	69 f7       	brne	.-38     	; 0x3094 <__udivmodsi4_loop>
    30ba:	60 95       	com	r22
    30bc:	70 95       	com	r23
    30be:	80 95       	com	r24
    30c0:	90 95       	com	r25
    30c2:	9b 01       	movw	r18, r22
    30c4:	ac 01       	movw	r20, r24
    30c6:	bd 01       	movw	r22, r26
    30c8:	cf 01       	movw	r24, r30
    30ca:	08 95       	ret

000030cc <__prologue_saves__>:
    30cc:	2f 92       	push	r2
    30ce:	3f 92       	push	r3
    30d0:	4f 92       	push	r4
    30d2:	5f 92       	push	r5
    30d4:	6f 92       	push	r6
    30d6:	7f 92       	push	r7
    30d8:	8f 92       	push	r8
    30da:	9f 92       	push	r9
    30dc:	af 92       	push	r10
    30de:	bf 92       	push	r11
    30e0:	cf 92       	push	r12
    30e2:	df 92       	push	r13
    30e4:	ef 92       	push	r14
    30e6:	ff 92       	push	r15
    30e8:	0f 93       	push	r16
    30ea:	1f 93       	push	r17
    30ec:	cf 93       	push	r28
    30ee:	df 93       	push	r29
    30f0:	cd b7       	in	r28, 0x3d	; 61
    30f2:	de b7       	in	r29, 0x3e	; 62
    30f4:	ca 1b       	sub	r28, r26
    30f6:	db 0b       	sbc	r29, r27
    30f8:	0f b6       	in	r0, 0x3f	; 63
    30fa:	f8 94       	cli
    30fc:	de bf       	out	0x3e, r29	; 62
    30fe:	0f be       	out	0x3f, r0	; 63
    3100:	cd bf       	out	0x3d, r28	; 61
    3102:	09 94       	ijmp

00003104 <__epilogue_restores__>:
    3104:	2a 88       	ldd	r2, Y+18	; 0x12
    3106:	39 88       	ldd	r3, Y+17	; 0x11
    3108:	48 88       	ldd	r4, Y+16	; 0x10
    310a:	5f 84       	ldd	r5, Y+15	; 0x0f
    310c:	6e 84       	ldd	r6, Y+14	; 0x0e
    310e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3110:	8c 84       	ldd	r8, Y+12	; 0x0c
    3112:	9b 84       	ldd	r9, Y+11	; 0x0b
    3114:	aa 84       	ldd	r10, Y+10	; 0x0a
    3116:	b9 84       	ldd	r11, Y+9	; 0x09
    3118:	c8 84       	ldd	r12, Y+8	; 0x08
    311a:	df 80       	ldd	r13, Y+7	; 0x07
    311c:	ee 80       	ldd	r14, Y+6	; 0x06
    311e:	fd 80       	ldd	r15, Y+5	; 0x05
    3120:	0c 81       	ldd	r16, Y+4	; 0x04
    3122:	1b 81       	ldd	r17, Y+3	; 0x03
    3124:	aa 81       	ldd	r26, Y+2	; 0x02
    3126:	b9 81       	ldd	r27, Y+1	; 0x01
    3128:	ce 0f       	add	r28, r30
    312a:	d1 1d       	adc	r29, r1
    312c:	0f b6       	in	r0, 0x3f	; 63
    312e:	f8 94       	cli
    3130:	de bf       	out	0x3e, r29	; 62
    3132:	0f be       	out	0x3f, r0	; 63
    3134:	cd bf       	out	0x3d, r28	; 61
    3136:	ed 01       	movw	r28, r26
    3138:	08 95       	ret

0000313a <_exit>:
    313a:	f8 94       	cli

0000313c <__stop_program>:
    313c:	ff cf       	rjmp	.-2      	; 0x313c <__stop_program>
